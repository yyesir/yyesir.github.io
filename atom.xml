<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随笔</title>
  
  
  <link href="https://yesir.github.io/atom.xml" rel="self"/>
  
  <link href="https://yesir.github.io/"/>
  <updated>2025-03-31T06:40:56.639Z</updated>
  <id>https://yesir.github.io/</id>
  
  <author>
    <name>yesir</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些C语言示例</title>
    <link href="https://yesir.github.io/2025/03/31/%E4%B8%80%E4%BA%9BC%E8%AF%AD%E8%A8%80%E7%A4%BA%E4%BE%8B/"/>
    <id>https://yesir.github.io/2025/03/31/%E4%B8%80%E4%BA%9BC%E8%AF%AD%E8%A8%80%E7%A4%BA%E4%BE%8B/</id>
    <published>2025-03-31T06:37:42.000Z</published>
    <updated>2025-03-31T06:40:56.639Z</updated>
    
    <content type="html"><![CDATA[<p>C语言递归调用的几个示例</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">void move(char from, char to)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c to %c\n&quot;</span>, from, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void hanoi(int n, char a, char b, char c)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 1)</span><br><span class="line">move(a, c);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">hanoi(n - 1, a, c, b);</span><br><span class="line">move(a, c);</span><br><span class="line">hanoi(n - 1, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int stair(int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 1) <span class="built_in">return</span> 1;</span><br><span class="line"><span class="keyword">if</span>(n == 2) <span class="built_in">return</span> 2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> stair(n - 1) + stair(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int stair3(int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 1) <span class="built_in">return</span> 1;</span><br><span class="line"><span class="keyword">if</span>(n == 2) <span class="built_in">return</span> 2;</span><br><span class="line"><span class="keyword">if</span>(n == 3) <span class="built_in">return</span> 4;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> stair(n - 1) + stair(n - 2) + stair(n - 3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int fibonacci(int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 1 || n == 2)</span><br><span class="line"><span class="built_in">return</span> 1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int factorial(int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 1) <span class="built_in">return</span> 1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> n * factorial(n - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int ball(int n, int m)&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; m) <span class="built_in">return</span> 0;</span><br><span class="line"><span class="keyword">if</span>(n == m) <span class="built_in">return</span> 1;</span><br><span class="line"><span class="keyword">if</span>(m == 0) <span class="built_in">return</span> 1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> ball(n - 1, m -1) + ball(n -1, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int triangle(int m, int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == m || m == 0 || n == 0) <span class="built_in">return</span> 1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> triangle(m - 1, n) + triangle(m -1, n - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int age(int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 1) <span class="built_in">return</span> 10;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> age(n - 1) + 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int peach(int n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == 10) <span class="built_in">return</span> 1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> (peach(n + 1) + 1) * 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int gcd(int a, int b)&#123;</span><br><span class="line">int t;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">t = a;</span><br><span class="line">a = b;</span><br><span class="line">b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b == 0)</span><br><span class="line"><span class="built_in">return</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printDigit(int n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n % 10);</span><br><span class="line"><span class="keyword">if</span>(n &gt; 10)&#123;</span><br><span class="line">printDigit(n / 10);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printStr(char* str)&#123;</span><br><span class="line"><span class="keyword">if</span>(*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">printStr(str + 1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">// 1. 汉诺塔: 请输入盘子数，输出盘子移动的操作步骤 </span><br><span class="line">int n;</span><br><span class="line">scanf(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// 2. 爬楼梯: 某爬楼梯，他可以每次走1级或者2级, 输入楼梯的级数, 求不同的走法数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;楼梯级数: %d, 走法数: %d\n&quot;</span>, n, stair(n));</span><br><span class="line"></span><br><span class="line">// 3. 爬楼梯: 某爬楼梯，他可以每次走1级或者2级或者3级, 输入楼梯的级数, 求不同的走法数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;楼梯级数: %d, 走法数: %d\n&quot;</span>, n, stair3(n));</span><br><span class="line"></span><br><span class="line">// 4. 斐波那契数列: 输入项数, 输出具体数列</span><br><span class="line"><span class="keyword">for</span>(int i = 1; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, fibonacci(i));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">// 5. 求阶乘: 输入整数n, 求: 1!+2!+...n!之和</span><br><span class="line">int <span class="built_in">sum</span> = 0;</span><br><span class="line"><span class="keyword">for</span>(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">sum</span> += factorial(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, <span class="built_in">sum</span>);</span><br><span class="line"></span><br><span class="line">// 6. 取球问题: 在n个球中, 任意取m个(不放回), 求有多少种不同的取法</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n: %d, m: 2, sum = %d\n&quot;</span>, n, ball(n, 2));</span><br><span class="line"></span><br><span class="line">// 7. 杨辉三角: 输入要打印的层数, 打印杨辉三角</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int j = 0; j &lt;= i; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, triangle(i, j));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 8. 求年龄: 有5个人坐在一起，问第5个人多少岁, 他说比第4个人大2岁, 问第4个人多少岁, 他说比第3个人大2岁, 问第3个人多少岁, 他说比第2个人大2岁, 问第2个人多少岁，他说比第1个人大2岁</span><br><span class="line">// 最后问第1个人，他说是10岁, 请问第5个人多大?</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d人 %d岁\n&quot;</span>, n, age(n));</span><br><span class="line"></span><br><span class="line">// 9. 猴子吃桃问题: 猴子第一天摘下若干个桃子, 当即吃了一半, 还不瘾, 又多吃了一个. 第二天早上又将剩下的桃子吃掉一半, 又多吃了一个. 以后每天早上都吃了前一天剩下的一半多一个, 到第十</span><br><span class="line">// 天早上想再吃时，见只剩下一个桃子了，问最初有多少个桃子</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最初的桃子数: %d\n&quot;</span>, peach(1));</span><br><span class="line"></span><br><span class="line">// 10. 最大公约数: 复用递归法求两个数的最大公约数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5 和 2 的最大公约数为: %d\n&quot;</span>, gcd(5, 2));</span><br><span class="line"></span><br><span class="line">// 11. 逆序输出: 输入一个正整数, 将该正整数逆序输出</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;123 逆序输出为:&quot;</span>);</span><br><span class="line">printDigit(123);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">// 12. 逆序输出: 输入一个字符串, 将该字符串逆序输出</span><br><span class="line">char* str = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符串: %s 逆序输出为: &quot;</span>, str);</span><br><span class="line">printStr(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C语言递归调用的几个示例&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>linux升级内核及安装rt补丁</title>
    <link href="https://yesir.github.io/2025/02/19/linux%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%8F%8A%E5%AE%89%E8%A3%85rt%E8%A1%A5%E4%B8%81/"/>
    <id>https://yesir.github.io/2025/02/19/linux%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%8F%8A%E5%AE%89%E8%A3%85rt%E8%A1%A5%E4%B8%81/</id>
    <published>2025-02-19T06:03:19.000Z</published>
    <updated>2025-02-19T06:05:33.299Z</updated>
    
    <content type="html"><![CDATA[<p>以centos 7.9为例，安装5.4.154版本内核及安装rt补丁</p><span id="more"></span><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>一、首先换阿里云源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>二、安装必要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ncurses-devel libncurses-dev bison flex elfutils-libelf-devel bc libelf-dev gcc make git ctags openssl-devel</span><br></pre></td></tr></table></figure><p>三、下载需要的内核版本,内核可以从此<a href="https://www.kernel.org/pub/linux/kernel/v4.x/">下载</a>; rt补丁从此<a href="https://www.kernel.org/pub/linux/kernel/projects/rt/4.1/older/">下载</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.4.154.tar.</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/5.4/older/patch-5.4.154-rt65.patch.xz</span><br></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>一、解压内核及rt补丁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf linux-5.4.154.tar.xz</span><br><span class="line"><span class="built_in">cd</span> linux-5.4.154/</span><br><span class="line">xz -dc ../patch-5.4.154-rt65.patch.xz | patch -p1</span><br></pre></td></tr></table></figure><p>二、将内核配置 (.config) 从 /boot 目录复制到新内核 linux-5.4.154 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /boot/config-3.10.0-1160.el7.x86_64 .config</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">make menuconfig 或make oldconfig</span><br><span class="line"><span class="comment"># 如果不熟悉内核配置这些菜单，只需按 ESC 键即可退出</span></span><br></pre></td></tr></table></figure><p>三、开始编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一:</span></span><br><span class="line">make clean &amp;&amp; make mrproper</span><br><span class="line">make -j x <span class="comment"># 如果需要打成deb包或rpm包 命令后可加参数(make -j8 deb-pkg 或make -j8 rpm-pkg),如打成rpm包需安装rpm-build</span></span><br><span class="line">make modules_install install <span class="comment"># 此步需要root权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：</span></span><br><span class="line">make bzImage</span><br><span class="line">make modules</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make modules_install</span><br></pre></td></tr></table></figure><h2 id="安装后检查"><a href="#安装后检查" class="headerlink" title="安装后检查"></a>安装后检查</h2><p>一、安装完成后，查看启动顺序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F\<span class="string">&#x27; &#x27;</span><span class="variable">$1</span>==<span class="string">&quot;menuentry &quot;</span> &#123;<span class="built_in">print</span> <span class="variable">$2</span>&#125;<span class="string">&#x27; /etc/grub2.cfg</span></span><br></pre></td></tr></table></figure><p>二、设置启动顺序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure><p>三、查看默认启动顺序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grubby --default-kernel</span><br></pre></td></tr></table></figure><p>四、重启电脑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启电脑并查看内核版本</span></span><br><span class="line"><span class="built_in">uname</span> -r</span><br><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><p>参考文档:</p><p>12、参考文档<br><a href="https://www.cnblogs.com/haoee/p/16402200.html">参考一</a><br><a href="https://shzhxh.github.io/2021/11/14/%E7%BC%96%E8%AF%91rt-linux%E4%B8%8E%E4%BD%BF%E7%94%A8rt-tests/">参考二</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以centos 7.9为例，安装5.4.154版本内核及安装rt补丁&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>win10和ubuntu双系统引导修复</title>
    <link href="https://yesir.github.io/2024/11/09/win10%E5%92%8Cubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/"/>
    <id>https://yesir.github.io/2024/11/09/win10%E5%92%8Cubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</id>
    <published>2024-11-09T07:25:52.000Z</published>
    <updated>2024-11-09T07:38:33.288Z</updated>
    
    <content type="html"><![CDATA[<p>利用boot-repair及系统安装盘，修复grub引导进入不了系统的问题</p><span id="more"></span><blockquote><p>1、首先安装boot-repair, 由于进入不了系统，需要利用U盘安装盘进入试安装，然后执行命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加boot-repair安装源</span></span><br><span class="line">add-apt-repository ppa:yannubuntu/boot-repair</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后安装</span></span><br><span class="line">apt-get install boot-repair</span><br></pre></td></tr></table></figure><blockquote><p>2、安装成功后执行:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boot-repair</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  选择<code>recommand repair</code>, 安装过程中，根据提示执行命令，并下一步执行，显示<code>Boot successfully repaired</code>，即修复完成，重启电脑即可。</p><blockquote><p>3、上面步骤完成后，即可正常进入ubuntu系统，但是启动时会发现win10的引导不见了，进入ubuntu系统后，重新执行上面步骤即可修复win10引导。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用boot-repair及系统安装盘，修复grub引导进入不了系统的问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Windows平台双网卡(不同IP段)路由设置</title>
    <link href="https://yesir.github.io/2024/10/11/Windows%E5%B9%B3%E5%8F%B0%E5%8F%8C%E7%BD%91%E5%8D%A1(%E4%B8%8D%E5%90%8CIP%E6%AE%B5)%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/"/>
    <id>https://yesir.github.io/2024/10/11/Windows%E5%B9%B3%E5%8F%B0%E5%8F%8C%E7%BD%91%E5%8D%A1(%E4%B8%8D%E5%90%8CIP%E6%AE%B5)%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/</id>
    <published>2024-10-11T08:47:46.000Z</published>
    <updated>2024-10-11T08:47:57.035Z</updated>
    
    <content type="html"><![CDATA[<p>假设网卡IP为内网: <code>192.168.8.100</code>, 外网:<code>172.16.34.122</code>,设置可内外网同时访问</p><span id="more"></span><ol><li><p>以管理员身份打开cmd</p></li><li><p>查看当前路由表，执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route print</span><br></pre></td></tr></table></figure><p><img src="/images/20241011161800.png"></p></li><li><p>删除默认路由, 执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route delete 0.0.0.0</span><br></pre></td></tr></table></figure></li><li><p>添加静态路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route add 192.168.8.0 mask 255.255.255.0  192.168.8.1 -p</span><br><span class="line">route add 0.0.0.0 mask 0.0.0.0 172.16.34.1 -p</span><br></pre></td></tr></table></figure></li><li><p>再次查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route print</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;假设网卡IP为内网: &lt;code&gt;192.168.8.100&lt;/code&gt;, 外网:&lt;code&gt;172.16.34.122&lt;/code&gt;,设置可内外网同时访问&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>win32创建sshd服务</title>
    <link href="https://yesir.github.io/2024/10/09/win32%E5%88%9B%E5%BB%BAsshd%E6%9C%8D%E5%8A%A1/"/>
    <id>https://yesir.github.io/2024/10/09/win32%E5%88%9B%E5%BB%BAsshd%E6%9C%8D%E5%8A%A1/</id>
    <published>2024-10-09T08:45:46.000Z</published>
    <updated>2024-10-10T09:00:21.495Z</updated>
    
    <content type="html"><![CDATA[<p>windows平台创建并启用sshd服务</p><span id="more"></span><blockquote><p>1、获取所需的Openssh文件,微软的PowerShell团队已经支持openssh，所以安装文件我们可以在github的powershell团队项目下进行下载<br>下载地址： <a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a><br>根据你自己的系统对应下载</p></blockquote><blockquote><p>2、安装OpenSSH<br>这一步非常简单，只用把下载好的压缩文件解压出来即可。<br>首先已经下载好OpenSSH，并且进行解压<br>把OpenSSH整个目录进行复制到 C:\Program Files (其实哪个目录都可以，不过建议安装在这里，免得出问题)</p></blockquote><blockquote><p>3、配置参数<br>单击计算机，右键 –&gt; 属性 –&gt; 高级系统设置 –&gt; 环境变量–系统变量，在此框里面找到 Path 进行编辑，windows7系统编辑时候是以文本形式，所以就需要在最后先添加 “; ” 英文分号, 再把你安装路径 如 C:\Program Files\OpenSSH-Win64 粘贴进去。windows 10系统添加比较方便，进到Path里面,点击-新建直接粘贴进去！</p></blockquote><blockquote><p>4、发布ssh服务<br>打开系统CMD界面依次执行一下命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1) 安装sshd服务</span><br><span class="line">powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</span><br><span class="line"></span><br><span class="line">2）开放22号端口（如果你在windows关闭了防火墙并配置了入站规则可以不执行如下命令，多执行不影响）</span><br><span class="line">netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22</span><br><span class="line"></span><br><span class="line">3）配置开机自启sshd服务</span><br><span class="line">sc config sshd start=auto</span><br><span class="line"></span><br><span class="line">4) 开启服务</span><br><span class="line">net start sshd</span><br><span class="line"></span><br><span class="line">第一次安装完服务之后还需要手动打开一下服务，后面配置过自启之后就不用管了。</span><br><span class="line"></span><br><span class="line">5）验证一下端口</span><br><span class="line">打开cmd，使用netstat -an命令查看一下本机的22端口是否被监听。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;windows平台创建并启用sshd服务&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>创建自己的云手机</title>
    <link href="https://yesir.github.io/2024/05/11/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%89%8B%E6%9C%BA/"/>
    <id>https://yesir.github.io/2024/05/11/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%89%8B%E6%9C%BA/</id>
    <published>2024-05-11T07:54:03.000Z</published>
    <updated>2024-05-11T07:55:56.927Z</updated>
    
    <content type="html"><![CDATA[<p>两种方式创建自己的云手机，一：利用旧安卓手机，二：使用ReDroid</p><span id="more"></span><h1 id="利用旧安卓手机，制作自己的云手机"><a href="#利用旧安卓手机，制作自己的云手机" class="headerlink" title="利用旧安卓手机，制作自己的云手机"></a>利用旧安卓手机，制作自己的云手机</h1><ol><li><p>首先，下载好scrcpy-win64，并将安装目录添加到系统环境变量</p></li><li><p>其次，手机USB数据线连接电脑，并在手机上打开usb调试</p></li><li><p>接着，执行如下命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure><ol start="4"><li>然后，查看手机IP，并拔掉USB数据线：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb connect 192.168.1.55:5555</span><br><span class="line"></span><br><span class="line">显示connected 成功后执行命令:</span><br><span class="line"></span><br><span class="line">scrcpy</span><br></pre></td></tr></table></figure><ol start="5"><li>至此，基本部署均已完成，拖动apk文件到scrcpy手机窗口即可安装应用。</li></ol><h1 id="将手机调试端口通过frp映射到公网"><a href="#将手机调试端口通过frp映射到公网" class="headerlink" title="将手机调试端口通过frp映射到公网"></a>将手机调试端口通过frp映射到公网</h1><ol><li>首先需要一台云服务器，并将防火墙开放tcp：5554 5555端口</li><li>在云服务器上安装frp server端,具体端口配置如下</li></ol><table><thead><tr><th align="center">其它手机或电脑</th><th align="center"></th><th align="center">FRP SERVER</th><th align="center"></th><th align="center">FRP CLIENT</th><th align="center"></th><th align="center">安卓手机</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center">5554</td><td align="center">&lt;———&gt;</td><td align="center">RAND PORT1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">RAND PORT</td><td align="center">&lt;———&gt;</td><td align="center">5555</td><td align="center"></td><td align="center">RAND PORT2</td><td align="center">&lt;———&gt;</td><td align="center">5555</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 7 x64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载程序并解压</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/share</span><br><span class="line">curl -LO https://github.com/fatedier/frp/releases/download/v0.35.1/frp_0.35.1_linux_amd64.tar.gz</span><br><span class="line">tar xzvf frp_0.35.1_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -f frp_0.35.1_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> frp_0.35.1_linux_amd64 frp</span><br><span class="line"><span class="built_in">cd</span> frp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="built_in">cat</span> &gt; frps.ini &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[common]</span></span><br><span class="line"><span class="string">bind_port = 5554   ; FRP 端口</span></span><br><span class="line"><span class="string">token = your-token ; FRP 密码</span></span><br><span class="line"><span class="string">tcp_mux = false</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自启服务</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/frp.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Frp Service</span></span><br><span class="line"><span class="string">Requires=network-online.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">PIDFile=/run/frp.pid</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/share/frp/frps -c /usr/local/share/frp/frps.ini</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now frp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">firewall-cmd --zone=public --add-port=5554/tcp,5555/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在安卓手机同一网络环境安装frp客户端，下载并解压 <a href="https://logi.im/go/aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycC9yZWxlYXNlcy9kb3dubG9hZC92MC4zNS4xL2ZycF8wLjM1LjFfd2luZG93c19hbWQ2NC56aXA">frp_0.35.1_windows_amd64.zip</a>，修改 <code>frpc.ini</code> 为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = logi.im ; FRP 地址</span><br><span class="line">server_port = 5554    ; FRP 端口</span><br><span class="line">token = your-token    ; FRP 密码</span><br><span class="line">tcp_mux = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[adb]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.2.177 ; 安卓设备 IP</span><br><span class="line">local_port = 5555        ; 安卓设备 ADB 端口</span><br><span class="line">remote_port = 5555       ; FRP ADB 转发端口</span><br></pre></td></tr></table></figure><p>随后在本文件夹打开终端，使用以下命令启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯❯  current  17:38 .\frpc.exe -c .\frpc.ini</span><br><span class="line">2021/02/07 17:38:53 [I] [service.go:290] [e325feef865964cc] login to server success, get run <span class="built_in">id</span> [e325feef865964cc], server udp port [0]</span><br><span class="line">2021/02/07 17:38:53 [I] [proxy_manager.go:144] [e325feef865964cc] proxy added: [adb]</span><br><span class="line">2021/02/07 17:38:53 [I] [control.go:180] [e325feef865964cc] [adb] start proxy success</span><br></pre></td></tr></table></figure><p>如果客户端有linux环境，也可用服务端同样的方式安装配置，并添加到开机启动.</p></li><li><p>在手机上安装scrcpy软件,ios版本需要付费才能安装，启动软件,通过云服务器5555端口即访问了手机5555端口，实现了将闲置手机转为云手机的操作。</p></li></ol><h1 id="另一种方式利用ReDroid打造自己的云手机"><a href="#另一种方式利用ReDroid打造自己的云手机" class="headerlink" title="另一种方式利用ReDroid打造自己的云手机"></a>另一种方式利用ReDroid打造自己的云手机</h1><ol><li><p>首先需要一台电脑，可用wsl2，安装好ubuntu系统</p></li><li><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line"><span class="comment"># 或者从仓库下载都可</span></span><br><span class="line"><span class="comment"># sudo apt-get install -y docker.io</span></span><br><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br><span class="line"><span class="comment"># 设为开户启动</span></span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装ReDroid，根据官方文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 16.04 / 18.04 / 20.04 </span></span><br><span class="line">sudo apt-get install -y git kmod make gcc linux-headers-`<span class="built_in">uname</span> -r` </span><br><span class="line"><span class="comment"># 本环境即 linux-headers-4.15.0-159-generic</span></span><br><span class="line"><span class="comment"># 解压项目 master 分支代码到服务器任意位置</span></span><br><span class="line">sudo make <span class="comment"># build kernel modules </span></span><br><span class="line">sudo make install <span class="comment"># build and install *unsigned* kernel modules</span></span><br></pre></td></tr></table></figure></li><li><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了游戏更友好，添加了设备相关参数，scrcpy 5555端口即可实现远程访问手机</span></span><br><span class="line">docker run -itd --<span class="built_in">rm</span> --memory-swappiness=0 \</span><br><span class="line">    --privileged --pull always \</span><br><span class="line">    -v /data:/data \</span><br><span class="line">    -p 5555:5555 \</span><br><span class="line">    redroid/redroid:11.0.0-latest \</span><br><span class="line">    androidboot.hardware=mt6891 ro.secure=0 ro.boot.hwc=GLOBAL ro.ril.oem.imei=861503068361145 ro.ril.oem.imei1=861503068361145 ro.ril.oem.imei2=861503068361148 ro.ril.miui.imei0=861503068361148 ro.product.manufacturer=Xiaomi ro.build.product=chopin \</span><br><span class="line">    redroid.width=720 redroid.height=1280 \</span><br><span class="line">    redroid.gpu.mode=guest</span><br></pre></td></tr></table></figure></li><li><p>完成上面部署后，可通过前面映射端口的方式，将手机设置为云手机</p></li><li><p>如果使用的电脑为wsl2，还需要配置网络</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;两种方式创建自己的云手机，一：利用旧安卓手机，二：使用ReDroid&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>win10 多屏下修改分辨率</title>
    <link href="https://yesir.github.io/2024/04/16/win10-%E5%A4%9A%E5%B1%8F%E4%B8%8B%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <id>https://yesir.github.io/2024/04/16/win10-%E5%A4%9A%E5%B1%8F%E4%B8%8B%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/</id>
    <published>2024-04-16T11:45:34.000Z</published>
    <updated>2024-04-16T11:49:40.312Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>win32</code>api 获取屏幕数量，再根据具体选择的屏幕设置分辨率</p><span id="more"></span><blockquote><p>首先，利用<code>EnumDisplayDevicesA</code>查找显示器信息<br>然后根据设备名，调整具体要修改的分辨率屏幕</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">DISPLAY_DEVICEA DispDev;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;DispDev, <span class="built_in">sizeof</span>(DispDev));</span><br><span class="line">DispDev.cb = <span class="built_in">sizeof</span>(DispDev);</span><br><span class="line"><span class="type">char</span> DeviceName[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到所有的显示器</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; <span class="built_in">EnumDisplayDevicesA</span>(<span class="literal">NULL</span>, i, &amp;DispDev, <span class="number">0</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 注释掉的是标识用于查找主显示器</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*DispDev.StateFlags &amp; DISPLAY_DEVICE_PRIMARY_DEVICE &amp;&amp; */</span>DispDev.StateFlags &amp; DISPLAY_DEVICE_ATTACHED_TO_DESKTOP)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Display Name: &quot;</span> &lt;&lt; DispDev.DeviceName &lt;&lt; <span class="string">&quot;Display key: &quot;</span> &lt;&lt; DispDev.DeviceKey &lt;&lt; <span class="string">&quot;Display ID: &quot;</span> &lt;&lt; DispDev.DeviceID &lt;&lt; <span class="string">&quot;Display status: &quot;</span> &lt;&lt; DispDev.StateFlags;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据上面拿到的设备名来调整分辨率</span></span><br><span class="line">DEVMODEA lpDevMode;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;lpDevMode, <span class="built_in">sizeof</span>(lpDevMode));</span><br><span class="line">lpDevMode.dmSize = <span class="built_in">sizeof</span>(lpDevMode);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">EnumDisplaySettingsExA</span>(DeviceName, ENUM_CURRENT_SETTINGS, &amp;lpDevMode, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    lpDevMode.dmPelsWidth= <span class="number">1920</span>;</span><br><span class="line">    lpDevMode.dmPelsHeight= <span class="number">1080</span>;</span><br><span class="line">    <span class="comment">// 先修改到注册表</span></span><br><span class="line">    LONG result = <span class="built_in">ChangeDisplaySettingsA</span>(&amp;lpDevMode, CDS_FULLSCREEN);</span><br><span class="line">    <span class="keyword">if</span> (result == DISP_CHANGE_SUCCESSFUL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用CDS_UPDATEREGISTRY表示次修改是持久的</span></span><br><span class="line">        <span class="built_in">ChangeDisplaySettingsExA</span>(DeviceName, &amp;lpDevMode, <span class="literal">NULL</span>, CDS_UPDATEREGISTRY, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 修改失败，恢复原有设置</span></span><br><span class="line">        <span class="built_in">ChangeDisplaySettingsA</span>(<span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用&lt;code&gt;win32&lt;/code&gt;api 获取屏幕数量，再根据具体选择的屏幕设置分辨率&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++一种动态库接口的做法</title>
    <link href="https://yesir.github.io/2023/09/18/C-%E4%B8%80%E7%A7%8D%E5%8A%A8%E6%80%81%E5%BA%93%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%81%9A%E6%B3%95/"/>
    <id>https://yesir.github.io/2023/09/18/C-%E4%B8%80%E7%A7%8D%E5%8A%A8%E6%80%81%E5%BA%93%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%81%9A%E6%B3%95/</id>
    <published>2023-09-18T08:24:50.000Z</published>
    <updated>2023-09-18T08:29:08.320Z</updated>
    
    <content type="html"><![CDATA[<p>为了不破坏二进制的兼容性，通常不建议使用抽象类的方式</p><span id="more"></span><ol><li>头文件定义</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ADD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">~<span class="built_in">A</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Impl</span>;    <span class="comment">//头文件中只声明</span></span><br><span class="line">std::unique_ptr&lt;Impl&gt; impl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>实现</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>::Impl</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A::<span class="built_in">A</span>():<span class="built_in">impl</span>(<span class="keyword">new</span> Impl)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A::Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> impl-&gt;<span class="built_in">Add</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A::Impl::<span class="built_in">Add</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译成so库<code>g++ add.cpp -shared -o libadd.so</code></p><p>使用<code>g++ main.cpp -o main -L. -ladd -Wl,-rpath=.</code></p></blockquote><ul><li>使用示例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">std::cout &lt;&lt; a.<span class="built_in">Add</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了不破坏二进制的兼容性，通常不建议使用抽象类的方式&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++写日志到文件</title>
    <link href="https://yesir.github.io/2023/08/01/C-%E5%86%99%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6/"/>
    <id>https://yesir.github.io/2023/08/01/C-%E5%86%99%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6/</id>
    <published>2023-08-01T07:15:35.000Z</published>
    <updated>2023-08-23T06:17:39.853Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>fprintf</code>及可变参数来实现日志功能</p><span id="more"></span><blockquote><p>先封装一个<code>lock</code>类，用于同步写文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef __H_AEYE_LOCKER__</span></span><br><span class="line"><span class="comment">#define __H_AEYE_LOCKER__</span></span><br><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"></span><br><span class="line">class Locker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    inline <span class="function"><span class="title">Locker</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_init(&amp;mutex, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    inline ~<span class="function"><span class="title">Locker</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    inline void <span class="function"><span class="title">lock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    inline bool <span class="function"><span class="title">tryLock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> (pthread_mutex_trylock(&amp;mutex) == 0);</span><br><span class="line">    &#125;</span><br><span class="line">    inline void <span class="function"><span class="title">unlock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    pthread_mutex_t mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class RwLocker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    inline <span class="function"><span class="title">RwLocker</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_init(&amp;rwLocker, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    inline ~<span class="function"><span class="title">RwLocker</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_destroy(&amp;rwLocker);</span><br><span class="line">    &#125;</span><br><span class="line">    inline void <span class="function"><span class="title">rLock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_rdlock(&amp;rwLocker);</span><br><span class="line">    &#125;</span><br><span class="line">    inline void <span class="function"><span class="title">wLock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_wrlock(&amp;rwLocker);</span><br><span class="line">    &#125;</span><br><span class="line">    inline bool <span class="function"><span class="title">tryRLock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> (pthread_rwlock_tryrdlock(&amp;rwLocker) == 0);</span><br><span class="line">    &#125;</span><br><span class="line">    inline bool <span class="function"><span class="title">tryWLock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> (pthread_rwlock_trywrlock(&amp;rwLocker) == 0);</span><br><span class="line">    &#125;</span><br><span class="line">    inline void <span class="function"><span class="title">unlock</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwLocker);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    pthread_rwlock_t rwLocker;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br></pre></td></tr></table></figure><blockquote><p>对外接口，日志类头文件,这里使用了单实例类</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef __H_AEYE_LOG__</span></span><br><span class="line"><span class="comment">#define __H_AEYE_LOG__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include &quot;locker.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define LEVEL_FATAL 0</span></span><br><span class="line"><span class="comment">#define LEVEL_ERROR 1</span></span><br><span class="line"><span class="comment">#define LEVEL_ALARM 2</span></span><br><span class="line"><span class="comment">#define LEVEL_PROMT 3</span></span><br><span class="line"><span class="comment">#define LEVEL_TRACE 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define LOG(LEVEL, FMT, ...) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; \</span><br><span class="line">        <span class="keyword">if</span> (NULL != FMT) &#123; \</span><br><span class="line">            Logger::Log::getInstance().writeLine(LEVEL, __func__, __LINE__, FMT, <span class="comment">## __VA_ARGS__); \</span></span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; <span class="keyword">while</span>(0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#define LOGN(FMT, ...) LOG(LEVEL_NONE, FMT, ## __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define LOGE(FMT, ...) LOG(LEVEL_ERROR, FMT, ## __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define LOGA(FMT, ...) LOG(LEVEL_ALARM, FMT, ## __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define LOGP(FMT, ...) LOG(LEVEL_PROMT, FMT, ## __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define LOGT(FMT, ...) LOG(LEVEL_TRACE, FMT, ## __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define NO_CONSTRUCT_FUN_MACRO(C) \</span></span><br><span class="line">public: \</span><br><span class="line">    C(const C&amp;) = delete; \</span><br><span class="line">    C&amp; operator=(const C&amp;) = delete;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define INHERIT_SINGLETON_MACRO(C) \</span></span><br><span class="line">    friend class Singleton&lt;C&gt;; \</span><br><span class="line">    NO_CONSTRUCT_FUN_MACRO(C)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Singleton</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    static T&amp; <span class="function"><span class="title">getInstance</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        static T instance;</span><br><span class="line">        <span class="built_in">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    NO_CONSTRUCT_FUN_MACRO(Singleton);</span><br><span class="line">protected:</span><br><span class="line">    <span class="function"><span class="title">Singleton</span></span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">namespace Logger</span><br><span class="line">&#123;</span><br><span class="line">class Log : public Singleton&lt;Log&gt;</span><br><span class="line">&#123;</span><br><span class="line">    INHERIT_SINGLETON_MACRO(Log);</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    void setLevel(int level);</span><br><span class="line"></span><br><span class="line">    void writeLine(int level, const char *func_name, unsigned int line, const char *<span class="built_in">fmt</span>, ...);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    FILE *m_pLogFile;</span><br><span class="line">    int m_level;</span><br><span class="line">    Locker m_LogLocker;</span><br><span class="line">    Locker m_TimeLogLocker;</span><br><span class="line"></span><br><span class="line">    Log(const char* logName = <span class="string">&quot;./log.log&quot;</span>);</span><br><span class="line">    ~Log();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br></pre></td></tr></table></figure><blockquote><p>具体的实现，将内容输出到文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;log.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/time.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdarg.h&gt;</span></span><br><span class="line"></span><br><span class="line">namespace Logger</span><br><span class="line">&#123;</span><br><span class="line">Log::Log(const char* logName)</span><br><span class="line">&#123;</span><br><span class="line">    m_pLogFile = NULL;</span><br><span class="line">    m_level = LEVEL_PROMT;</span><br><span class="line"></span><br><span class="line"><span class="comment">#ifdef LOG_FILE</span></span><br><span class="line">    m_pLogFile = fopen(logName, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Log::~<span class="function"><span class="title">Log</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (NULL != m_pLogFile)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(m_pLogFile);</span><br><span class="line">        m_pLogFile = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static std::string tolevelstring(int level)</span><br><span class="line">&#123;</span><br><span class="line">    switch(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LEVEL_TRACE: <span class="built_in">return</span> <span class="string">&quot;DEBUG&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> LEVEL_PROMT: <span class="built_in">return</span> <span class="string">&quot;INFO&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> LEVEL_ALARM: <span class="built_in">return</span> <span class="string">&quot;WARNING&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> LEVEL_ERROR: <span class="built_in">return</span> <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> LEVEL_FATAL: <span class="built_in">return</span> <span class="string">&quot;FATAL&quot;</span>;</span><br><span class="line">        default: <span class="built_in">return</span> <span class="string">&quot;UKNOWN&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Log::writeLine(int level, const char *func_name, unsigned int line, const char *<span class="built_in">fmt</span>, ...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (level &gt; m_level)</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    va_list ap;</span><br><span class="line">    va_start(ap, <span class="built_in">fmt</span>);</span><br><span class="line">    struct timespec current_time;</span><br><span class="line">struct tm format_time;</span><br><span class="line">memset(&amp;current_time, 0, sizeof(current_time));</span><br><span class="line">clock_gettime(CLOCK_REALTIME, &amp;current_time);</span><br><span class="line">localtime_r(&amp;current_time.tv_sec, &amp;format_time);</span><br><span class="line">    <span class="keyword">if</span> (NULL != m_pLogFile)</span><br><span class="line">    &#123;</span><br><span class="line">        m_LogLocker.lock();</span><br><span class="line">        fprintf(m_pLogFile, <span class="string">&quot;[%02d-%02d-%02d %02d:%02d:%02d.%ld] [%s] [%d] &quot;</span>, format_time.tm_year+1900,</span><br><span class="line">            format_time.tm_mon+1,</span><br><span class="line">            format_time.tm_mday,</span><br><span class="line">            format_time.tm_hour,</span><br><span class="line">            format_time.tm_min,</span><br><span class="line">            format_time.tm_sec,</span><br><span class="line">            current_time.tv_nsec,</span><br><span class="line">            func_name,</span><br><span class="line">            line);</span><br><span class="line">        vfprintf(m_pLogFile, <span class="built_in">fmt</span>, ap);</span><br><span class="line">        fprintf(m_pLogFile, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        fflush(m_pLogFile);</span><br><span class="line">        m_LogLocker.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vprintf(<span class="built_in">fmt</span>, ap);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(ap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Log::setLevel(int level)</span><br><span class="line">&#123;</span><br><span class="line">    m_level = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上就是简单的日志类，当然还可以进一步实现根据日期每天创建单独的日志文件，也可以根据文件大小，写多个日志文件,编译时使用指定<code>-DLOG_FILE</code></p></blockquote><ul><li>使用方法如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;log.h&quot;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    LOG(LEVEL_ERROR, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;init begin.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>makefile</code>文件示例:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE = ./include</span><br><span class="line">SHARELIB = ./libs</span><br><span class="line">STATICLIB = ./static-lib</span><br><span class="line"></span><br><span class="line">CC:=$(compre-prefix)g++</span><br><span class="line">AR:=$(compre-prefix)ar</span><br><span class="line">STRIP:=$(compre-prefix)strip</span><br><span class="line"></span><br><span class="line">SRC = <span class="variable">$&#123;wildcard src/*.cpp&#125;</span></span><br><span class="line">OBJ = <span class="variable">$&#123;patsubst %.cpp, %.o, $(SRC)&#125;</span></span><br><span class="line"><span class="comment">#DEF = -DLOG_FILE -DLICENSE_CHECK</span></span><br><span class="line">DEF = -DLOG_FILE</span><br><span class="line"></span><br><span class="line">CPPFLAGS = -g -Wall -O3 -std=c++11 -D_GLIBCXX_USE_CXX11_ABI=0 $(DEF) -I./</span><br><span class="line"></span><br><span class="line">LDFLAGS = -L$(SHARELIB) -L$(STATICLIB)\</span><br><span class="line">          -Wl,-rpath=$(SHARELIB) -Wl,--allow-shlib-undefined</span><br><span class="line"></span><br><span class="line">CLIENT_NAME = main</span><br><span class="line"></span><br><span class="line">$(CLIENT_NAME): $(OBJ)</span><br><span class="line">$(CC) -o <span class="variable">$@</span> $^ $(LDFLAGS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#$(STRIP) $@</span></span><br><span class="line"></span><br><span class="line">$(OBJ):%.o:%.cpp</span><br><span class="line">$(CC) $(CPPFLAGS) -c $^ -o <span class="variable">$@</span> </span><br><span class="line"></span><br><span class="line">.PHONY: all clean</span><br><span class="line"></span><br><span class="line">all:$(CLIENT_NAME)</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line"><span class="built_in">rm</span> -f *.o *.a *.<span class="built_in">log</span> $(CLIENT_NAME)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用&lt;code&gt;fprintf&lt;/code&gt;及可变参数来实现日志功能&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>添加win右键菜单打开CMD</title>
    <link href="https://yesir.github.io/2023/07/21/%E6%B7%BB%E5%8A%A0win%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%89%93%E5%BC%80CMD/"/>
    <id>https://yesir.github.io/2023/07/21/%E6%B7%BB%E5%8A%A0win%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%89%93%E5%BC%80CMD/</id>
    <published>2023-07-21T07:36:52.000Z</published>
    <updated>2023-07-21T07:43:09.243Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实现在<code>windows</code>系统，打开目录点右键打开<code>CMD</code>命令窗口</p></blockquote><span id="more"></span><blockquote><p>新建文本文件,写入以下内容，另存为<code>.reg</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\OpenCmdHere]</span><br><span class="line">@=&quot;在终端中打开&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\OpenCmdHere\command]</span><br><span class="line">@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;--cd=%v.\&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\LibraryFolder\background\shell\OpenCmdHere]</span><br><span class="line">@=&quot;CmdHere&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\LibraryFolder\background\shell\OpenCmdHere\command]</span><br><span class="line">@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;--cd=%v.\&quot;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>双击运行添加到注册表,操作完成后在任意一目录点右键选择<code>在终端中打开</code>即打开了<code>CMD</code>窗口</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;实现在&lt;code&gt;windows&lt;/code&gt;系统，打开目录点右键打开&lt;code&gt;CMD&lt;/code&gt;命令窗口&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>通过fcitx-dbus接口将文字写到输入框</title>
    <link href="https://yesir.github.io/2023/07/20/%E9%80%9A%E8%BF%87fcitx-dbus%E6%8E%A5%E5%8F%A3%E5%B0%86%E6%96%87%E5%AD%97%E5%86%99%E5%88%B0%E8%BE%93%E5%85%A5%E6%A1%86/"/>
    <id>https://yesir.github.io/2023/07/20/%E9%80%9A%E8%BF%87fcitx-dbus%E6%8E%A5%E5%8F%A3%E5%B0%86%E6%96%87%E5%AD%97%E5%86%99%E5%88%B0%E8%BE%93%E5%85%A5%E6%A1%86/</id>
    <published>2023-07-20T06:19:04.000Z</published>
    <updated>2023-07-20T06:25:10.449Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>DBus</code>库与<code>DBus</code>系统通信，并使用<code>fcitx</code>的<code>DBus接口</code>发送相应的消息,从而实现将文字写到输入框</p><span id="more"></span><blockquote><p>以下是简单的代码示例:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;dbus/dbus.h&gt;</span></span><br><span class="line"></span><br><span class="line">void send_chinese_input(const char* input_text) &#123;</span><br><span class="line">    DBusConnection* connection;</span><br><span class="line">    DBusError error;</span><br><span class="line">    dbus_error_init(&amp;error);</span><br><span class="line"></span><br><span class="line">    // 建立与DBus系统的连接</span><br><span class="line">    connection = dbus_bus_get(DBUS_BUS_SESSION, &amp;error);</span><br><span class="line">    <span class="keyword">if</span> (dbus_error_is_set(&amp;error)) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">&quot;Unable to connect to the D-Bus session bus: %s\n&quot;</span>, error.message);</span><br><span class="line">        dbus_error_free(&amp;error);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建一个DBus消息</span><br><span class="line">    DBusMessage* message;</span><br><span class="line">    message = dbus_message_new_method_call(</span><br><span class="line">        <span class="string">&quot;org.fcitx.Fcitx&quot;</span>,                           // 接口所在的DBus名称</span><br><span class="line">        <span class="string">&quot;/inputmethod&quot;</span>,                              // 接口对象的路径</span><br><span class="line">        <span class="string">&quot;org.fcitx.Fcitx.InputMethod1&quot;</span>,               // 接口名称</span><br><span class="line">        <span class="string">&quot;ProcessKeyEvent&quot;</span>                            // 方法名称</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">// 如果只发送按键，添加方法参数（按键值和状态）</span><br><span class="line">    //dbus_uint32_t keyval = 65;  // 示例按键值为<span class="string">&#x27;A&#x27;</span></span><br><span class="line">    //dbus_uint32_t keycode = 38; // 示例按键码为<span class="string">&#x27;KEY_A&#x27;</span>（可以根据需要更改）</span><br><span class="line">    //dbus_uint32_t state = 0;    // 示例状态为0（可以根据需要更改）</span><br><span class="line"></span><br><span class="line">    // 添加方法参数（中文输入文本）</span><br><span class="line">    dbus_uint32_t keyval = 0;  </span><br><span class="line">    dbus_uint32_t keycode = 0;</span><br><span class="line">    dbus_uint32_t state = 0;</span><br><span class="line">    const char* utf8_text = input_text;</span><br><span class="line"></span><br><span class="line">    dbus_message_append_args(</span><br><span class="line">        message,</span><br><span class="line">        DBUS_TYPE_UINT32, &amp;keyval,</span><br><span class="line">        DBUS_TYPE_UINT32, &amp;keycode,</span><br><span class="line">        DBUS_TYPE_UINT32, &amp;state,</span><br><span class="line">        DBUS_TYPE_STRING, &amp;utf8_text,</span><br><span class="line">        DBUS_TYPE_INVALID</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // 发送DBus消息，并等待响应</span><br><span class="line">    DBusPendingCall* pending;</span><br><span class="line">    dbus_connection_send_with_reply(connection, message, &amp;pending, -1);</span><br><span class="line">    dbus_connection_flush(connection);</span><br><span class="line"></span><br><span class="line">    // 等待DBus响应</span><br><span class="line">    dbus_pending_call_block(pending);</span><br><span class="line"></span><br><span class="line">    // 获取DBus响应</span><br><span class="line">    DBusMessage* reply = dbus_pending_call_steal_reply(pending);</span><br><span class="line">    <span class="keyword">if</span> (reply) &#123;</span><br><span class="line">        dbus_message_unref(reply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 释放资源</span><br><span class="line">    dbus_message_unref(message);</span><br><span class="line">    dbus_pending_call_unref(pending);</span><br><span class="line">    dbus_connection_unref(connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    // 要输入的中文文本</span><br><span class="line">    const char* chinese_text = <span class="string">&quot;你好，世界！&quot;</span>;</span><br><span class="line"></span><br><span class="line">    // 发送中文输入</span><br><span class="line">    send_chinese_input(chinese_text);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译方法:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o fcitx_test fcitx_test.c `pkg-config --libs --cflags dbus-1`</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;DBus&lt;/code&gt;库与&lt;code&gt;DBus&lt;/code&gt;系统通信，并使用&lt;code&gt;fcitx&lt;/code&gt;的&lt;code&gt;DBus接口&lt;/code&gt;发送相应的消息,从而实现将文字写到输入框&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Win32利用计划任务开机启动UI程序</title>
    <link href="https://yesir.github.io/2023/07/06/Win32%E5%88%A9%E7%94%A8%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8UI%E7%A8%8B%E5%BA%8F/"/>
    <id>https://yesir.github.io/2023/07/06/Win32%E5%88%A9%E7%94%A8%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8UI%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-07-06T02:21:45.000Z</published>
    <updated>2023-07-06T02:28:19.782Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下，都是利用win服务创建开机启动程序，但是如果启动的是UI程序，此时用服务程序创建容易出现进程启动了，但是UI显示不了的问题<br>因此，下面使用一种利用计划的方式来实现开机启动</p><span id="more"></span><blockquote><p><code>MyTaskSchedule.h</code></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef MYTASKSCHEDULE_H_</span></span><br><span class="line"><span class="comment">#define MYTASKSCHEDULE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;taskschd.h&gt;</span></span><br><span class="line"></span><br><span class="line">class CMyTaskSchedule</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">CMyTaskSchedule(void);</span><br><span class="line">virtual ~CMyTaskSchedule(void);</span><br><span class="line">BOOL Delete(char *lpszTaskName);</span><br><span class="line">BOOL DeleteFolder(char *lpszFolderName);</span><br><span class="line">BOOL NewTask(char *lpszTaskName, char *lpszProgramPath, char *lpszParameters, char *lpszAuthor);</span><br><span class="line">BOOL IsExist(char *lpszTaskName);</span><br><span class="line">BOOL IsTaskValid(char *lpszTaskName);</span><br><span class="line">BOOL Run(char *lpszTaskName, char *lpszParam);</span><br><span class="line">BOOL IsEnable(char *lpszTaskName);</span><br><span class="line">BOOL SetEnable(char *lpszTaskName, BOOL bEnable);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">ITaskService* m_lpITS;</span><br><span class="line">ITaskFolder* m_lpRootFolder;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br></pre></td></tr></table></figure><blockquote><p><code>MyTaskSchedule.cpp</code></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;MyTaskSchedule.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;atlbase.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;comdef.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;comutil.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;OAIDL.H&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pragma comment(lib, &quot;taskschd.lib&quot;)  </span></span><br><span class="line"><span class="comment"># pragma comment(lib, &quot;comsupp.lib&quot;) </span></span><br><span class="line"></span><br><span class="line">void ShowError(char *lpszText, DWORD dwErrCode)</span><br><span class="line">&#123;</span><br><span class="line">char szErr[MAX_PATH] = &#123;0&#125;;</span><br><span class="line">::wsprintf(szErr, <span class="string">&quot;%s Error!\nError Code Is:0x%08x\n&quot;</span>, lpszText, dwErrCode);</span><br><span class="line">::MessageBox(NULL, szErr, <span class="string">&quot;ERROR&quot;</span>, MB_OK | MB_ICONERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMyTaskSchedule::CMyTaskSchedule(void)</span><br><span class="line">&#123;</span><br><span class="line">m_lpITS = NULL;</span><br><span class="line">m_lpRootFolder = NULL;</span><br><span class="line">// 初始化COM</span><br><span class="line">HRESULT hr = ::CoInitialize(NULL);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;CoInitialize&quot;</span>, hr);</span><br><span class="line">&#125;</span><br><span class="line">// 创建一个任务服务（Task Service）实例</span><br><span class="line">hr = ::CoCreateInstance(CLSID_TaskScheduler,</span><br><span class="line">NULL,</span><br><span class="line">CLSCTX_INPROC_SERVER,</span><br><span class="line">IID_ITaskService,</span><br><span class="line">(LPVOID *)(&amp;m_lpITS));</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;CoCreateInstance&quot;</span>, hr);</span><br><span class="line">&#125;</span><br><span class="line">// 连接到任务服务（Task Service）</span><br><span class="line">hr = m_lpITS-&gt;Connect(_variant_t(), _variant_t(), _variant_t(), _variant_t());</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;ITaskService::Connect&quot;</span>, hr);</span><br><span class="line">&#125;</span><br><span class="line">// 获取Root Task Folder的指针，这个指针指向的是新注册的任务</span><br><span class="line">hr = m_lpITS-&gt;GetFolder(_bstr_t(<span class="string">&quot;\\&quot;</span>), &amp;m_lpRootFolder);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;ITaskService::GetFolder&quot;</span>, hr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMyTaskSchedule::~CMyTaskSchedule(void)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m_lpITS)</span><br><span class="line">&#123;</span><br><span class="line">m_lpITS-&gt;Release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line">m_lpRootFolder-&gt;Release();</span><br><span class="line">&#125;</span><br><span class="line">// 卸载COM</span><br><span class="line">::CoUninitialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::Delete(char *lpszTaskName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;</span><br><span class="line">HRESULT hr = m_lpRootFolder-&gt;DeleteTask(variantTaskName.bstrVal, 0);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::DeleteFolder(char *lpszFolderName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">CComVariant variantFolderName(NULL);</span><br><span class="line">variantFolderName = lpszFolderName;</span><br><span class="line">HRESULT hr = m_lpRootFolder-&gt;DeleteFolder(variantFolderName.bstrVal, 0);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::NewTask(char *lpszTaskName, char *lpszProgramPath, char *lpszParameters, char *lpszAuthor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 如果存在相同的计划任务，则删除</span><br><span class="line">Delete(lpszTaskName);</span><br><span class="line">// 创建任务定义对象来创建任务</span><br><span class="line">ITaskDefinition *pTaskDefinition = NULL;</span><br><span class="line">HRESULT hr = m_lpITS-&gt;NewTask(0, &amp;pTaskDefinition);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;ITaskService::NewTask&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 设置注册信息 */</span><br><span class="line">IRegistrationInfo *pRegInfo = NULL;</span><br><span class="line">CComVariant variantAuthor(NULL);</span><br><span class="line">variantAuthor = lpszAuthor;</span><br><span class="line">hr = pTaskDefinition-&gt;get_RegistrationInfo(&amp;pRegInfo);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;pTaskDefinition::get_RegistrationInfo&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 设置作者信息</span><br><span class="line">hr = pRegInfo-&gt;put_Author(variantAuthor.bstrVal);</span><br><span class="line">pRegInfo-&gt;Release();</span><br><span class="line"></span><br><span class="line">/* 设置登录类型和运行权限 */</span><br><span class="line">IPrincipal *pPrincipal = NULL;</span><br><span class="line">hr = pTaskDefinition-&gt;get_Principal(&amp;pPrincipal);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;pTaskDefinition::get_Principal&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 设置登录类型</span><br><span class="line">hr = pPrincipal-&gt;put_LogonType(TASK_LOGON_INTERACTIVE_TOKEN);</span><br><span class="line">// 设置运行权限</span><br><span class="line">// 最高权限</span><br><span class="line">hr = pPrincipal-&gt;put_RunLevel(TASK_RUNLEVEL_HIGHEST);  </span><br><span class="line">pPrincipal-&gt;Release();</span><br><span class="line"></span><br><span class="line">/* 设置其他信息 */</span><br><span class="line">ITaskSettings *pSettting = NULL;</span><br><span class="line">hr = pTaskDefinition-&gt;get_Settings(&amp;pSettting);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;pTaskDefinition::get_Settings&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 设置其他信息</span><br><span class="line">hr = pSettting-&gt;put_StopIfGoingOnBatteries(VARIANT_FALSE);</span><br><span class="line">hr = pSettting-&gt;put_DisallowStartIfOnBatteries(VARIANT_FALSE);</span><br><span class="line">hr = pSettting-&gt;put_AllowDemandStart(VARIANT_TRUE);</span><br><span class="line">hr = pSettting-&gt;put_StartWhenAvailable(VARIANT_FALSE);</span><br><span class="line">hr = pSettting-&gt;put_MultipleInstances(TASK_INSTANCES_PARALLEL);</span><br><span class="line">pSettting-&gt;Release();</span><br><span class="line"></span><br><span class="line">/* 创建执行动作 */</span><br><span class="line">IActionCollection *pActionCollect = NULL;</span><br><span class="line">hr = pTaskDefinition-&gt;get_Actions(&amp;pActionCollect);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;pTaskDefinition::get_Actions&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">IAction *pAction = NULL;</span><br><span class="line">// 创建执行操作</span><br><span class="line">hr = pActionCollect-&gt;Create(TASK_ACTION_EXEC, &amp;pAction);</span><br><span class="line">pActionCollect-&gt;Release();</span><br><span class="line"></span><br><span class="line">/* 设置执行程序路径和参数 */</span><br><span class="line">CComVariant variantProgramPath(NULL);</span><br><span class="line">CComVariant variantParameters(NULL);</span><br><span class="line">IExecAction *pExecAction = NULL;</span><br><span class="line">hr = pAction-&gt;QueryInterface(IID_IExecAction, (PVOID *)(&amp;pExecAction));</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">pAction-&gt;Release();</span><br><span class="line">ShowError(<span class="string">&quot;IAction::QueryInterface&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pAction-&gt;Release();</span><br><span class="line">// 设置程序路径和参数</span><br><span class="line">variantProgramPath = lpszProgramPath;</span><br><span class="line">variantParameters = lpszParameters;</span><br><span class="line">pExecAction-&gt;put_Path(variantProgramPath.bstrVal);</span><br><span class="line">pExecAction-&gt;put_Arguments(variantParameters.bstrVal);</span><br><span class="line">pExecAction-&gt;Release();</span><br><span class="line"></span><br><span class="line">/* 创建触发器，实现用户登陆自启动 */</span><br><span class="line">ITriggerCollection *pTriggers = NULL;</span><br><span class="line">hr = pTaskDefinition-&gt;get_Triggers(&amp;pTriggers);</span><br><span class="line"><span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;pTaskDefinition::get_Triggers&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 创建触发器</span><br><span class="line">ITrigger *pTrigger = NULL;</span><br><span class="line">hr = pTriggers-&gt;Create(TASK_TRIGGER_LOGON, &amp;pTrigger);</span><br><span class="line"><span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">ShowError(<span class="string">&quot;ITriggerCollection::Create&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 注册任务计划  */</span><br><span class="line">IRegisteredTask *pRegisteredTask = NULL;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;</span><br><span class="line">hr = m_lpRootFolder-&gt;RegisterTaskDefinition(variantTaskName.bstrVal,</span><br><span class="line">pTaskDefinition,</span><br><span class="line">TASK_CREATE_OR_UPDATE,</span><br><span class="line">_variant_t(),</span><br><span class="line">_variant_t(),</span><br><span class="line">TASK_LOGON_INTERACTIVE_TOKEN,</span><br><span class="line">_variant_t(<span class="string">&quot;&quot;</span>),</span><br><span class="line">&amp;pRegisteredTask);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">pTaskDefinition-&gt;Release();</span><br><span class="line">ShowError(<span class="string">&quot;ITaskFolder::RegisterTaskDefinition&quot;</span>, hr);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pTaskDefinition-&gt;Release();</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::IsExist(char *lpszTaskName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HRESULT hr = S_OK;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">CComVariant variantEnable(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;                     // 任务计划名称</span><br><span class="line">IRegisteredTask *pRegisteredTask = NULL;</span><br><span class="line">// 获取任务计划</span><br><span class="line">hr = m_lpRootFolder-&gt;GetTask(variantTaskName.bstrVal, &amp;pRegisteredTask);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr) || (NULL == pRegisteredTask))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::IsTaskValid(char *lpszTaskName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HRESULT hr = S_OK;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">CComVariant variantEnable(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;                     // 任务计划名称</span><br><span class="line">IRegisteredTask *pRegisteredTask = NULL;</span><br><span class="line">// 获取任务计划</span><br><span class="line">hr = m_lpRootFolder-&gt;GetTask(variantTaskName.bstrVal, &amp;pRegisteredTask);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr) || (NULL == pRegisteredTask))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 获取任务状态</span><br><span class="line">TASK_STATE taskState;</span><br><span class="line">hr = pRegisteredTask-&gt;get_State(&amp;taskState);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line">// 无效</span><br><span class="line"><span class="keyword">if</span>(TASK_STATE_DISABLED == taskState)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::Run(char *lpszTaskName, char *lpszParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HRESULT hr = S_OK;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">CComVariant variantParameters(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;</span><br><span class="line">variantParameters = lpszParam;</span><br><span class="line"></span><br><span class="line">// 获取任务计划</span><br><span class="line">IRegisteredTask *pRegisteredTask = NULL;</span><br><span class="line">hr = m_lpRootFolder-&gt;GetTask(variantTaskName.bstrVal, &amp;pRegisteredTask);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr) || (NULL == pRegisteredTask))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 运行</span><br><span class="line">hr = pRegisteredTask-&gt;Run(variantParameters, NULL);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr))</span><br><span class="line">&#123;</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::IsEnable(char *lpszTaskName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HRESULT hr = S_OK;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">CComVariant variantEnable(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;                     // 任务计划名称</span><br><span class="line">IRegisteredTask *pRegisteredTask = NULL;</span><br><span class="line">// 获取任务计划</span><br><span class="line">hr = m_lpRootFolder-&gt;GetTask(variantTaskName.bstrVal, &amp;pRegisteredTask);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr) || (NULL == pRegisteredTask))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 获取是否已经启动</span><br><span class="line">pRegisteredTask-&gt;get_Enabled(&amp;variantEnable.boolVal);</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"><span class="keyword">if</span>(ATL_VARIANT_FALSE == variantEnable.boolVal)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL CMyTaskSchedule::SetEnable(char *lpszTaskName, BOOL bEnable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(NULL == m_lpRootFolder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HRESULT hr = S_OK;</span><br><span class="line">CComVariant variantTaskName(NULL);</span><br><span class="line">CComVariant variantEnable(NULL);</span><br><span class="line">variantTaskName = lpszTaskName;                     // 任务计划名称</span><br><span class="line">variantEnable = bEnable;                            // 是否启动</span><br><span class="line">IRegisteredTask *pRegisteredTask = NULL;</span><br><span class="line">// 获取任务计划</span><br><span class="line">hr = m_lpRootFolder-&gt;GetTask(variantTaskName.bstrVal, &amp;pRegisteredTask);</span><br><span class="line"><span class="keyword">if</span>(FAILED(hr) || (NULL == pRegisteredTask))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">// 设置是否启动</span><br><span class="line">pRegisteredTask-&gt;put_Enabled(variantEnable.boolVal);</span><br><span class="line">pRegisteredTask-&gt;Release();</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;MyTaskSchedule.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">CMyTaskSchedule task;</span><br><span class="line">BOOL bRet = FALSE;</span><br><span class="line"></span><br><span class="line">// 创建 任务计划</span><br><span class="line">bRet = task.NewTask(<span class="string">&quot;程序名&quot;</span>, <span class="string">&quot;程序路径&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create Task Schedule Error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 暂停</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create Task Schedule OK!\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">// 卸载 任务计划</span><br><span class="line">bRet = task.Delete(<span class="string">&quot;程序名&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete Task Schedule Error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete Task Schedule OK!\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通常情况下，都是利用win服务创建开机启动程序，但是如果启动的是UI程序，此时用服务程序创建容易出现进程启动了，但是UI显示不了的问题&lt;br&gt;因此，下面使用一种利用计划的方式来实现开机启动&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>利用crontab开机执行脚本</title>
    <link href="https://yesir.github.io/2023/07/03/%E5%88%A9%E7%94%A8crontab%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>https://yesir.github.io/2023/07/03/%E5%88%A9%E7%94%A8crontab%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</id>
    <published>2023-07-03T09:30:42.000Z</published>
    <updated>2023-07-04T07:57:44.954Z</updated>
    
    <content type="html"><![CDATA[<p>解决在定制的<code>aarch64 uos</code>系统中，开机启动手写输入法时添加到<code>/etc/xdg/autostart</code>或<code>/home/user/.config/autostart</code>目录都启动不了的问题</p><span id="more"></span><p><code>crontab</code>定时任务分为脚本任务和系统自带命令<br>如果有这样一个脚本任务，仅仅需要开机后运行一次，那么，<code>crontab</code>结合<code>@reboot</code>是一个不错的选择。<br>如果是系统自带命令任务，<code>@reboot</code>不一定会执行，由于系统开机初始化，很有可能系统自带命令运行环境并不满足，但<code>crontab</code>已经开始执行<code>@reboot</code>，从而造成命令运行失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="comment">#进入编辑，输入如下行</span></span><br><span class="line">@reboot /home/test.sh <span class="comment">#开机马上启动这个脚本，如果脚本中有依赖系统中其他服务，会发生因为其他服务启动不完全，而导致自己脚本失败的情况</span></span><br><span class="line">@reboot <span class="built_in">sleep</span> 60; /home/test.sh <span class="comment">#最好加上休眠一会，等待其他服务启动完全了，再启动自己的脚本</span></span><br><span class="line">@reboot (<span class="built_in">sleep</span> 60; sh /home/test.sh) <span class="comment">#设置脚本在启动后的60s启动、/home\test.sh 就是脚本的存放地址</span></span><br></pre></td></tr></table></figure><blockquote><p><code>shell</code>命令添加<code>crontab</code>任务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">利用crontab -l 加 crontab file 两个命令实现自动添加</span><br><span class="line"></span><br><span class="line">crontab -l &gt; conf &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;* * * * * hostname &gt;&gt; /tmp/tmp.txt&quot;</span> &gt;&gt; conf &amp;&amp; crontab conf &amp;&amp; <span class="built_in">rm</span> -f conf</span><br><span class="line">由于crontab file会覆盖原有定时任务，所以使用 crontab -l 先导出原有任务到临时文件 “conf” 再追加新定时任务</span><br><span class="line"></span><br><span class="line">优点：不限用户，任何有crontab权限的用户都能执行</span><br><span class="line"></span><br><span class="line">缺点：稍微复杂</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;解决在定制的&lt;code&gt;aarch64 uos&lt;/code&gt;系统中，开机启动手写输入法时添加到&lt;code&gt;/etc/xdg/autostart&lt;/code&gt;或&lt;code&gt;/home/user/.config/autostart&lt;/code&gt;目录都启动不了的问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python强制结束线程</title>
    <link href="https://yesir.github.io/2023/06/27/Python%E5%BC%BA%E5%88%B6%E7%BB%93%E6%9D%9F%E7%BA%BF%E7%A8%8B/"/>
    <id>https://yesir.github.io/2023/06/27/Python%E5%BC%BA%E5%88%B6%E7%BB%93%E6%9D%9F%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-06-27T02:23:46.000Z</published>
    <updated>2023-06-27T02:30:53.906Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>ctypes</code>强行杀掉线程</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">import inspect</span><br><span class="line">import ctypes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def _async_raise(tid, exctype):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;raises the exception, performs cleanup if needed&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    tid = ctypes.c_long(tid)</span><br><span class="line">    <span class="keyword">if</span> not inspect.isclass(exctype):</span><br><span class="line">        exctype = <span class="built_in">type</span>(exctype)</span><br><span class="line">    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(exctype))</span><br><span class="line">    <span class="keyword">if</span> res == 0:</span><br><span class="line">        raise ValueError(<span class="string">&quot;invalid thread id&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> res != 1:</span><br><span class="line">        <span class="comment"># &quot;&quot;&quot;if it returns a number greater than one, you&#x27;re in trouble,</span></span><br><span class="line">        <span class="comment"># and you should call it again with exc=NULL to revert the effect&quot;&quot;&quot;</span></span><br><span class="line">        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)</span><br><span class="line">        raise SystemError(<span class="string">&quot;PyThreadState_SetAsyncExc failed&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def stop_thread(thread):</span><br><span class="line">    _async_raise(thread.ident, SystemExit)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def thread_run(data):</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t = threading.Thread(target=thread_run,args=(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">    t.start()</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    stop_thread(t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stoped&quot;</span>)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    t1 = threading.Thread(target=thread_run,args=(<span class="string">&quot;2&quot;</span>))</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    stop_thread(t1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stoped&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用&lt;code&gt;ctypes&lt;/code&gt;强行杀掉线程&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Win32 Dll中加载图片资源</title>
    <link href="https://yesir.github.io/2023/05/31/Win32-Dll%E4%B8%AD%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90/"/>
    <id>https://yesir.github.io/2023/05/31/Win32-Dll%E4%B8%AD%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90/</id>
    <published>2023-05-31T08:07:20.000Z</published>
    <updated>2023-05-31T08:38:18.020Z</updated>
    
    <content type="html"><![CDATA[<p>项目上有需求，要求在提供给第三方的SDK中，将bmp图像一起打包到dll文件中</p><span id="more"></span><blockquote><p>首先按照普通工程的方式，将bmp以资源的方式加载到项目中</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@brief将资源中的图片转换成byte</span></span><br><span class="line"><span class="comment">*@param:</span></span><br><span class="line"><span class="comment">*参数说明如下表</span></span><br><span class="line"><span class="comment">*name|type|param direction|description of param</span></span><br><span class="line"><span class="comment">*----------------|---------------|-----------------------|------------------------</span></span><br><span class="line"><span class="comment">*bmpId    |int |[in]|加载到项目中的bmp资源ID</span></span><br><span class="line"><span class="comment">*dwSize    |int&amp;|[out]|返回bmp图像数据大小</span></span><br><span class="line"><span class="comment">*@return</span></span><br><span class="line"><span class="comment">*返回bmp图片数据,不包含bmp头信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title">ConvertBmpToByteArray</span><span class="params">(<span class="type">int</span> bmpId, <span class="type">int</span>&amp; dwSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HINSTANCE hInstance = <span class="built_in">GetModuleHandle</span>(<span class="string">&quot;Test.DLL&quot;</span>); <span class="comment">// 获取当前模块句柄,假设dll导出文件名为Test.dll</span></span><br><span class="line"><span class="comment">//如果在GetModuleHandle传的是NULL，在第三方调用时会查找不到资源</span></span><br><span class="line"><span class="keyword">if</span> (hInstance == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s GetModuleHandle GetLastError: %d\n&quot;</span>, __FUNCTION__, n);</span><br><span class="line">&#125;</span><br><span class="line">HRSRC hRes = <span class="built_in">FindResource</span>(hInstance, <span class="built_in">MAKEINTRESOURCE</span>(bmpId), RT_BITMAP); <span class="comment">// 获取资源句柄</span></span><br><span class="line"><span class="keyword">if</span> (hRes == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s FindResource GetLastError: %d\n&quot;</span>, __FUNCTION__, n);</span><br><span class="line">&#125;</span><br><span class="line">HGLOBAL hMem = <span class="built_in">LoadResource</span>(hInstance, hRes); <span class="comment">// 获取内存句柄</span></span><br><span class="line">LPVOID lpData = <span class="built_in">LockResource</span>(hMem); <span class="comment">// 加载资源数据</span></span><br><span class="line">LPBITMAPINFOHEADER lpBitmapInfoHeader = (LPBITMAPINFOHEADER)lpData; <span class="comment">// 获取位图信息头指针</span></span><br><span class="line">DWORD dwHeight = lpBitmapInfoHeader-&gt;biHeight; <span class="comment">// 获取位图高度</span></span><br><span class="line">DWORD dwWidth = lpBitmapInfoHeader-&gt;biWidth; <span class="comment">// 获取位图宽度</span></span><br><span class="line">DWORD dwColorCount = lpBitmapInfoHeader-&gt;biBitCount &gt;&gt; <span class="number">3</span>; <span class="comment">// 获取位图颜色数</span></span><br><span class="line"><span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s dwColorCount: %d\n&quot;</span>, __FUNCTION__, dwColorCount);</span><br><span class="line">dwSize = dwHeight * dwWidth * dwColorCount; <span class="comment">// 计算位图数据大小</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[dwSize]; <span class="comment">// 分配缓存空间</span></span><br><span class="line"><span class="built_in">memcpy</span>(pData, (<span class="type">unsigned</span> <span class="type">char</span>*)lpData + lpBitmapInfoHeader-&gt;biSize + lpBitmapInfoHeader-&gt;biClrUsed * <span class="built_in">sizeof</span>(RGBQUAD), dwSize); <span class="comment">// 拷贝位图数据</span></span><br><span class="line"><span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s SizeofResource: %d\n&quot;</span>, __FUNCTION__, dwSize);</span><br><span class="line"><span class="built_in">FreeResource</span>(hMem); <span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">return</span> pData;<span class="comment">//返回缓存指针,注意释放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目上有需求，要求在提供给第三方的SDK中，将bmp图像一起打包到dll文件中&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>单实例进程的几种实现方式</title>
    <link href="https://yesir.github.io/2023/05/06/%E5%8D%95%E5%AE%9E%E4%BE%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>https://yesir.github.io/2023/05/06/%E5%8D%95%E5%AE%9E%E4%BE%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</id>
    <published>2023-05-06T01:29:04.000Z</published>
    <updated>2023-05-06T01:37:13.221Z</updated>
    
    <content type="html"><![CDATA[<p>让进程只运行一个实例,防止多次运行导致的问题</p><span id="more"></span><blockquote><p><code>linux</code>利用文件锁实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">lockfile</span><span class="params">(<span class="type">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">flock</span> fl;</span><br><span class="line"></span><br><span class="line">    fl.l_type   = F_WRLCK;</span><br><span class="line">    fl.l_start  = <span class="number">0</span>;</span><br><span class="line">    fl.l_whence = SEEK_SET;</span><br><span class="line">    fl.l_len    = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">fcntl</span>(fd, F_SETLK, &amp;fl));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">proc_is_exist</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *procname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>  fd;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">16</span>];</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/tmp/%s.pid&quot;</span>, procname);</span><br><span class="line"></span><br><span class="line">    fd = <span class="built_in">open</span>(filename, O_RDWR | O_CREAT, (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH));</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open file \&quot;%s\&quot; failed!!!\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">lockfile</span>(fd) == <span class="number">-1</span>) &#123;                                                  <span class="comment">/* 尝试对文件进行加锁 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file \&quot;%s\&quot; locked. proc already exit!!!\n&quot;</span>, filename);</span><br><span class="line">        <span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">ftruncate</span>(fd, <span class="number">0</span>);                                                      <span class="comment">/* 写入运行实例的pid */</span></span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%ld&quot;</span>, (<span class="type">long</span>)<span class="built_in">getpid</span>());</span><br><span class="line">        <span class="built_in">write</span>(fd, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>windows</code>利用内核对象实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hMutex = ::<span class="built_in">CreateMutexA</span>(<span class="literal">NULL</span>, FALSE, <span class="string">&quot;Protected_Mutex_11&quot;</span>);</span><br><span class="line">DWORD dwError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="keyword">if</span> (ERROR_ALREADY_EXISTS == dwError || ERROR_ACCESS_DENIED == dwError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 已经有实例了，退出。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Qt</code>复用共享内存实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.h QSharedMemory *m_sharedMemory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isInstanceExisted</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_sharedMemory = <span class="keyword">new</span> <span class="built_in">QSharedMemory</span>(<span class="string">&quot;protected-client.lock&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(m_sharedMemory-&gt;<span class="built_in">create</span>(<span class="number">100</span>) == <span class="literal">false</span>) &#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;让进程只运行一个实例,防止多次运行导致的问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>用C++获取bmp图像的宽高</title>
    <link href="https://yesir.github.io/2023/04/25/%E7%94%A8C-%E8%8E%B7%E5%8F%96bmp%E5%9B%BE%E5%83%8F%E7%9A%84%E5%AE%BD%E9%AB%98/"/>
    <id>https://yesir.github.io/2023/04/25/%E7%94%A8C-%E8%8E%B7%E5%8F%96bmp%E5%9B%BE%E5%83%8F%E7%9A%84%E5%AE%BD%E9%AB%98/</id>
    <published>2023-04-25T00:55:24.000Z</published>
    <updated>2023-04-25T01:09:20.418Z</updated>
    
    <content type="html"><![CDATA[<p>BMP（Bitmap）是一种位图文件格式，它以二进制方式存储图像数据，即每个像素的颜色信息都被直接编码为一个二进制值。</p><span id="more"></span><blockquote><p>BMP格式的文件由两部分组成：<br>    - 文件头和图像数据。文件头包含了文件类型、文件大小、图像宽度、图像高度等基本信息；<br>    - 图像数据则是按行存储的，每一行的字节数通常等于“宽度×像素位数/8”，其中像素位数指的是每个像素使用的位数<br>      例如24位颜色模式下，每个像素使用3个字节。<br>      在32位BMP图像中，每个像素通常使用4个字节（红色、绿色、蓝色和alpha通道），因此每一行的字节数也会相应增加</p></blockquote><blockquote><p>BMP格式文件头（Bitmap File Header）占据14个字节，其中包含了BMP文件的一些基本信息，如文件类型、文件大小以及图像数据的偏移量等。<br>  文件头结构定义如下：</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct BITMAPFILEHEADER &#123;</span><br><span class="line"> uint16_t bfType;       // 文件类型，必须为 <span class="string">&quot;BM&quot;</span> 两个字母</span><br><span class="line"> uint32_t bfSize;       // 文件大小，单位为字节</span><br><span class="line"> uint16_t bfReserved1;  // 保留，必须设置为0</span><br><span class="line"> uint16_t bfReserved2;  // 保留，必须设置为0</span><br><span class="line"> uint32_t bfOffBits;    // 图像数据相对于文件头的偏移量，单位为字节</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">uint16_t 表示16位无符号整数，占据2个字节；uint32_t 表示32位无符号整数，占据4个字节。因此，BMP格式文件头总共占据14个字节的空间。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>下面是使用C++的标准库来获取bmp图像的宽和高</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(<span class="string">&quot;001.bmp&quot;</span>, ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取 bmp 文件头信息</span></span><br><span class="line">    <span class="type">char</span> header[<span class="number">54</span>];</span><br><span class="line">    file.<span class="built_in">read</span>(header, <span class="number">54</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取宽度和高度</span></span><br><span class="line">    <span class="type">int</span> width = *(<span class="type">int</span>*)&amp;header[<span class="number">18</span>];</span><br><span class="line">    <span class="type">int</span> height = *(<span class="type">int</span>*)&amp;header[<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line">       <span class="comment">//也可以使用位运算的方式获取，这样可以避免对内存进行类型转换</span></span><br><span class="line">       <span class="comment">//但是在实际存储过程中由于大小端的不同,存储方式可能是倒序的（高字节存储在后面）。</span></span><br><span class="line">       <span class="comment">//因此，在进行位运算时，需要按照实际存储方式进行相应的调整</span></span><br><span class="line">       <span class="comment">//int width = (header[21] &lt;&lt; 24) | (header[20] &lt;&lt; 16) | (header[19] &lt;&lt; 8) | header[18];</span></span><br><span class="line">       <span class="comment">//int height = (header[25] &lt;&lt; 24) | (header[24] &lt;&lt; 16) | (header[23] &lt;&lt; 8) | header[22];</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Width: &quot;</span> &lt;&lt; width &lt;&lt; <span class="string">&quot; pixels&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Height: &quot;</span> &lt;&lt; height &lt;&lt; <span class="string">&quot; pixels&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;BMP（Bitmap）是一种位图文件格式，它以二进制方式存储图像数据，即每个像素的颜色信息都被直接编码为一个二进制值。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>用C++实现类似Windows的消息循环</title>
    <link href="https://yesir.github.io/2023/04/18/%E7%94%A8C-%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BCWindows%E7%9A%84%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF/"/>
    <id>https://yesir.github.io/2023/04/18/%E7%94%A8C-%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BCWindows%E7%9A%84%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF/</id>
    <published>2023-04-18T03:14:42.000Z</published>
    <updated>2023-04-18T03:36:28.724Z</updated>
    
    <content type="html"><![CDATA[<p>实现类似于Windows消息循环的队列</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MessageType</span> &#123; kQuitMessage, kCustomMessage &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">  <span class="built_in">Message</span>(MessageType t, <span class="type">void</span>* d = <span class="literal">nullptr</span>) : <span class="built_in">type</span>(t), <span class="built_in">data</span>(d) &#123;&#125;</span><br><span class="line">  MessageType type;</span><br><span class="line">  <span class="type">void</span>* data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageLoop</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MessageLoop</span>() : <span class="built_in">should_quit_</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!should_quit_) &#123;</span><br><span class="line">      <span class="keyword">if</span> (message_queue_.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      Message message = message_queue_.<span class="built_in">front</span>();</span><br><span class="line">      message_queue_.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (message.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> kQuitMessage:</span><br><span class="line">          should_quit_ = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCustomMessage:</span><br><span class="line">          <span class="built_in">HandleMessage</span>(message);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Quit</span><span class="params">()</span> </span>&#123; message_queue_.<span class="built_in">push</span>(<span class="built_in">Message</span>(kQuitMessage)); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">PostMessage</span><span class="params">(MessageType message_type, <span class="type">void</span>* data = <span class="literal">nullptr</span>)</span> </span>&#123;</span><br><span class="line">    message_queue_.<span class="built_in">push</span>(<span class="built_in">Message</span>(message_type, data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">HandleMessage</span><span class="params">(<span class="type">const</span> Message&amp; message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message_handler_) &#123;</span><br><span class="line">      <span class="built_in">message_handler_</span>(message.type, message.data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">SetMessageHandler</span><span class="params">(std::function&lt;<span class="type">void</span>(MessageType, <span class="type">void</span>*)&gt; handler)</span> </span>&#123;</span><br><span class="line">    message_handler_ = handler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">bool</span> should_quit_;</span><br><span class="line">  std::queue&lt;Message&gt; message_queue_;</span><br><span class="line">  std::function&lt;<span class="type">void</span>(MessageType, <span class="type">void</span>*)&gt; message_handler_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用方法：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MyClass</span>()&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">MyClass</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;DoSomething...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MessageLoop loop;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set message handler function.</span></span><br><span class="line">  loop.<span class="built_in">SetMessageHandler</span>([](MessageType type, <span class="type">void</span>* data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == kCustomMessage) &#123;</span><br><span class="line">      <span class="comment">// Do something with the data, e.g.</span></span><br><span class="line">       MyClass* instance = <span class="built_in">static_cast</span>&lt;MyClass*&gt;(data);</span><br><span class="line">       instance-&gt;<span class="built_in">DoSomething</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Post a custom message.</span></span><br><span class="line">  MyClass instance;</span><br><span class="line">  loop.<span class="built_in">PostMessage</span>(kCustomMessage, &amp;instance);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run the message loop.</span></span><br><span class="line">  loop.<span class="built_in">Run</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现类似于Windows消息循环的队列&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu上搭建arm64交叉编译环境</title>
    <link href="https://yesir.github.io/2023/04/03/%E5%9C%A8ubuntu%E4%B8%8A%E6%90%AD%E5%BB%BAarm64%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://yesir.github.io/2023/04/03/%E5%9C%A8ubuntu%E4%B8%8A%E6%90%AD%E5%BB%BAarm64%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</id>
    <published>2023-04-03T01:08:25.000Z</published>
    <updated>2023-04-03T01:27:38.579Z</updated>
    
    <content type="html"><![CDATA[<p>使用环境<code>Ubuntu 20.04.3 LTS</code>,并在系统先安装好<code>Qt</code>,<code>QT Creator</code>开发工具、以及<code>qemu</code>用来加载<code>arm64</code>镜像</p><span id="more"></span><ul><li>安装前准备<ol><li>智能终端OS的rootfs镜像，如：UOS-Smart-20-arm64-src.img</li><li>智能终端OS的qt开发环境及依赖包：qt_deb.tar.gz</li></ol></li></ul><ul><li><p>安装</p><ol><li><p>首先在<code>ubuntu</code>上新建一个空的img文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=UOS-Smart-20-arm64-new.img bs=1M count=7000</span><br><span class="line">sudo mkfs.ext4 UOS-Smart-20-arm64-new.img</span><br></pre></td></tr></table></figure></li><li><p>在<code>ubuntu</code>上新建2个空目录,分别将<code>UOS-Smart-20-arm64-src.img</code>和<code>UOS-Smart-20-arm64-new.img</code>挂载，并把前者的内容拷贝到后者里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -m 777 src new</span><br><span class="line">sudo mount UOS-Smart-20-arm64-src.img src</span><br><span class="line">sudo mount UOS-Smart-20-arm64-new.img new</span><br><span class="line">sudo <span class="built_in">cp</span> -rfp src/* new/</span><br><span class="line">sudo umount src</span><br></pre></td></tr></table></figure></li><li><p>如果已安装<code>qemu</code>工具，则直接拷贝文件，否则先安装，然后再拷贝所需文件到目标根文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-user-static    <span class="comment">#安装qemu</span></span><br><span class="line">sudo <span class="built_in">cp</span> /usr/bin/qemu-aarch64-static ./new/usr/bin/</span><br><span class="line">sudo <span class="built_in">cp</span> /usr/bin/qemu-arm-static ./new/usr/bin/</span><br><span class="line">sudo <span class="built_in">cp</span> ./new/etc/resolv.conf ./new/etc/resolv.conf.bak</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/resolv.conf ./new/etc/resolv.conf</span><br><span class="line">sudo <span class="built_in">cp</span> qt_deb.tar.gz ./new/home/</span><br></pre></td></tr></table></figure></li><li><p>重新挂载<code>/proc,/dev,/sys</code>节点，然后通过<code>chroot</code>到目标根文件系统中，就进入到了交叉编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t proc /proc ./new/proc</span><br><span class="line">sudo mount -t sysfs /sys ./new/sys</span><br><span class="line">sudo mount -o <span class="built_in">bind</span> /dev ./new/dev</span><br><span class="line">sudo <span class="built_in">chroot</span> ./new/</span><br></pre></td></tr></table></figure></li><li><p>在交叉编译环境中安装<code>qt_deb.tar.gz</code>中的所有<code>deb</code>包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar xzf /home/qt_deb.tar.gz</span><br><span class="line">sudo dpkg -i /home/qt_deb/*/deb</span><br></pre></td></tr></table></figure></li></ol></li><li><p>上述步骤安装完成之后，交叉编译环境就搭建完成了。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用环境&lt;code&gt;Ubuntu 20.04.3 LTS&lt;/code&gt;,并在系统先安装好&lt;code&gt;Qt&lt;/code&gt;,&lt;code&gt;QT Creator&lt;/code&gt;开发工具、以及&lt;code&gt;qemu&lt;/code&gt;用来加载&lt;code&gt;arm64&lt;/code&gt;镜像&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://yesir.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>C++命令模式</title>
    <link href="https://yesir.github.io/2023/03/31/C-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yesir.github.io/2023/03/31/C-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-03-31T01:32:36.000Z</published>
    <updated>2023-03-31T01:37:16.806Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式的核心在于引入了命令类，通过命令类来降低请求发送者和接收者的耦合度，请求发送者只需要指定一个命令对象，再通过命令对象来调用请求接收者的处理方法</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line">// 命令接口</span><br><span class="line">class Command </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void execute() = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 具体命令类1</span><br><span class="line">class ConcreteCommand1 : public Command </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="function"><span class="title">ConcreteCommand1</span></span>() &#123;&#125;</span><br><span class="line">    void execute() override </span><br><span class="line">&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;执行具体命令1&quot;</span> &lt;&lt; <span class="string">std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 具体命令类2</span></span><br><span class="line"><span class="string">class ConcreteCommand2 : public Command </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public:</span></span><br><span class="line"><span class="string">    ConcreteCommand2() &#123;&#125;</span></span><br><span class="line"><span class="string">    void execute() override </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        std</span>::cout &lt;&lt; <span class="string">&quot;执行具体命令2&quot;</span> &lt;&lt; <span class="string">std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 命令调用者</span></span><br><span class="line"><span class="string">class Invoker </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">private:</span></span><br><span class="line"><span class="string">    std</span>::vector&lt;Command*&gt; commands_;</span><br><span class="line">public:</span><br><span class="line">    void addCommand(Command* <span class="built_in">command</span>) </span><br><span class="line">&#123;</span><br><span class="line">        commands_.push_back(<span class="built_in">command</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    void <span class="function"><span class="title">executeCommands</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span> (auto <span class="built_in">command</span> : commands_) </span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">command</span>-&gt;execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 命令接收者</span><br><span class="line">class Receiver </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void <span class="function"><span class="title">action</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;执行命令接收者操作&quot;</span> &lt;&lt; <span class="string">std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 具体命令类3</span></span><br><span class="line"><span class="string">class ConcreteCommand3 : public Command </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">private:</span></span><br><span class="line"><span class="string">    Receiver* receiver_;</span></span><br><span class="line"><span class="string">public:</span></span><br><span class="line"><span class="string">    ConcreteCommand3(Receiver* receiver):receiver_(receiver)&#123;&#125;</span></span><br><span class="line"><span class="string">    void execute() override </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        receiver_-&gt;action();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int main(int argc, char* argv[]) </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Invoker invoker;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 添加具体命令1和2</span></span><br><span class="line"><span class="string">    Command* cmd1 = new ConcreteCommand1();</span></span><br><span class="line"><span class="string">    Command* cmd2 = new ConcreteCommand2();</span></span><br><span class="line"><span class="string">    invoker.addCommand(cmd1);</span></span><br><span class="line"><span class="string">    invoker.addCommand(cmd2);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 添加具体命令3</span></span><br><span class="line"><span class="string">    Receiver* receiver = new Receiver();</span></span><br><span class="line"><span class="string">    Command* cmd3 = new ConcreteCommand3(receiver);</span></span><br><span class="line"><span class="string">    invoker.addCommand(cmd3);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 执行所有命令</span></span><br><span class="line"><span class="string">    invoker.executeCommands();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 释放内存</span></span><br><span class="line"><span class="string">    delete cmd1;</span></span><br><span class="line"><span class="string">    delete cmd2;</span></span><br><span class="line"><span class="string">    delete cmd3;</span></span><br><span class="line"><span class="string">    delete receiver;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Command是命令接口，具有execute方法；</span><br><span class="line">ConcreteCommand1和ConcreteCommand2是具体命令类，实现了execute方法，分别对应不同的具体操作；</span><br><span class="line">Invoker是命令调用者，可以添加多个命令，并按顺序执行；</span><br><span class="line">Receiver是命令接收者，具有实际的操作方法；</span><br><span class="line">ConcreteCommand3是具体命令类，将命令接收者作为参数传递进去，在execute方法中调用接收者的操作方法。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行该程序会输出以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行具体命令1</span><br><span class="line">执行具体命令2</span><br><span class="line">执行命令接收者操作</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;命令模式的核心在于引入了命令类，通过命令类来降低请求发送者和接收者的耦合度，请求发送者只需要指定一个命令对象，再通过命令对象来调用请求接收者的处理方法&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
</feed>
