<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随笔</title>
  
  
  <link href="https://yesir.github.io/atom.xml" rel="self"/>
  
  <link href="https://yesir.github.io/"/>
  <updated>2022-11-16T05:52:07.998Z</updated>
  <id>https://yesir.github.io/</id>
  
  <author>
    <name>yesir</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux qt 打包</title>
    <link href="https://yesir.github.io/2022/11/16/Linux-qt-%E6%89%93%E5%8C%85/"/>
    <id>https://yesir.github.io/2022/11/16/Linux-qt-%E6%89%93%E5%8C%85/</id>
    <published>2022-11-16T03:32:00.000Z</published>
    <updated>2022-11-16T05:52:07.998Z</updated>
    
    <content type="html"><![CDATA[<p>在linux 系统中使用<code>linuxdeployqt</code>打包开发的应用程序，解决系统中存在多个qt版本的问题。</p><span id="more"></span><p><code>qt</code>开发环境版本为：<code>5.9.5</code></p><blockquote><p>首先、下载linuxdeployqt源码包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-b 6 表示 版本号</span><br><span class="line">git <span class="built_in">clone</span> -b 6 https://gitee.com/yangfanimb/linuxdeployqt.git</span><br></pre></td></tr></table></figure><blockquote><p>2、编译<code>linuxdeployqt</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=$(<span class="built_in">readlink</span> -f /usr/lib/aarch64-linux-gnu/qt5/bin/):<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">cd</span> linuxdeployqt</span><br><span class="line">qmake</span><br><span class="line">make</span><br></pre></td></tr></table></figure><pre><code>执行完将bin/linuxdeployqt 拷贝到/usr/local/bin`cp bin/linuxdeployqt /usr/local/bin`</code></pre><blockquote><p>3、设置<code>qt</code>环境变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/lib/qt5/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LIB_PATH=/usr/lib/aarch64-linux-gnu/:<span class="variable">$LIB_PATH</span></span><br><span class="line"><span class="built_in">export</span> PLUGIN_PATH=/usr/lib/aarch64-linux-gnu/qt5/plugins:<span class="variable">$PLUGIN_PATH</span></span><br><span class="line"><span class="built_in">export</span> QML2_PATH=/usr/lib/aarch64-linux-gnu/qt5/qml:<span class="variable">$QML2_PATH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改文件:</span><br><span class="line">vim /usr/lib/x86_64-linux-gnu/qt-default/qtchooser/default.conf</span><br><span class="line"></span><br><span class="line">将文件中的qt4内容删除，写入qt5的内容如下：</span><br><span class="line"></span><br><span class="line">/usr/lib/aarch64-linux-gnu/qt5/bin</span><br><span class="line">/usr/lib/aarch64-linux-gnu</span><br></pre></td></tr></table></figure><blockquote><p>4、错误解决</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not start patchelf.</span><br><span class="line">ERROR: Make sure it is installed on your <span class="variable">$PATH</span>.</span><br><span class="line"></span><br><span class="line">安装patchelf.</span><br><span class="line"></span><br><span class="line">sudo apt-get install patchelf</span><br><span class="line">如果执行失败可以手动安装</span><br><span class="line">wget http://ports.ubuntu.com/pool/universe/p/patchelf/patchelf_0.9-1_arm64.deb</span><br><span class="line">sudo dpkg -i patchelf_0.9-1_arm64.deb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ERROR: appimagetool: not found</span><br><span class="line"></span><br><span class="line">appimagetool 是为了将软件打成一个整体包,即AppImage包，此处可忽略</span><br></pre></td></tr></table></figure><blockquote><p>5、打包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linuxdeployqt Test -appimage</span><br></pre></td></tr></table></figure><blockquote><p>6、制作deb包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#make_pkg.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">Usage: $0 [-v PACKAGE_VERSION] </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Detect the version of app.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">  -v    version</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;-h&quot;</span> -o <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;-H&quot;</span> -o <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;--help&quot;</span> -o <span class="variable">$#</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">  usage</span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ 0 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;-v&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    VersionID=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">shift</span> 2</span><br><span class="line">  <span class="keyword">elif</span> [ <span class="variable">$#</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;/^Version/c\Version: &#x27;</span><span class="variable">$VersionID</span> Name-Kylin-Desktop/DEBIAN/control</span><br><span class="line"></span><br><span class="line">deploy_dir=Name-Kylin-Desktop</span><br><span class="line">package_dir=./package</span><br><span class="line"></span><br><span class="line">makepkgname=Name-<span class="variable">$VersionID</span>-Kylin-Desktop-aarch64.deb</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$makepkgname</span></span><br><span class="line"></span><br><span class="line">dpkg -b <span class="variable">$deploy_dir</span> <span class="variable">$makepkgname</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;done.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在linux 系统中使用&lt;code&gt;linuxdeployqt&lt;/code&gt;打包开发的应用程序，解决系统中存在多个qt版本的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>使用docker搭建gitlab</title>
    <link href="https://yesir.github.io/2022/11/09/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAgitlab/"/>
    <id>https://yesir.github.io/2022/11/09/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAgitlab/</id>
    <published>2022-11-09T09:35:39.000Z</published>
    <updated>2022-11-09T09:57:26.898Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 搭建 Gitlab 服务器</p><span id="more"></span><blockquote><p>首先获取中文镜像<br><code>docker pull gitlab/gitlab-ce:latest</code></p></blockquote><blockquote><p>启动容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run \</span><br><span class="line"> -itd  \</span><br><span class="line"> -p 8080:80 \</span><br><span class="line"> -p 8022:22 \</span><br><span class="line"> -v /home/gitlab/etc:/etc/gitlab  \</span><br><span class="line"> -v /home/gitlab/log:/var/log/gitlab \</span><br><span class="line"> -v /home/gitlab/opt:/var/opt/gitlab \</span><br><span class="line"> --restart always \</span><br><span class="line"> --privileged=<span class="literal">true</span> \</span><br><span class="line"> --name gitlab \</span><br><span class="line"> gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><blockquote><p>修改配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改gitlab.rb</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"> </span><br><span class="line"><span class="comment">#加入如下</span></span><br><span class="line"><span class="comment">#gitlab访问地址，可以写域名。如果端口不写的话默认为80端口</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.31.139&#x27;</span></span><br><span class="line"><span class="comment">#ssh主机ip</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;192.168.31.139&#x27;</span></span><br><span class="line"><span class="comment">#ssh连接端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 8022</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 让配置生效</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改http和ssh配置</span></span><br><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br><span class="line"> </span><br><span class="line">  gitlab:</span><br><span class="line">    host: 192.168.31.139</span><br><span class="line">    port: 8080 <span class="comment"># 这里改为8080</span></span><br><span class="line">    https: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启gitlab </span></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"><span class="comment">#退出容器 </span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>使用浏览器访问</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.124.194:8080/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次访问，会让修改root密码</span></span><br></pre></td></tr></table></figure><blockquote><p>修改root密码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 进入控制台</span></span><br><span class="line">gitlab-rails console -e production</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询id为1的用户，id为1的用户是超级管理员</span></span><br><span class="line">user = User.<span class="built_in">where</span>(<span class="built_in">id</span>:1).first</span><br><span class="line"><span class="comment"># 修改密码为lhx123456</span></span><br><span class="line">user.password=<span class="string">&#x27;lhx123456&#x27;</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">user.save!</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 搭建 Gitlab 服务器&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>c说言byte转16进制字符串</title>
    <link href="https://yesir.github.io/2022/11/08/c%E8%AF%AD%E8%A8%80byte%E8%BD%AC16%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://yesir.github.io/2022/11/08/c%E8%AF%AD%E8%A8%80byte%E8%BD%AC16%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-11-08T09:17:01.000Z</published>
    <updated>2022-11-08T09:28:39.437Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>sprintf</code>来实现byte转换成16进制字符串,即在内存中<code>00 01 0F 23</code> 转换为<code>&quot;00010F23&quot;</code>。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unsigned char* src;//源数据</span><br><span class="line">int nLen;//源数据长度</span><br><span class="line">char* dst;//转换后的数据</span><br><span class="line">for (int i = 0; i &lt; nLen; i++) </span><br><span class="line">&#123;</span><br><span class="line">sprintf(dst + i * 2, &quot;%02X&quot;, src[i] &amp; 0xFF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上一转换后的字符串即<code>&quot;00010F23&quot;</code>还原成<code>00 01 0F 23</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@param pbDest: 转换后的数据</span><br><span class="line">@param pbSrc:  源数据</span><br><span class="line">@param nLen:   源数据长度</span><br><span class="line">int StrToHex(unsigned char* pbDest, char* pbSrc, int nLen)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">BYTE high, low;</span><br><span class="line">int idx, ii = 0;</span><br><span class="line"></span><br><span class="line">for (idx = 0; idx &lt; nLen; idx += 2)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">high = pbSrc[idx];</span><br><span class="line">low  = pbSrc[idx + 1];</span><br><span class="line"></span><br><span class="line">if (high &gt;= &#x27;0&#x27; &amp;&amp; high &lt;= &#x27;9&#x27;)</span><br><span class="line">high = high - &#x27;0&#x27;;</span><br><span class="line">else if (high &gt;= &#x27;A&#x27; &amp;&amp; high &lt;= &#x27;F&#x27;)</span><br><span class="line">high = high - &#x27;A&#x27; + 10;</span><br><span class="line">else if (high &gt;= &#x27;a&#x27; &amp;&amp; high &lt;= &#x27;f&#x27;)</span><br><span class="line">high = high - &#x27;a&#x27; + 10;</span><br><span class="line">else</span><br><span class="line">return ii;</span><br><span class="line"></span><br><span class="line">if (low &gt;= &#x27;0&#x27; &amp;&amp; low &lt;= &#x27;9&#x27;)</span><br><span class="line">low = low - &#x27;0&#x27;;</span><br><span class="line">else if (low &gt;= &#x27;A&#x27; &amp;&amp; low &lt;= &#x27;F&#x27;)</span><br><span class="line">low = low - &#x27;A&#x27; + 10;</span><br><span class="line">else if (low &gt;= &#x27;a&#x27; &amp;&amp; low &lt;= &#x27;f&#x27;)</span><br><span class="line">low = low - &#x27;a&#x27; + 10;</span><br><span class="line">else</span><br><span class="line">return ii;</span><br><span class="line"></span><br><span class="line">pbDest[ii++] = high &lt;&lt; 4 | low;</span><br><span class="line">&#125;</span><br><span class="line">return ii;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用&lt;code&gt;sprintf&lt;/code&gt;来实现byte转换成16进制字符串,即在内存中&lt;code&gt;00 01 0F 23&lt;/code&gt; 转换为&lt;code&gt;&amp;quot;00010F23&amp;quot;&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>opencv学习（二）</title>
    <link href="https://yesir.github.io/2022/05/30/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yesir.github.io/2022/05/30/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-05-30T03:20:48.000Z</published>
    <updated>2022-05-30T03:31:13.644Z</updated>
    
    <content type="html"><![CDATA[<p>将bmp图片转换成Base64字符串</p><span id="more"></span><p>方法：BmptoBase64<br>参数1(IN)：bmp文件路径(带文件名),eg: /tmp/tmp.bmp<br>参数2(OUT)：输出base64字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base64.h&quot;</span></span></span><br><span class="line"><span class="comment">// LIBS += -lopencv_core -lopencv_imgcodecs</span></span><br><span class="line"><span class="comment">// g++ x.cpp -o x  -I*/opencv/include -L*/opencv/lib -lopencv_imgcodecs -lopencv_core</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BmptoBase64</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *bmp_file, std::string &amp;jeg_file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat bmpimg = cv::<span class="built_in">imread</span>(bmp_file);</span><br><span class="line">    std::vector&lt;uchar&gt; image;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; param;</span><br><span class="line"><span class="keyword">if</span> (bmpimg.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">param.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">param.<span class="built_in">push_back</span>(<span class="number">95</span>);</span><br><span class="line">param.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">cv::<span class="built_in">imencode</span>(<span class="string">&quot;.jpg&quot;</span>, bmpimg, image, param);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> size = image.<span class="built_in">size</span>() * <span class="number">2</span>;</span><br><span class="line">    <span class="type">char</span>* base64 = <span class="keyword">new</span> <span class="type">char</span>[size];</span><br><span class="line"><span class="built_in">memset</span>(base64, <span class="number">0</span>, size);</span><br><span class="line"><span class="built_in">Base64Encode</span>(base64, (<span class="type">char</span> *)(&amp;image[<span class="number">0</span>]), image.<span class="built_in">size</span>());</span><br><span class="line">jeg_file = base64;</span><br><span class="line"><span class="keyword">delete</span> [] base64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Useage:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *bmp_file = <span class="string">&quot;tmp.bmp&quot;</span>;</span><br><span class="line">    std::string strbase64;</span><br><span class="line">    <span class="built_in">BmptoBase64</span>(bmp_file, strbase64);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;BMP To Base64 done\r\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;len: %d\r\n%s\r\n&quot;</span>, strbase64.<span class="built_in">length</span>(), strbase64.<span class="built_in">c_str</span>());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附<code>base64.h</code>文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// base64.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考文章：http://www.cstc.net.cn/docs/docs.php?id=202</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//************************************************************************/</span></span><br><span class="line"><span class="comment">//    base64编码表</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//0 A 17 R 34 i 51 z </span></span><br><span class="line"><span class="comment">//1 B 18 S 35 j 52 0 </span></span><br><span class="line"><span class="comment">//2 C 19 T 36 k 53 1 </span></span><br><span class="line"><span class="comment">//3 D 20 U 37 l 54 2 </span></span><br><span class="line"><span class="comment">//4 E 21 V 38 m 55 3 </span></span><br><span class="line"><span class="comment">//5 F 22 W 39 n 56 4 </span></span><br><span class="line"><span class="comment">//6 G 23 X 40 o 57 5 </span></span><br><span class="line"><span class="comment">//7 H 24 Y 41 p 58 6 </span></span><br><span class="line"><span class="comment">//8 I 25 Z 42 q 59 7 </span></span><br><span class="line"><span class="comment">//9 J 26 a 43 r 60 8 </span></span><br><span class="line"><span class="comment">//10 K 27 b 44 s 61 9 </span></span><br><span class="line"><span class="comment">//11 L 28 c 45 t 62 + </span></span><br><span class="line"><span class="comment">//12 M 29 d 46 u 63 / </span></span><br><span class="line"><span class="comment">//13 N 30 e 47 v (pad) = </span></span><br><span class="line"><span class="comment">//14 O 31 f 48 w </span></span><br><span class="line"><span class="comment">//15 P 32 g 49 x </span></span><br><span class="line"><span class="comment">//16 Q 33 h 50 y </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// base64编码步骤：</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//原文：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你好</span></span><br><span class="line"><span class="comment">//C4 E3 BA C3</span></span><br><span class="line"><span class="comment">//11000100 11100011 10111010 11000011</span></span><br><span class="line"><span class="comment">//00110001 00001110 00001110 00111010</span></span><br><span class="line"><span class="comment">//49       14（十进制）</span></span><br><span class="line"><span class="comment">//x        O        O        6字符</span></span><br><span class="line"><span class="comment">//01111000 01001111 01001111 00110110</span></span><br><span class="line"><span class="comment">//78（十六进制）</span></span><br><span class="line"><span class="comment">//xOO6</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//解码：</span></span><br><span class="line"><span class="comment">//xOO6</span></span><br><span class="line"><span class="comment">//78 4f 4f 36</span></span><br><span class="line"><span class="comment">//01111000 01001111 01001111 00110110</span></span><br><span class="line"><span class="comment">//49       14 </span></span><br><span class="line"><span class="comment">//00110001 00001110 00001110 00111010   31 0e 0e 3a</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//11000100 11100011 10111010</span></span><br><span class="line"><span class="comment">//C4       E3       BA</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _BASE64_INCLUDE__H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BASE64_INCLUDE__H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码后的长度一般比原文多占1/3的存储空间，请保证base64code有足够的空间</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="title">Base64Encode</span><span class="params">(<span class="type">char</span> * base64code, <span class="type">const</span> <span class="type">char</span> * src, <span class="type">long</span> src_len)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="title">Base64Decode</span><span class="params">(<span class="type">char</span> * buf, <span class="type">const</span> <span class="type">char</span> * base64code, <span class="type">long</span> src_len = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">__inline <span class="type">char</span> <span class="title">GetB64Char</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> szBase64Table[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="number">64</span>)</span><br><span class="line"><span class="keyword">return</span> szBase64Table[index];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从双字中取单字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B0(a) (a &amp; 0xFF)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B1(a) (a &gt;&gt; 8 &amp; 0xFF)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B2(a) (a &gt;&gt; 16 &amp; 0xFF)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B3(a) (a &gt;&gt; 24 &amp; 0xFF)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码后的长度一般比原文多占1/3的存储空间，请保证base64code有足够的空间</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="title">Base64Encode</span><span class="params">(<span class="type">char</span> * base64code, <span class="type">const</span> <span class="type">char</span> * src, <span class="type">long</span> src_len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="keyword">if</span> (src_len == <span class="number">0</span>)</span><br><span class="line">src_len = <span class="built_in">strlen</span>(src);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* psrc = (<span class="type">unsigned</span> <span class="type">char</span>*)src;</span><br><span class="line"><span class="type">char</span> * p64 = base64code;</span><br><span class="line"><span class="type">long</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; src_len - <span class="number">3</span>; i += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ulTmp = *(<span class="type">unsigned</span> <span class="type">long</span>*)psrc;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b0 = <span class="built_in">GetB64Char</span>((<span class="built_in">B0</span>(ulTmp) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>); </span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b1 = <span class="built_in">GetB64Char</span>((<span class="built_in">B0</span>(ulTmp) &lt;&lt; <span class="number">6</span> &gt;&gt; <span class="number">2</span> | <span class="built_in">B1</span>(ulTmp) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x3F</span>); </span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b2 = <span class="built_in">GetB64Char</span>((<span class="built_in">B1</span>(ulTmp) &lt;&lt; <span class="number">4</span> &gt;&gt; <span class="number">2</span> | <span class="built_in">B2</span>(ulTmp) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>); </span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b3 = <span class="built_in">GetB64Char</span>((<span class="built_in">B2</span>(ulTmp) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>); </span><br><span class="line">*((<span class="type">unsigned</span> <span class="type">long</span>*)p64) = b0 | b1 &lt;&lt; <span class="number">8</span> | b2 &lt;&lt; <span class="number">16</span> | b3 &lt;&lt; <span class="number">24</span>;</span><br><span class="line">len += <span class="number">4</span>;</span><br><span class="line">p64  += <span class="number">4</span>; </span><br><span class="line">psrc += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理最后余下的不足3字节的饿数据</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; src_len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rest = src_len - i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ulTmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; rest; ++j)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="type">unsigned</span> <span class="type">char</span>*)&amp;ulTmp) + j) = *psrc++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p64[<span class="number">0</span>] = <span class="built_in">GetB64Char</span>((<span class="built_in">B0</span>(ulTmp) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>); </span><br><span class="line">p64[<span class="number">1</span>] = <span class="built_in">GetB64Char</span>((<span class="built_in">B0</span>(ulTmp) &lt;&lt; <span class="number">6</span> &gt;&gt; <span class="number">2</span> | <span class="built_in">B1</span>(ulTmp) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x3F</span>); </span><br><span class="line">p64[<span class="number">2</span>] = rest &gt; <span class="number">1</span> ? <span class="built_in">GetB64Char</span>((<span class="built_in">B1</span>(ulTmp) &lt;&lt; <span class="number">4</span> &gt;&gt; <span class="number">2</span> | <span class="built_in">B2</span>(ulTmp) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) : <span class="string">&#x27;=&#x27;</span>; </span><br><span class="line">p64[<span class="number">3</span>] = rest &gt; <span class="number">2</span> ? <span class="built_in">GetB64Char</span>((<span class="built_in">B2</span>(ulTmp) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>) : <span class="string">&#x27;=&#x27;</span>; </span><br><span class="line">p64 += <span class="number">4</span>; </span><br><span class="line">len += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*p64 = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__inline <span class="type">int</span> <span class="title">GetB64Index</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = ch - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = ch - <span class="string">&#x27;a&#x27;</span> + <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = ch - <span class="string">&#x27;0&#x27;</span> + <span class="number">52</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = <span class="number">62</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = <span class="number">63</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码后的长度一般比原文少用占1/4的存储空间，请保证buf有足够的空间</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="title">Base64Decode</span><span class="params">(<span class="type">char</span> * buf, <span class="type">const</span> <span class="type">char</span> * base64code, <span class="type">long</span> src_len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="keyword">if</span> (src_len == <span class="number">0</span>)</span><br><span class="line">src_len = <span class="built_in">strlen</span>(base64code);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* psrc = (<span class="type">unsigned</span> <span class="type">char</span>*)base64code;</span><br><span class="line"><span class="type">char</span> * pbuf = buf;</span><br><span class="line"><span class="type">long</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; src_len - <span class="number">4</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ulTmp = *(<span class="type">unsigned</span> <span class="type">long</span>*)psrc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b0 = (<span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B0</span>(ulTmp)) &lt;&lt; <span class="number">2</span> | <span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B1</span>(ulTmp)) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b1 = (<span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B1</span>(ulTmp)) &lt;&lt; <span class="number">4</span> | <span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B2</span>(ulTmp)) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b2 = (<span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B2</span>(ulTmp)) &lt;&lt; <span class="number">6</span> | <span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B3</span>(ulTmp)) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">*((<span class="type">unsigned</span> <span class="type">long</span>*)pbuf) = b0 | b1 &lt;&lt; <span class="number">8</span> | b2 &lt;&lt; <span class="number">16</span>;</span><br><span class="line">psrc  += <span class="number">4</span>; </span><br><span class="line">pbuf += <span class="number">3</span>;</span><br><span class="line">len += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理最后余下的不足4字节的饿数据</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; src_len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rest = src_len - i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ulTmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; rest; ++j)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="type">unsigned</span> <span class="type">char</span>*)&amp;ulTmp) + j) = *psrc++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b0 = (<span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B0</span>(ulTmp)) &lt;&lt; <span class="number">2</span> | <span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B1</span>(ulTmp)) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">*pbuf++ = b0;</span><br><span class="line">len  ++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;=&#x27;</span> != <span class="built_in">B1</span>(ulTmp) &amp;&amp; <span class="string">&#x27;=&#x27;</span> != <span class="built_in">B2</span>(ulTmp))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b1 = (<span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B1</span>(ulTmp)) &lt;&lt; <span class="number">4</span> | <span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B2</span>(ulTmp)) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">*pbuf++ = b1;</span><br><span class="line">len  ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;=&#x27;</span> != <span class="built_in">B2</span>(ulTmp) &amp;&amp; <span class="string">&#x27;=&#x27;</span> != <span class="built_in">B3</span>(ulTmp))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> b2 = (<span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B2</span>(ulTmp)) &lt;&lt; <span class="number">6</span> | <span class="built_in">GetB64Index</span>((<span class="type">char</span>)<span class="built_in">B3</span>(ulTmp)) &lt;&lt; <span class="number">2</span> &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">*pbuf++ = b2;</span><br><span class="line">len  ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*pbuf = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// #ifndef _BASE64_INCLUDE__H__</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;将bmp图片转换成Base64字符串&lt;/p&gt;</summary>
    
    
    
    
    <category term="Opencv" scheme="https://yesir.github.io/tags/Opencv/"/>
    
  </entry>
  
  <entry>
    <title>C++切割字符串</title>
    <link href="https://yesir.github.io/2022/05/27/C-%E5%88%87%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://yesir.github.io/2022/05/27/C-%E5%88%87%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-05-27T06:55:51.000Z</published>
    <updated>2022-05-27T07:19:48.015Z</updated>
    
    <content type="html"><![CDATA[<p>C++中根据字符或字符串分割字符串</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// utli_str.h</span><br><span class="line">#ifndef str_utli_h__</span><br><span class="line">#define str_utli_h__</span><br><span class="line"></span><br><span class="line">#include &lt;stddef.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">class   CDGSplit</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">CDGSplit(const char *sOri, int iLen, char sSub);</span><br><span class="line">CDGSplit(const string sOri, const string sSub, bool bRemoveSub);</span><br><span class="line">~CDGSplit();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">bool nextSub(char *sOne, int iOneLen);</span><br><span class="line">bool nextSub(string &amp;sOne);</span><br><span class="line">const string&amp; operator[](size_t pos);</span><br><span class="line">bool getPlace(unsigned int uiPlace, char *sOut, int nOutLen);</span><br><span class="line">bool getPlace(unsigned int uiPlace, string &amp;sOut);</span><br><span class="line">int size();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">void split(const char *sOri, char sSub);</span><br><span class="line">void split(const char *sOri, int iLen, char sSub);</span><br><span class="line">void split(const string sOri,const string sSub, bool bRemoveSub);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">vector&lt;string&gt; m_vecContent;</span><br><span class="line">vector&lt;string&gt;::iterator m_vecIter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // str_utli_h__</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">// utli_str.cpp</span><br><span class="line">#include &quot;utli_str.h&quot;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;stdarg.h&gt;</span><br><span class="line"></span><br><span class="line">#ifdef WIN32</span><br><span class="line">    #pragma warning(disable:4996)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//////////////////////////////////////////////////////////////////////////</span><br><span class="line">#ifdef WIN32</span><br><span class="line">#pragma warning(disable:4996)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">CDGSplit::CDGSplit(const char *sOri, int iLen, char sSub)</span><br><span class="line">&#123;</span><br><span class="line">if (iLen &lt;= 0) return;</span><br><span class="line"></span><br><span class="line">char *sTemp = new char[iLen + 1];</span><br><span class="line">if (sTemp == NULL) return;</span><br><span class="line">memset(sTemp, 0, iLen + 1);</span><br><span class="line">memcpy(sTemp, sOri, iLen);</span><br><span class="line"></span><br><span class="line">if (sSub != &#x27;\0&#x27;) split(sTemp, sSub);</span><br><span class="line">else split(sTemp, iLen, sSub);</span><br><span class="line">m_vecIter = m_vecContent.begin();</span><br><span class="line"></span><br><span class="line">delete[] sTemp;</span><br><span class="line">sTemp = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* bRemoveSub: 是否删除分割字符串</span><br><span class="line">*/</span><br><span class="line">CDGSplit::CDGSplit(string sOri, string sSub, bool bRemoveSub)</span><br><span class="line">&#123;</span><br><span class="line">split(sOri, sSub, bRemoveSub);</span><br><span class="line">m_vecIter = m_vecContent.begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDGSplit::~CDGSplit()</span><br><span class="line">&#123;</span><br><span class="line">m_vecContent.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool CDGSplit::nextSub(char *sOne, int iOneLen)</span><br><span class="line">&#123;</span><br><span class="line">if (m_vecIter == m_vecContent.end())</span><br><span class="line">&#123;</span><br><span class="line">if (iOneLen &gt; 0) sOne[0] = &#x27;\0&#x27;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strncpy(sOne, (*m_vecIter).c_str(), iOneLen);</span><br><span class="line">++m_vecIter;</span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool CDGSplit::getPlace(unsigned int uiPlace, char *sOut, int nOutLen)</span><br><span class="line">&#123;</span><br><span class="line">if (sOut == NULL || nOutLen &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">if (nOutLen &gt; 0) sOut[0] = &#x27;\0&#x27;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (uiPlace &gt; m_vecContent.size())</span><br><span class="line">&#123;</span><br><span class="line">if (nOutLen &gt; 0) sOut[0] = &#x27;\0&#x27;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (m_vecContent.size() == 0) return false;</span><br><span class="line">string sTemp = m_vecContent[uiPlace];</span><br><span class="line">strncpy(sOut, sTemp.c_str(), nOutLen);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool CDGSplit::getPlace(unsigned int uiPlace, string &amp;sOut)</span><br><span class="line">&#123;</span><br><span class="line">if (m_vecContent.size() == 0) return false;</span><br><span class="line">if (uiPlace &gt; m_vecContent.size())</span><br><span class="line">&#123;</span><br><span class="line">sOut = string(&quot;&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sOut = m_vecContent[uiPlace];</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const string&amp; CDGSplit::operator[](size_t pos)</span><br><span class="line">&#123;</span><br><span class="line">static string aa;</span><br><span class="line">if (pos &gt;= m_vecContent.size())&#123;</span><br><span class="line">        //_DEBUG_ERROR(&quot;vector subscript out of range&quot;);</span><br><span class="line">return aa;</span><br><span class="line">&#125;</span><br><span class="line">return m_vecContent[pos];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool CDGSplit::nextSub(string &amp;sOne)</span><br><span class="line">&#123;</span><br><span class="line">if (m_vecIter == m_vecContent.end())</span><br><span class="line">&#123;</span><br><span class="line">sOne = string(&quot;&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sOne = (*m_vecIter);</span><br><span class="line">++m_vecIter;</span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CDGSplit::split(const char *sOri, char sSub)</span><br><span class="line">&#123;</span><br><span class="line">string sNew(sOri);</span><br><span class="line">string sub_str;</span><br><span class="line">stringstream ss(sOri);</span><br><span class="line"></span><br><span class="line">while(std::getline(ss, sub_str, sSub))</span><br><span class="line">&#123;</span><br><span class="line">m_vecContent.push_back(sub_str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CDGSplit::split(const char *sOri, int iLen, char sSub)</span><br><span class="line">&#123;</span><br><span class="line">int iPos = 0;</span><br><span class="line">if (sSub != &#x27;\0&#x27;) return;</span><br><span class="line"></span><br><span class="line">m_vecContent.push_back(string(sOri));</span><br><span class="line"></span><br><span class="line">char *p = strchr((char *)sOri, &#x27;\0&#x27;);</span><br><span class="line">while (p != NULL)</span><br><span class="line">&#123;</span><br><span class="line">iPos = p - sOri + 1;</span><br><span class="line">if (iPos &gt;= iLen - 1)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">m_vecContent.push_back(string(p + 1));</span><br><span class="line">p = strchr(p + 1, &#x27;\0&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int CDGSplit::size()</span><br><span class="line">&#123;</span><br><span class="line">return m_vecContent.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CDGSplit::split(const string sOri, const string sSub, bool bRemoveSub)</span><br><span class="line">&#123;</span><br><span class="line">string sFind = sOri;</span><br><span class="line">string sTemp(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">if (sOri.size() == 0 || sSub.size() == 0) return;</span><br><span class="line">int nPos = (int)sFind.find(sSub);</span><br><span class="line">while (nPos != (int)string::npos)</span><br><span class="line">&#123;</span><br><span class="line">sTemp = sFind.substr(0, nPos);</span><br><span class="line">sFind = sFind.substr(nPos + sSub.size(), sFind.size() - nPos - sSub.size());</span><br><span class="line"></span><br><span class="line">if (bRemoveSub == false) sTemp.append(sSub);</span><br><span class="line"></span><br><span class="line">m_vecContent.push_back(sTemp);</span><br><span class="line">nPos = (int)sFind.find(sSub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (sFind.empty() == false)</span><br><span class="line">&#123;</span><br><span class="line">m_vecContent.push_back(sFind);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">string str = &quot;1111,222,333334,555&quot;;</span><br><span class="line">// use 1</span><br><span class="line">CDGSplit sp(str.c_str(), str.length(), &#x27;,&#x27;);</span><br><span class="line">for(int i = 0; i &lt; sp.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">string stemp;</span><br><span class="line">sp.getPlace(i, stemp);</span><br><span class="line">cout &lt;&lt; stemp &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//use 2</span><br><span class="line">CDGSplit sp(str, &quot;,&quot;, true);</span><br><span class="line">for(int i = 0; i &lt; sp.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; sp[0] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++中根据字符或字符串分割字符串&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>centos7-aarch64换源</title>
    <link href="https://yesir.github.io/2022/05/20/centos7-aarch64%E6%8D%A2%E6%BA%90/"/>
    <id>https://yesir.github.io/2022/05/20/centos7-aarch64%E6%8D%A2%E6%BA%90/</id>
    <published>2022-05-20T09:36:54.000Z</published>
    <updated>2022-05-20T09:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>centos 7 aarch64系统yum替换阿里源</p><span id="more"></span><h2 id="一、进入yum-repo-d"><a href="#一、进入yum-repo-d" class="headerlink" title="一、进入yum.repo.d"></a>一、进入yum.repo.d</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line"></span><br><span class="line">[root@node-01 yum.repos.d]<span class="comment"># ls</span></span><br><span class="line">CentOS-Base.repo  CentOS-Sources.repo</span><br></pre></td></tr></table></figure><h2 id="二、备份原yum源"><a href="#二、备份原yum源" class="headerlink" title="二、备份原yum源"></a>二、备份原yum源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 yum.repos.d]<span class="comment"># mkdir yum-back</span></span><br><span class="line"></span><br><span class="line">[root@node-01 yum.repos.d]<span class="comment"># mv CentOS-* yum-back/</span></span><br><span class="line"></span><br><span class="line">[root@node-01 yum.repos.d]<span class="comment"># ls</span></span><br><span class="line">yum-back</span><br></pre></td></tr></table></figure><h2 id="三、替换yum源为阿里源"><a href="#三、替换yum源为阿里源" class="headerlink" title="三、替换yum源为阿里源"></a>三、替换yum源为阿里源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 yum.repos.d]<span class="comment"># cat CentOS-Base.repo </span></span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos-altarch/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"><span class="comment">#released updates </span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos-altarch/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos-altarch/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line">enabled=1</span><br><span class="line"> </span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos-altarch/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 yum.repos.d]<span class="comment"># cat epel.repo </span></span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"> </span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span> - Debug</span><br><span class="line"><span class="comment">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch/debug</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="variable">$basearch</span>/debug</span><br><span class="line"><span class="comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line"> </span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span> - Source</span><br><span class="line"><span class="comment">#baseurl=http://download.fedoraproject.org/pub/epel/7/SRPMS</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS</span><br><span class="line"><span class="comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><h2 id="四、替换认证秘钥"><a href="#四、替换认证秘钥" class="headerlink" title="四、替换认证秘钥"></a>四、替换认证秘钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 yum.repos.d]<span class="comment"># cd /etc/pki/rpm-gpg/</span></span><br><span class="line"> </span><br><span class="line">[root@node-01 rpm-gpg]<span class="comment"># ls</span></span><br><span class="line">RPM-GPG-KEY-CentOS-7  RPM-GPG-KEY-CentOS-7-aarch64</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 rpm-gpg]<span class="comment"># cat RPM-GPG-KEY-CentOS-7</span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Version: GnuPG v1.4.5 (GNU/Linux)</span><br><span class="line"> </span><br><span class="line">mQINBFOn/0sBEADLDyZ+DQHkcTHDQSE0a0B2iYAEXwpPvs67cJ4tmhe/iMOyVMh9</span><br><span class="line">Yw/vBIF8scm6T/vPN5fopsKiW9UsAhGKg0epC6y5ed+NAUHTEa6pSOdo7CyFDwtn</span><br><span class="line">4HF61Esyb4gzPT6QiSr0zvdTtgYBRZjAEPFVu3Dio0oZ5UQZ7fzdZfeixMQ8VMTQ</span><br><span class="line">4y4x5vik9B+cqmGiq9AW71ixlDYVWasgR093fXiD9NLT4DTtK+KLGYNjJ8eMRqfZ</span><br><span class="line">Ws7g7C+9aEGHfsGZ/SxLOumx/GfiTloal0dnq8TC7XQ/JuNdB9qjoXzRF+faDUsj</span><br><span class="line">WuvNSQEqUXW1dzJjBvroEvgTdfCJfRpIgOrc256qvDMp1SxchMFltPlo5mbSMKu1</span><br><span class="line">x1p4UkAzx543meMlRXOgx2/hnBm6H6L0FsSyDS6P224yF+30eeODD4Ju4BCyQ0jO</span><br><span class="line">IpUxmUnApo/m0eRelI6TRl7jK6aGqSYUNhFBuFxSPKgKYBpFhVzRM63Jsvib82rY</span><br><span class="line">438q3sIOUdxZY6pvMOWRkdUVoz7WBExTdx5NtGX4kdW5QtcQHM+2kht6sBnJsvcB</span><br><span class="line">JYcYIwAUeA5vdRfwLKuZn6SgAUKdgeOtuf+cPR3/E68LZr784SlokiHLtQkfk98j</span><br><span class="line">NXm6fJjXwJvwiM2IiFyg8aUwEEDX5U+QOCA0wYrgUQ/h8iathvBJKSc9jQARAQAB</span><br><span class="line">tEJDZW50T1MtNyBLZXkgKENlbnRPUyA3IE9mZmljaWFsIFNpZ25pbmcgS2V5KSA8</span><br><span class="line">c2VjdXJpdHlAY2VudG9zLm9yZz6JAjUEEwECAB8FAlOn/0sCGwMGCwkIBwMCBBUC</span><br><span class="line">CAMDFgIBAh4BAheAAAoJECTGqKf0qA61TN0P/2730Th8cM+d1pEON7n0F1YiyxqG</span><br><span class="line">QzwpC2Fhr2UIsXpi/lWTXIG6AlRvrajjFhw9HktYjlF4oMG032SnI0XPdmrN29lL</span><br><span class="line">F+ee1ANdyvtkw4mMu2yQweVxU7Ku4oATPBvWRv+6pCQPTOMe5xPG0ZPjPGNiJ0xw</span><br><span class="line">4Ns+f5Q6Gqm927oHXpylUQEmuHKsCp3dK/kZaxJOXsmq6syY1gbrLj2Anq0iWWP4</span><br><span class="line">Tq8WMktUrTcc+zQ2pFR7ovEihK0Rvhmk6/N4+4JwAGijfhejxwNX8T6PCuYs5Jiv</span><br><span class="line">hQvsI9FdIIlTP4XhFZ4N9ndnEwA4AH7tNBsmB3HEbLqUSmu2Rr8hGiT2Plc4Y9AO</span><br><span class="line">aliW1kOMsZFYrX39krfRk2n2NXvieQJ/lw318gSGR67uckkz2ZekbCEpj/0mnHWD</span><br><span class="line">3R6V7m95R6UYqjcw++Q5CtZ2tzmxomZTf42IGIKBbSVmIS75WY+cBULUx3PcZYHD</span><br><span class="line">ZqAbB0Dl4MbdEH61kOI8EbN/TLl1i077r+9LXR1mOnlC3GLD03+XfY8eEBQf7137</span><br><span class="line">YSMiW5r/5xwQk7xEcKlbZdmUJp3ZDTQBXT06vavvp3jlkqqH9QOE8ViZZ6aKQLqv</span><br><span class="line">pL+4bs52jzuGwTMT7gOR5MzD+vT0fVS7Xm8MjOxvZgbHsAgzyFGlI1ggUQmU7lu3</span><br><span class="line">uPNL0eRx4S1G4Jn5</span><br><span class="line">=OGYX</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 rpm-gpg]<span class="comment"># cat RPM-GPG-KEY-CentOS-7-aarch64 </span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Version: GnuPG v2.0.22 (GNU/Linux)</span><br><span class="line"> </span><br><span class="line">mQENBFW3h2gBCADPM3WDbdHNnMAB0FPvVRIBjGpkpeWT5rsbMZbk35tCx7MbAhMk</span><br><span class="line">zcN519xw7DGVLigFd68S3W2Lrde6ioyVQ1SVSJ7z84U4uYUfSa858Dskxxy021Ip</span><br><span class="line">NrocTrziy773v1gCPwA5xeT89bgzsMVMzCSy0U7TeqMDhN2urEMG5CCEpy0K9XZv</span><br><span class="line">bpUexhn7TbP10g5BzC9igd498QcW/69Oz5OK7WcZOtqmGn78pGBCH2ly+IqIV6ZS</span><br><span class="line">9yXC6jOmOnA8fM0gKJAelhQALd77cULMSGbu96ReG3BEFlgWQjbtZG3L5BvMVInw</span><br><span class="line">MkUQEntHvjp6oHtPiIAc3VtLq0IxWVygFHNRABEBAAG0cENlbnRPUyBBbHRBcmNo</span><br><span class="line">IFNJRyAtIEFBcmNoNjQgKGh0dHA6Ly93aWtpLmNlbnRvcy5vcmcvU3BlY2lhbElu</span><br><span class="line">dGVyZXN0R3JvdXAvQWx0QXJjaC9BQXJjaDY0KSA8c2VjdXJpdHlAY2VudG9zLm9y</span><br><span class="line">Zz6JATkEEwECACMFAlW3h2gCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAK</span><br><span class="line">CRBsfLbvMF1J1pSFCACQbLvjwCFdgr0DpVJZ0o50Dcl8jYzZtd/NZOBNYXi/TQza</span><br><span class="line">c6DFhiAj72zkgOGb+xznUXJJIiOLCgyJBUdJQSRx/EfVb9ftd4kSOA/wErOhDV71</span><br><span class="line">Hyww9M/gz82SjHF9qq8ofDto6ZfJMfiLX4aZwR39jZzS5Gm+bH5FfgxlwG0V88fu</span><br><span class="line">aKlzsn3p975uD659tSKae4xLysxkBG6oDaXvnWI2/UGC724gN+R3aKe9kI0wk8wA</span><br><span class="line">h5Qzf7+jRk0qb859rryno1rBpuzxJcwg5qvN2PXG3xDFOHG+3LX3mV3UnVAqCjHO</span><br><span class="line">zyGnzAAiNfBwgMyu6bu4lXd4hbZKy73RwnouQkuA</span><br><span class="line">=qiwp</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure><h2 id="五、运行yum生成缓存"><a href="#五、运行yum生成缓存" class="headerlink" title="五、运行yum生成缓存"></a>五、运行yum生成缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 ~]<span class="comment">#  yum makecache</span></span><br><span class="line"></span><br><span class="line">[root@node-01 ~]<span class="comment"># rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7-aarch64</span></span><br><span class="line"></span><br><span class="line">[root@node-01 ~]<span class="comment"># rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、验证"><a href="#六、验证" class="headerlink" title="六、验证"></a>六、验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@node-01 ~]<span class="comment"># yum -y install gcc-c++</span></span><br><span class="line"></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package gcc-c++.aarch64 0:4.8.5-36.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: libstdc++-devel = 4.8.5-36.el7 <span class="keyword">for</span> package: gcc-c++-4.8.5-36.el7.aarch64</span><br><span class="line">--&gt; Processing Dependency: libstdc++ = 4.8.5-36.el7 <span class="keyword">for</span> package: gcc-c++-4.8.5-36.el7.aarch64</span><br><span class="line">--&gt; Processing Dependency: gcc = 4.8.5-36.el7 <span class="keyword">for</span> package: gcc-c++-4.8.5-36.el7.aarch64</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Installed:</span><br><span class="line">  gcc-c++.aarch64 0:4.8.5-36.el7                                                                                                       </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  cpp.aarch64 0:4.8.5-36.el7    gcc.aarch64 0:4.8.5-36.el7    libmpc.aarch64 0:1.0.1-3.el7    libstdc++-devel.aarch64 0:4.8.5-36.el7   </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  libgcc.aarch64 0:4.8.5-36.el7              libgomp.aarch64 0:4.8.5-36.el7              libstdc++.aarch64 0:4.8.5-36.el7             </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;centos 7 aarch64系统yum替换阿里源&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>安装7.3.0版本gcc</title>
    <link href="https://yesir.github.io/2022/05/17/%E5%AE%89%E8%A3%857-3-0%E7%89%88%E6%9C%ACgcc/"/>
    <id>https://yesir.github.io/2022/05/17/%E5%AE%89%E8%A3%857-3-0%E7%89%88%E6%9C%ACgcc/</id>
    <published>2022-05-17T07:34:15.000Z</published>
    <updated>2022-05-17T07:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装7.3.0版本gcc</p><span id="more"></span><p>以下步骤请在root用户下执行。</p><ol><li><p>下载gcc-7.3.0.tar.gz，下载地址为<a href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz%E3%80%82">https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz。</a></p></li><li><p>安装gcc时候会占用大量临时空间，所以先执行下面的命令清空/tmp目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /tmp/*</span><br></pre></td></tr></table></figure></li><li><p>安装依赖（以CentOS和Ubuntu系统为例）。</p><ul><li><p>CentOS执行如下命令安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bzip2    </span><br></pre></td></tr></table></figure></li><li><p>Ubuntu执行如下命令安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install bzip2    </span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译安装gcc。</p><ol><li><p>进入gcc-7.3.0.tar.gz源码包所在目录，解压源码包，命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf gcc-7.3.0.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入解压后的文件夹，执行如下命令下载gcc依赖包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd gcc-7.3.0</span><br><span class="line">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure><p>如果执行上述命令报错，需要执行如下命令在“gcc-7.3.0/”文件夹下下载依赖包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2</span><br><span class="line">wget http://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2</span><br><span class="line">wget http://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz</span><br><span class="line">wget http://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2</span><br></pre></td></tr></table></figure><p>下载好上述依赖包后，重新执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure><p>如果上述命令校验失败，需要确保依赖包为一次性下载成功，无重复下载现象。</p></li><li><p>执行配置、编译和安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=/usr/local/gcc7.3.0</span><br><span class="line">   make -j15    # 通过grep -w processor /proc/cpuinfo|wc -l查看cpu数，示例为15，用户可自行设置相应参数。</span><br><span class="line">   make install    </span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>其中<strong>“–prefix”</strong>参数用于指定gcc7.3.0安装路径，用户可自行配置，但注意不要配置为“/usr/local”及“/usr”，因为会与系统使用软件源默认安装的gcc相冲突，导致系统原始gcc编译环境被破坏。示例指定为“/usr/local/gcc7.3.0”。</p></li></ol></li><li><p>配置环境变量（请在实际需要时再进行配置）。</p><p>例如用户在启动在线推理或训练进程前需执行如下命令配置环境变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/usr/local/gcc7.3.0/lib64:$&#123;LD_LIBRARY_PATH&#125;</span><br></pre></td></tr></table></figure><p>其中“/usr/local/gcc7.3.0”为<a href="https://support.huaweicloud.com/instg-cli-cann504-alpha001/atlasdeploy_03_0066.html#ZH-CN_TOPIC_0000001217515685__zh-cn_topic_0000001185372047_zh-cn_topic_0000001079598586_li08961810135613">4.c</a>中配置的gcc7.3.0安装路径，请根据实际情况替换。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;安装7.3.0版本gcc&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Linux popen实例</title>
    <link href="https://yesir.github.io/2022/03/29/Linux-popen%E5%AE%9E%E4%BE%8B/"/>
    <id>https://yesir.github.io/2022/03/29/Linux-popen%E5%AE%9E%E4%BE%8B/</id>
    <published>2022-03-29T11:12:45.000Z</published>
    <updated>2022-03-29T11:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中使用<code>popen</code>获取命令执行结果</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> IN</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> OUT</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> BUFSIZE 4096</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> <span class="title function_">getExecResult</span><span class="params">(IN <span class="type">char</span>* cmd, OUT <span class="type">char</span>* res)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">char</span> buf[BUFSIZE];</span><br><span class="line">     FILE* fp;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span>(<span class="literal">NULL</span> == (fp = popen(cmd, <span class="string">&quot;r&quot;</span>)))&#123;</span><br><span class="line">         <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;execute command failed: %s&quot;</span>,strerror(errno));</span><br><span class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 获取执行结果</span></span><br><span class="line">     <span class="keyword">while</span>(<span class="literal">NULL</span> != fgets(buf, <span class="keyword">sizeof</span>(buf), fp))&#123;</span><br><span class="line">       <span class="built_in">strcat</span>(res, buf);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">char</span>* cmd = <span class="string">&quot;ls -l ..&quot;</span>;</span><br><span class="line">     <span class="type">char</span> buf[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> </span><br><span class="line">     getExecResult(cmd, buf);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;res: %s\n&quot;</span>, buf);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux中使用&lt;code&gt;popen&lt;/code&gt;获取命令执行结果&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>windows下获取cpuid</title>
    <link href="https://yesir.github.io/2022/03/07/windows%E4%B8%8B%E8%8E%B7%E5%8F%96cpuid/"/>
    <id>https://yesir.github.io/2022/03/07/windows%E4%B8%8B%E8%8E%B7%E5%8F%96cpuid/</id>
    <published>2022-03-07T13:20:15.000Z</published>
    <updated>2022-03-07T13:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先是区分64位与32位系统，在windows系统中通常都包括<code>_win32</code>此宏，因此通常用此宏来判断操作系统平台，如win、linux、mac等</p><span id="more"></span><p>因此不能用<code>_win64</code>宏来判断系统是32位还是64位，32位系统中不包含此宏。</p><p>由于在64位系统中使用<code>__asm</code> 执行汇编指令较麻烦，所以通常使用<code>__cpuid</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getCpuId</span><span class="params">(<span class="type">char</span>* cpuId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> s1, s2, s3, s4;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _WIN64  <span class="comment">// 如果是32位系统</span></span></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, <span class="number">00</span>h</span><br><span class="line">            <span class="keyword">xor</span> edx, edx</span><br><span class="line">            cpuid</span><br><span class="line">            mov s1, edx</span><br><span class="line">            mov s2, eax</span><br><span class="line">    &#125;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, <span class="number">01</span>h</span><br><span class="line">            <span class="keyword">xor</span> ecx, ecx</span><br><span class="line">            <span class="keyword">xor</span> edx, edx</span><br><span class="line">            cpuid</span><br><span class="line">            mov s3, edx</span><br><span class="line">            mov s4, ecx</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    INT32 dwBuf[<span class="number">4</span>];</span><br><span class="line">    __cpuid(dwBuf, <span class="number">0</span>);</span><br><span class="line">    s1 = dwBuf[<span class="number">1</span>];</span><br><span class="line">    s2 = dwBuf[<span class="number">3</span>];</span><br><span class="line">    s3 = dwBuf[<span class="number">2</span>];</span><br><span class="line">    s4 = dwBuf[<span class="number">0</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">sprintf</span>(cpuId, <span class="string">&quot;%X%X%X%X&quot;</span>, s1, s2, s3, s4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先是区分64位与32位系统，在windows系统中通常都包括&lt;code&gt;_win32&lt;/code&gt;此宏，因此通常用此宏来判断操作系统平台，如win、linux、mac等&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>win10下vs2010编译64位qt4.8.7</title>
    <link href="https://yesir.github.io/2022/02/10/win10%E4%B8%8Bvs2010%E7%BC%96%E8%AF%9164%E4%BD%8Dqt4-8-7/"/>
    <id>https://yesir.github.io/2022/02/10/win10%E4%B8%8Bvs2010%E7%BC%96%E8%AF%9164%E4%BD%8Dqt4-8-7/</id>
    <published>2022-02-10T11:05:30.000Z</published>
    <updated>2022-02-10T11:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>win10下使用vs2010编译64位qt-4.8.7</p><span id="more"></span><ul><li><p>首先下载源码版<code>qt-4.8.7</code></p><p><a href="http://download.qt.io/archive/qt/4.8/4.8.7/">下载地址</a></p></li><li><p>第二步安装<code>perl</code>,建议安装<code>ActivePerl</code>,可以下载5以上的版本</p><p><a href="http://www.perl.org/get.html">下载地址</a></p></li><li><p>第三步配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QTDIR=path\qt-everywhere-opensource-src-4.8.7</span><br><span class="line">QMAKESPEC=win32-msvc2010</span><br><span class="line">将path\qt-everywhere-opensource-src-4.8.7\bin 添加到PATH</span><br></pre></td></tr></table></figure></li><li><p>第四步使用vs2010自带的x64命令行工具进行configure</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先找到</span></span><br><span class="line">Microsoft Visual Studio 2010 -&gt; Visual Studio Tools -&gt; Visual Studio X64 Command Prompt</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到源码目录</span></span><br><span class="line"><span class="built_in">cd</span> path\qt-everywhere-opensource-src-4.8.7</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后执行</span></span><br><span class="line">configure -debug-and-release -opensource -platform win32-msvc2010</span><br></pre></td></tr></table></figure></li><li><p>第五步用vs2010打开<code>project.sln</code>,然后编译整个项目</p><p>编译时会遇到一些错误参考<a href="https://blog.csdn.net/ys404845560/article/details/104280905">win10下vs2010编译64位qt4.8.7_小杨的专栏-CSDN博客</a></p></li></ul><p>重要的是以下错误处理</p><p>根据vs2010红线提示功能，你会发现TEST_SOURCE_DIR提示有问题。鼠标放在所有变量，会提示一个路径。实际上这个路径就是qwebpage/qwebview/qwebframe的源码路径。TEST_SOURCE_DIR宏在这里无法识别，所以，只要在每一个出问题源文件人工定义该宏值，就可以handle这个bug。我电脑的该路径为E:\qt4\src\3rdparty\webkit\Source\WebKit\qt\tests\</p><p>在对应cpp文件定义下面加入宏定义为：</p><p>#define TESTS_SOURCE_DIR “E:/qt4/src/3rdparty/webkit/Source/WebKit/qt/tests/“</p><p>问题三：</p><p>错误 234 error LNK2019: 无法解析的外部符号 <em>HBeginPaint，该符号在函数 “private: static struct HDC</em>_ * <strong>cdecl WebCore::PluginView::hookedBeginPaint(struct HWND</strong> *,struct tagPAINTSTRUCT *)” (?hookedBeginPaint@PluginView@WebCore@@CAPEAUHDC__@@PEAUHWND__@@PEAUtagPAINTSTRUCT@@@Z) 中被引用 E:\Libraries\qt4\src\3rdparty\webkit\Source\WebKit\qt\webcore.lib(PluginViewWin.obj) QtWebKit</p><p>错误 235 error LNK2019: 无法解析的外部符号 <em>HEndPaint，该符号在函数 “private: static int <strong>cdecl WebCore::PluginView::hookedEndPaint(struct HWND</strong> *,struct tagPAINTSTRUCT const *)” (?hookedEndPaint@PluginView@WebCore@@CAHPEAUHWND</em>_@@PEBUtagPAINTSTRUCT@@@Z) 中被引用 E:\Libraries\qt4\src\3rdparty\webkit\Source\WebKit\qt\webcore.lib(PluginViewWin.obj) QtWebKit</p><p>1.选中webcore这个工程，右键—》添加—-》现有项，将PaintHooks.asm加入到工程当中，在Source Files分类中，可以找到这个文件。</p><p>2.选中webcore这个工程，右键—》生成自定义—-》勾选“masm（.targets .props）”选项—》确定</p><p>3.在Source Files分类中，可以找到PaintHooks.asm，选中，右键—》属性–》在“常规”选项卡中，对“项类型”选择“Microsoft Macro assembler”–》确定。4.选中PaintHooks.asm，右键—-》编译，</p><p>4.在.\src\3rdparty\webkit\Source\WebCore\tmp\obj\release_shared目录下，就会生成PaintHooks.obj二进制文件，这个文件就可以被c++代码直接调用，具体调用回到前面所述c++调用汇编函数代码。</p><p>5.生成工程。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;win10下使用vs2010编译64位qt-4.8.7&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++回调函数使用的问题</title>
    <link href="https://yesir.github.io/2022/01/25/C-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://yesir.github.io/2022/01/25/C-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-25T11:26:30.000Z</published>
    <updated>2022-01-26T10:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++回调函数将this指针转换成long类型引发的致命错误,在vs2010使用正常</p><span id="more"></span><p>在32位windows系统中this指针和long都只占用4字节，在64位windows系统，使用vs2013时，long占用4字节，this指针占8字节因此不能相互转换</p><p>定义了一个回调方法</p><p><code>typedef void (__stdcall* MyCallBack )(int cardIndex , long userData );</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">typedef</span><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MyCallBack  m_CallBackFn; <span class="comment">// 回调函数 </span></span><br><span class="line"><span class="type">long</span>  m_UserData;        <span class="comment">// 用户数据 </span></span><br><span class="line">&#125;Record_Pro; </span><br></pre></td></tr></table></figure><p>在使用类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">static</span> A a;</span><br><span class="line">            <span class="keyword">return</span> &amp;a;</span><br><span class="line">        &#125;</span><br><span class="line">    ~<span class="built_in">A</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">setRecordPro</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            Record_Pro recordPro;</span><br><span class="line">            <span class="built_in">ZeroMemory</span>(&amp;Record_Pro,<span class="built_in">sizeof</span>(Record_Pro) );</span><br><span class="line">            recordPro.m_CallBackFn = outCallBack;</span><br><span class="line">            recordPro.m_UserData = <span class="built_in">long</span>(<span class="keyword">this</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> __stdcall <span class="title">outCallBack</span><span class="params">(<span class="type">int</span> cardIndex,<span class="type">long</span> userData)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_nCount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::outCallBack</span><span class="params">(<span class="type">int</span> cardIndex , <span class="type">long</span> userData )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* pA = (A*)userData;</span><br><span class="line"><span class="keyword">if</span>(pA)</span><br><span class="line">&#123;</span><br><span class="line">pA-&gt;m_nCount = cardIndex;  <span class="comment">// 当这样使用的时候，在vs2013版本直接崩溃，查看堆栈发现在pA地址跟创建A实例是一致，但确使用不了A的任何成员</span></span><br><span class="line">        <span class="comment">// 将回调方法userData参数类型改为void*，使用就没有问题了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++回调函数将this指针转换成long类型引发的致命错误,在vs2010使用正常&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++ libcurl的使用</title>
    <link href="https://yesir.github.io/2022/01/21/C-libcurl%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yesir.github.io/2022/01/21/C-libcurl%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-21T11:03:31.000Z</published>
    <updated>2022-11-16T06:17:03.701Z</updated>
    
    <content type="html"><![CDATA[<p><code>libcurl</code>简单示例</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// httpclient.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __HTTP_CLIENT_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HTTP_CLIENT_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CHttpClient</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    CHttpClient(<span class="type">void</span>);</span><br><span class="line">    ~CHttpClient(<span class="type">void</span>);</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">HttpPost</span><span class="params">(<span class="type">const</span> <span class="built_in">string</span>&amp; strUrl, <span class="type">const</span> <span class="built_in">string</span>&amp; strPost, <span class="built_in">string</span>&amp; strResponse)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">HttpGet</span><span class="params">(<span class="type">const</span> <span class="built_in">string</span>&amp; strUrl, <span class="built_in">string</span>&amp; strResponse)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">HttpPostWithJson</span><span class="params">(<span class="type">const</span> <span class="built_in">string</span>&amp; strUrl, <span class="type">const</span> <span class="built_in">string</span>&amp; strPost, <span class="built_in">string</span>&amp; strResponse)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">HttpsPost</span><span class="params">(<span class="type">const</span> <span class="built_in">string</span>&amp; strUrl, <span class="type">const</span> <span class="built_in">string</span>&amp; strPost, <span class="built_in">string</span>&amp; strResponse, <span class="type">const</span> <span class="built_in">string</span>&amp; strCaPath)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">HttpPostWithJson</span><span class="params">(<span class="type">const</span> <span class="built_in">string</span>&amp; strUrl, <span class="type">const</span> <span class="built_in">string</span>&amp; strPost, <span class="built_in">string</span>&amp; strResponse, <span class="type">const</span> <span class="built_in">string</span>&amp; strCaPath)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// httpclient.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;httpclient.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">CHttpClient::<span class="built_in">CHttpClient</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CHttpClient::~<span class="built_in">CHttpClient</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">size_t</span> <span class="title">OnWriteData</span><span class="params">(<span class="type">void</span>* buffer, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, <span class="type">void</span>* lpVoid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string* str = <span class="built_in">dynamic_cast</span>&lt;string*&gt;((string *)lpVoid);</span><br><span class="line">    <span class="keyword">if</span>( <span class="literal">NULL</span> == str || <span class="literal">NULL</span> == buffer )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* pData = (<span class="type">char</span>*)buffer;</span><br><span class="line">    str-&gt;<span class="built_in">append</span>(pData, size * nmemb);</span><br><span class="line">    <span class="keyword">return</span> nmemb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CHttpClient::HttpPost</span><span class="params">(<span class="type">const</span> string&amp; strUrl, <span class="type">const</span> string&amp; strPost, string&amp; strResponse)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CURLcode res;</span><br><span class="line">    CURL* curl = <span class="built_in">curl_easy_init</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == curl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> CURLE_FAILED_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_URL, strUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_FORBID_REUSE, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POSTFIELDS, strPost.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_READFUNCTION, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEFUNCTION, OnWriteData);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEDATA, (<span class="type">void</span> *)&amp;strResponse);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_NOSIGNAL, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CONNECTTIMEOUT, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_TIMEOUT, <span class="number">3</span>);</span><br><span class="line">    res = <span class="built_in">curl_easy_perform</span>(curl);</span><br><span class="line">    <span class="built_in">curl_easy_cleanup</span>(curl);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CHttpClient::HttpGet</span><span class="params">(<span class="type">const</span> string&amp; strUrl, string&amp; strResponse)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CURLcode res;</span><br><span class="line">    CURL* curl = <span class="built_in">curl_easy_init</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == curl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> CURLE_FAILED_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_URL, strUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_READFUNCTION, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_FORBID_REUSE, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEFUNCTION, OnWriteData);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEDATA, (<span class="type">void</span> *)&amp;strResponse);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_NOSIGNAL, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CONNECTTIMEOUT, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_TIMEOUT, <span class="number">3</span>);</span><br><span class="line">    res = <span class="built_in">curl_easy_perform</span>(curl);</span><br><span class="line">    <span class="built_in">curl_easy_cleanup</span>(curl);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CHttpClient::HttpPostWithJson</span><span class="params">(<span class="type">const</span> string&amp; strUrl, <span class="type">const</span> string&amp; strPost, string&amp; strResponse)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CURLcode res;</span><br><span class="line">CURL* curl = <span class="built_in">curl_easy_init</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == curl)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> CURLE_FAILED_INIT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_URL, strUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_FORBID_REUSE, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">curl_slist</span> *plist = <span class="literal">NULL</span>;</span><br><span class="line">plist = <span class="built_in">curl_slist_append</span>(plist,<span class="string">&quot;Content-Type:application/json;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_HTTPHEADER, plist);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POSTFIELDS, strPost.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_READFUNCTION, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEFUNCTION, OnWriteData);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEDATA, (<span class="type">void</span> *)&amp;strResponse);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_NOSIGNAL, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CONNECTTIMEOUT, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_TIMEOUT, <span class="number">3</span>);</span><br><span class="line">    res = <span class="built_in">curl_easy_perform</span>(curl);</span><br><span class="line">    <span class="built_in">curl_easy_cleanup</span>(curl);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CHttpClient::HttpsPost</span><span class="params">(<span class="type">const</span> string&amp; strUrl, <span class="type">const</span> string&amp; strPost, string&amp; strResponse, <span class="type">const</span> string&amp; strCaPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CURLcode res;</span><br><span class="line">CURL* curl = <span class="built_in">curl_easy_init</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == curl)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> CURLE_FAILED_INIT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_URL, strUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_FORBID_REUSE, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POSTFIELDS, strPost.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_READFUNCTION, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEFUNCTION, OnWriteData);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEDATA, (<span class="type">void</span> *)strResponse);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_NOSIGNAL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 指定证书为空，则以http的方式发起请求</span></span><br><span class="line"><span class="keyword">if</span>(strCaPath.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_SSL_VERIFYHOST, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_SSL_VERIFYPEER, <span class="number">1</span>);</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CAINFO, strCaPath.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CONNECTTIMEOUT, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_TIMEOUT, <span class="number">3</span>);</span><br><span class="line">res = <span class="built_in">curl_easy_perform</span>(curl);</span><br><span class="line"><span class="built_in">curl_easy_cleanup</span>(curl);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CHttpClient::HttpPostWithJson</span><span class="params">(<span class="type">const</span> string&amp; strUrl, <span class="type">const</span> string&amp; strPost, string&amp; strResponse, <span class="type">const</span> string&amp; strCaPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CURLcode res;</span><br><span class="line">CURL* curl = <span class="built_in">curl_easy_init</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == curl)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> CURLE_FAILED_INIT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_URL, strUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_FORBID_REUSE, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">curl_slist</span> *plist = <span class="literal">NULL</span>;</span><br><span class="line">plist = <span class="built_in">curl_slist_append</span>(plist,<span class="string">&quot;Content-Type:application/json;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_HTTPHEADER, plist);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_POSTFIELDS, strPost.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_READFUNCTION, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEFUNCTION, OnWriteData);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_WRITEDATA, (<span class="type">void</span> *)strResponse);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_NOSIGNAL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 指定证书为空，则以http的方式发起请求</span></span><br><span class="line"><span class="keyword">if</span>(strCaPath.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_SSL_VERIFYHOST, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_SSL_VERIFYPEER, <span class="number">1</span>);</span><br><span class="line"> <span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CAINFO, strCaPath.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_CONNECTTIMEOUT, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">curl_easy_setopt</span>(curl, CURLOPT_TIMEOUT, <span class="number">3</span>);</span><br><span class="line">res = <span class="built_in">curl_easy_perform</span>(curl);</span><br><span class="line"><span class="built_in">curl_easy_cleanup</span>(curl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;libcurl&lt;/code&gt;简单示例&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>汉明距离</title>
    <link href="https://yesir.github.io/2022/01/17/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
    <id>https://yesir.github.io/2022/01/17/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</id>
    <published>2022-01-17T10:48:09.000Z</published>
    <updated>2022-01-17T10:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Hamming distance</strong>  计算两个相同字符串之间对应位置不同字符的个数。</p><span id="more"></span><p>汉明距离是以理查德·卫斯里·汉明的名字命名的。在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数</p><p>汉明重量是字符串相对于同样长度的零字符串的汉明距离，也就是说，它是字符串中非零的元素个数：对于二进制字符串来说，就是 1 的个数，所以 11101 的汉明重量是 4。</p><p>汉明距离是以理查德·卫斯里·汉明的名字命名的，汉明在误差检测与校正码的基础性论文中首次引入这个概念。在通信中累计定长二进制字中发生翻转的错误数据位，所以它也被称为信号距离。</p><p>汉明距离更多的用于信号处理，表明一个信号变成另一个信号需要的最小操作（替换位），实际中就是比较两个比特串有多少个位不一样，简洁的操作时就是两个比特串进行异或之后包含1的个数。</p><p>汉明距离在图像处理领域也有着广泛的应用，是比较二进制图像非常有效的手段。计算一个数字的比特位包含1的个数有个小技巧：value &amp;= value - 1这个运算的结果就是把value最后一个1去掉，循环进行运算直到value等于0（所有的1都被去掉）就可以知道vaule拥有多少个1了。</p><p>其在包括信息论、编码理论、密码学等领域都有应用。但是，如果要比较两个不同长度的字符串，不仅要进行替换，而且要进行插入与删除的运算，在这种场合下，通常使用更加复杂的编辑距离等算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">版权声明：本文为CSDN博主「Yongqiang Cheng」的原创文章，遵循CC <span class="number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/chengyq116/article/details/113487493</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//============================================================================</span></span><br><span class="line"><span class="comment">// Name        : Hamming distance</span></span><br><span class="line"><span class="comment">// Author      : Yongqiang Cheng</span></span><br><span class="line"><span class="comment">// Version     : Version 1.0.0</span></span><br><span class="line"><span class="comment">// Copyright   : Copyright (c) 2019 Yongqiang Cheng</span></span><br><span class="line"><span class="comment">// Description : Hello World in C++, Ansi-style</span></span><br><span class="line"><span class="comment">//============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hamming_distance</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> dist = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> val = x ^ y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Count the number of bits set.</span></span><br><span class="line"><span class="keyword">while</span> (val != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// A bit is set, so increment the count and clear the bit.</span></span><br><span class="line">dist++;</span><br><span class="line"><span class="comment">// val &amp;= val - 1;</span></span><br><span class="line">val = val &amp; (val - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the number of differing bits.</span></span><br><span class="line"><span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> y = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dist = <span class="built_in">hamming_distance</span>(x, y);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dist = %d.\n&quot;</span>, dist);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Hamming distance&lt;/strong&gt;  计算两个相同字符串之间对应位置不同字符的个数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>opencv学习（一）</title>
    <link href="https://yesir.github.io/2022/01/11/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yesir.github.io/2022/01/11/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-01-11T10:55:51.000Z</published>
    <updated>2022-05-30T03:21:21.888Z</updated>
    
    <content type="html"><![CDATA[<p> 将内存中的图片转换成<code>cv::Mat</code>对象或<code>QImage</code>对象</p><span id="more"></span><p>unsigned char* to cv::Mat</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">mat</span><span class="params">(图片高度, 图片宽度, CV_8UC3)</span></span>;</span><br><span class="line"><span class="built_in">memcpy</span>(mat.data, <span class="type">unsigned</span> <span class="type">char</span>*, 图片大小);</span><br></pre></td></tr></table></figure><p>cv::Mat to unsigned char*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* = mat.data</span><br></pre></td></tr></table></figure><p>unsigned char* to QImage</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">image</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*, 图片高度, 图片宽度, 每行字节数(在cv::Mat中即mat.step), QImage::Format_RGB888)</span></span>;</span><br><span class="line">QPixmap pixmap = QPixmap::<span class="built_in">fromImage</span>(image);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 将内存中的图片转换成&lt;code&gt;cv::Mat&lt;/code&gt;对象或&lt;code&gt;QImage&lt;/code&gt;对象&lt;/p&gt;</summary>
    
    
    
    
    <category term="Opencv" scheme="https://yesir.github.io/tags/Opencv/"/>
    
  </entry>
  
  <entry>
    <title>Qt发送http请求</title>
    <link href="https://yesir.github.io/2021/12/29/Qt%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82/"/>
    <id>https://yesir.github.io/2021/12/29/Qt%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82/</id>
    <published>2021-12-29T11:01:42.000Z</published>
    <updated>2021-12-29T11:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<p> 使用<code>QNetworkAccessManager</code>,使用时在<code>.pro</code>文件添加<code>QT += network</code></p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> QHTTPREQUEST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QHTTPREQUEST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QNetworkReply&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QNetworkAccessManager</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QHttpRequest</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QHttpRequest</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">QHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">QGet</span><span class="params">(<span class="type">const</span> QString&amp; sUrl)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">QPost</span><span class="params">(<span class="type">const</span> QString&amp; sUrl,<span class="type">const</span> QString&amp; param)</span></span>;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendResposeResult</span><span class="params">(QByteArray)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">requesterror</span><span class="params">(<span class="type">int</span>,QByteArray)</span></span>;</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getreadyRead</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getRequestfinish</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postreadyRead</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postRequestfinish</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RequestError</span><span class="params">(QNetworkReply::NetworkError code)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QNetworkAccessManager*   _uploadManager;</span><br><span class="line">    QNetworkReply*           _reply;</span><br><span class="line">    QByteArray               m_strRead;</span><br><span class="line">    <span class="type">char</span>*                    m_buf;</span><br><span class="line">    <span class="type">bool</span>                     m_haserror;</span><br><span class="line">    QByteArray               m_strHeader;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//QHTTPREQUEST_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Qhttprequest.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QNetworkAccessManager&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDataStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDateTime&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QHttpRequest::<span class="built_in">QHttpRequest</span>(QObject *parent) :<span class="built_in">QObject</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    _uploadManager = <span class="keyword">new</span> <span class="built_in">QNetworkAccessManager</span>(<span class="keyword">this</span>);</span><br><span class="line">    m_buf = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QHttpRequest::~<span class="built_in">QHttpRequest</span>()</span><br><span class="line">&#123;</span><br><span class="line">    _uploadManager-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    <span class="keyword">if</span> (m_buf)</span><br><span class="line">        <span class="keyword">delete</span>[] m_buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::QGet</span><span class="params">(<span class="type">const</span> QString&amp; sUrl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNetworkRequest request;</span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(sUrl));</span><br><span class="line">    m_strRead.<span class="built_in">clear</span>();</span><br><span class="line">    m_strsaveFile.<span class="built_in">clear</span>();</span><br><span class="line">    m_haserror = <span class="literal">false</span>;</span><br><span class="line">    _reply = _uploadManager-&gt;<span class="built_in">get</span>(request);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(_reply,<span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">getreadyRead</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(_reply,<span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">getRequestfinish</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(_reply,<span class="built_in">SIGNAL</span>(<span class="built_in">error</span>(QNetworkReply::NetworkError)),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">RequestError</span>(QNetworkReply::NetworkError)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::QPost</span><span class="params">(<span class="type">const</span> QString&amp; sUrl,<span class="type">const</span> QString&amp; param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QByteArray postdata;</span><br><span class="line">    postdata.<span class="built_in">append</span>(param);</span><br><span class="line">    QNetworkRequest request;</span><br><span class="line">QSslConfiguration sconfig = QSslConfiguration::<span class="built_in">defaultConfiguration</span>();</span><br><span class="line">    sconfig.<span class="built_in">setPeerVerifyMode</span>(QSslSocket::VerifyNone);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (QT_VERSION &lt;= QT_VERSION_CHECK(5,0,0))</span></span><br><span class="line">    sconfig.<span class="built_in">setProtocol</span>(QSsl::TlsV1);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    sconfig.<span class="built_in">setProtocol</span>(QSsl::TlsV1_0);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line">    request.<span class="built_in">setSslConfiguration</span>(sconfig);</span><br><span class="line">    request.<span class="built_in">setHeader</span>(QNetworkRequest::ContentTypeHeader,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    request.<span class="built_in">setRawHeader</span>(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(sUrl));</span><br><span class="line">    m_strRead.<span class="built_in">clear</span>();</span><br><span class="line">    m_haserror = <span class="literal">false</span>;</span><br><span class="line">    _reply = _uploadManager-&gt;<span class="built_in">post</span>(request,postdata);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(_reply,<span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">postreadyRead</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(_reply,<span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">postRequestfinish</span>()));</span><br><span class="line">            <span class="built_in">connect</span>(_reply,<span class="built_in">SIGNAL</span>(<span class="built_in">error</span>(QNetworkReply::NetworkError)),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">RequestError</span>(QNetworkReply::NetworkError)));</span><br><span class="line">    <span class="keyword">if</span> (postdata.<span class="built_in">length</span>()&lt;<span class="number">300</span>)</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;PostRequest param&quot;</span>&lt;&lt;postdata.<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::getreadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNetworkReply* reply = <span class="built_in">static_cast</span>&lt;QNetworkReply*&gt;(<span class="built_in">sender</span>());</span><br><span class="line">    <span class="keyword">if</span>(reply)</span><br><span class="line">    &#123;</span><br><span class="line">        QByteArray recevieBt = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        m_strRead += recevieBt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::getRequestfinish</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNetworkReply* reply = <span class="built_in">static_cast</span>&lt;QNetworkReply*&gt;(<span class="built_in">sender</span>());</span><br><span class="line">    <span class="keyword">if</span>(reply &amp;&amp; !m_haserror)</span><br><span class="line">    &#123;</span><br><span class="line">        QByteArray recevieBt = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        &#123;</span><br><span class="line">            m_strRead += recevieBt;</span><br><span class="line">            <span class="keyword">if</span> (m_strHeader.<span class="built_in">length</span>()&gt;<span class="number">0</span> &amp;&amp; reply-&gt;<span class="built_in">hasRawHeader</span>(m_strHeader)) &#123;</span><br><span class="line">                m_strRead = reply-&gt;<span class="built_in">rawHeader</span>(m_strHeader);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function">emit <span class="title">sendResposeResult</span><span class="params">(m_strRead)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::postreadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNetworkReply* reply = <span class="built_in">static_cast</span>&lt;QNetworkReply*&gt;(<span class="built_in">sender</span>());</span><br><span class="line">    <span class="keyword">if</span>(reply)</span><br><span class="line">    &#123;</span><br><span class="line">        QByteArray recevieBt = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        m_strRead += recevieBt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::postRequestfinish</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNetworkReply* reply = <span class="built_in">static_cast</span>&lt;QNetworkReply*&gt;(<span class="built_in">sender</span>());</span><br><span class="line">    <span class="keyword">if</span>(reply &amp;&amp; !m_haserror)</span><br><span class="line">    &#123;</span><br><span class="line">        QByteArray recevieBt = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        m_strRead += recevieBt;</span><br><span class="line">        reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">        <span class="function">emit <span class="title">sendResposeResult</span><span class="params">(m_strRead)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QHttpRequest::RequestError</span><span class="params">(QNetworkReply::NetworkError code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_haserror = <span class="literal">true</span>;</span><br><span class="line">    QNetworkReply* reply = <span class="built_in">static_cast</span>&lt;QNetworkReply*&gt;(<span class="built_in">sender</span>());</span><br><span class="line">    <span class="keyword">if</span>(reply)</span><br><span class="line">    &#123;</span><br><span class="line">        QByteArray strerror = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        <span class="keyword">if</span> (strerror.<span class="built_in">isEmpty</span>())</span><br><span class="line">            strerror = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        <span class="function">emit <span class="title">requesterror</span><span class="params">(code,strerror)</span></span>;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;获取信息错误: &quot;</span> &lt;&lt; strerror &lt;&lt; <span class="string">&quot;errorno: &quot;</span></span><br><span class="line">                 &lt;&lt; code &lt;&lt; reply-&gt;<span class="built_in">url</span>().<span class="built_in">toString</span>();</span><br><span class="line">        reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 使用&lt;code&gt;QNetworkAccessManager&lt;/code&gt;,使用时在&lt;code&gt;.pro&lt;/code&gt;文件添加&lt;code&gt;QT += network&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>矩阵与向量相乘</title>
    <link href="https://yesir.github.io/2021/12/26/%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%90%91%E9%87%8F%E7%9B%B8%E4%B9%98/"/>
    <id>https://yesir.github.io/2021/12/26/%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%90%91%E9%87%8F%E7%9B%B8%E4%B9%98/</id>
    <published>2021-12-26T03:08:24.000Z</published>
    <updated>2021-12-27T10:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>矩阵与向量相乘</p><span id="more"></span><p><img src="https://pic3.zhimg.com/80/v2-1d69f32e2fa9352f01794fc21275a9e6_720w.jpg?source=1940ef5c"></p><p>1、矩阵与列向量相乘<br>$$<br>\begin{bmatrix}<br>6 \<br>7\<br>\end{bmatrix}</p><ul><li></li></ul><p>\begin{bmatrix}<br>6&amp;2 \<br>7&amp;5\<br>\end{bmatrix}</p><p>=<br>6<br>\begin{bmatrix}<br>6 \<br>7\<br>\end{bmatrix}</p><p>+</p><p>7<br>\begin{bmatrix}<br>2 \<br>5\<br>\end{bmatrix}</p><p>=<br>\begin{bmatrix}<br>6<em>6+2</em>7 \<br>6<em>7+7</em>5\<br>\end{bmatrix}<br>$$<br>2、矩阵与行向量相乘<br>$$<br>\begin{bmatrix}<br>6&amp;7\<br>\end{bmatrix}</p><p>*</p><p>\begin{bmatrix}<br>6&amp;2 \<br>7&amp;5\<br>\end{bmatrix}</p><p>= </p><p>6<br>\begin{bmatrix}<br>6&amp;2\<br>\end{bmatrix}<br>+<br>7<br>\begin{bmatrix}<br>7&amp;5\<br>\end{bmatrix}</p><p>=</p><p>\begin{bmatrix}<br>6<em>6+7</em>7&amp;6<em>2+6</em>5\<br>\end{bmatrix}<br>$$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;矩阵与向量相乘&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>制作rpm包</title>
    <link href="https://yesir.github.io/2021/12/24/%E5%88%B6%E4%BD%9Crpm%E5%8C%85/"/>
    <id>https://yesir.github.io/2021/12/24/%E5%88%B6%E4%BD%9Crpm%E5%8C%85/</id>
    <published>2021-12-24T10:47:59.000Z</published>
    <updated>2021-12-24T10:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>不编译源码，使用制作rpm包</p><span id="more"></span><p>使用工具<code>rpmbuild</code></p><p>centos安装</p><p><code>yum install rpm-build -y</code></p><p>首先创建xxx.spec 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">vim xxx.spec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 制作好后rpm包名</span></span><br><span class="line">Name: rpm-build-pkg</span><br><span class="line"><span class="comment"># rpm包版本</span></span><br><span class="line">Version: 0.0.1</span><br><span class="line"><span class="comment"># release基于该版本的软件包的发行版本号，如果上centos就用如下</span></span><br><span class="line">Release: 1.el7</span><br><span class="line"><span class="comment"># 简单介绍</span></span><br><span class="line">Summary: <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 开源协议</span></span><br><span class="line">License: GPL</span><br><span class="line"><span class="comment"># 包的类别 如Networking/Daemons等</span></span><br><span class="line">Group: Applications/System</span><br><span class="line"><span class="comment"># 打包员</span></span><br><span class="line">Vendor: none</span><br><span class="line"><span class="comment"># 系统架构，x86 arm</span></span><br><span class="line">Buildarch: noarch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述</span></span><br><span class="line">%description</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压源码包的方法，即编译前要做的事</span></span><br><span class="line">%prep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对源码进行编译的阶段</span></span><br><span class="line">%build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此阶段包含安装阶段需要执行的命令，但是实际在用户安装 RPM 包时不会执行此阶段的命令，仅在打包时执行,像我不从源码编译都不需要此阶段</span></span><br><span class="line">%install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在软件包安装之前执行</span></span><br><span class="line">%pre</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在软件包安装之后执行</span></span><br><span class="line">%post</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在软件包卸载之前执行</span></span><br><span class="line">%preun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在软件包卸载之后执行</span></span><br><span class="line">%postun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出了需要被打包的文件和目录，安装时会将/etc,/home,/usr下的文件拷贝到系统对应目录</span></span><br><span class="line"><span class="comment"># %defattr(&lt;文件权限&gt;, &lt;用户&gt;, &lt;用户组&gt;, &lt;目录权限&gt;) 设置默认文件权限 %defattr(-,root,root,-)，其中 “-” 表示默认权限。</span></span><br><span class="line">%files</span><br><span class="line">/etc/*</span><br><span class="line">/home/*</span><br><span class="line">/usr/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包版本之间的文档更改</span></span><br><span class="line">%changelog</span><br></pre></td></tr></table></figure><p>手动创建打包目录，结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tree rpmbuild/</span></span><br><span class="line">rpmbuild/</span><br><span class="line">├── BUILD</span><br><span class="line">├── BUILDROOT</span><br><span class="line">│   └── rpm-build-pkg-0.0.1-1.el7.x86_64</span><br><span class="line">│       ├── etc</span><br><span class="line">│       │   └── config</span><br><span class="line">│       ├── home</span><br><span class="line">│       └── usr</span><br><span class="line">│           └── share</span><br><span class="line">│               └── applications</span><br><span class="line">│                   └── electron-quick-start.desktop</span><br><span class="line">├── RPMS<span class="comment"># 制作包默认保存在此目录下</span></span><br><span class="line">│   └── noarch</span><br><span class="line">│       └── rpm-build-pkg-0.0.1-1.el7.noarch.rpm</span><br><span class="line">├── SOURCES</span><br><span class="line">├── SPECS</span><br><span class="line">└── SRPMS</span><br></pre></td></tr></table></figure><p>执行打包命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpmbuild -bb xxx.spec</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;不编译源码，使用制作rpm包&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中根据目标版本创建so链接</title>
    <link href="https://yesir.github.io/2021/12/21/%E5%9C%A8Linux%E4%B8%AD%E6%A0%B9%E6%8D%AE%E7%9B%AE%E6%A0%87%E7%89%88%E6%9C%AC%E5%88%9B%E5%BB%BAso%E9%93%BE%E6%8E%A5/"/>
    <id>https://yesir.github.io/2021/12/21/%E5%9C%A8Linux%E4%B8%AD%E6%A0%B9%E6%8D%AE%E7%9B%AE%E6%A0%87%E7%89%88%E6%9C%AC%E5%88%9B%E5%BB%BAso%E9%93%BE%E6%8E%A5/</id>
    <published>2021-12-21T10:52:47.000Z</published>
    <updated>2021-12-21T10:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p> 在程序中使用动态链接库时，目录通常是<code>*.so.1.2.3</code>类型，但是在我们的程序中往往使用<code>*.so</code>，这时候就需要用脚本来帮助创建链接文件</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">dirpath=`<span class="built_in">dirname</span> <span class="variable">$0</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dirpath</span></span><br><span class="line">basepath=<span class="variable">$PWD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建链接</span></span><br><span class="line"><span class="function"><span class="title">createLink</span></span>() &#123;</span><br><span class="line">  FILES=`<span class="built_in">ls</span> *.so<span class="variable">$1</span>`</span><br><span class="line">  <span class="keyword">for</span> FILE <span class="keyword">in</span> <span class="variable">$FILES</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    LINKFILE1=<span class="variable">$&#123;FILE%$2&#125;</span></span><br><span class="line">    LINKFILE2=<span class="variable">$&#123;FILE%$1&#125;</span></span><br><span class="line">    <span class="built_in">ln</span> -vsf <span class="variable">$&#123;FILE&#125;</span> <span class="variable">$&#123;LINKFILE1&#125;</span></span><br><span class="line">    <span class="built_in">ln</span> -vsf <span class="variable">$&#123;LINKFILE1&#125;</span> <span class="variable">$&#123;LINKFILE2&#125;</span></span><br><span class="line">    <span class="comment">#echo $&#123;FILE&#125; $&#123;LINKFILE1&#125;</span></span><br><span class="line">    <span class="comment">#echo $&#123;LINKFILE1&#125; $&#123;LINKFILE2&#125;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除链接</span></span><br><span class="line"><span class="function"><span class="title">deleteLink</span></span>() &#123;</span><br><span class="line">  FILES=`<span class="built_in">ls</span> *`</span><br><span class="line">  <span class="keyword">for</span> FILE <span class="keyword">in</span> <span class="variable">$FILES</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -h <span class="variable">$FILE</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">rm</span> -rvf <span class="variable">$FILE</span></span><br><span class="line">      <span class="comment">#echo $FILE</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  clean)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;clean link file&quot;</span></span><br><span class="line">    deleteLink</span><br><span class="line">  ;;</span><br><span class="line">  create|*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;create link file&quot;</span></span><br><span class="line">    createLink .1.2.0 .0</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 在程序中使用动态链接库时，目录通常是&lt;code&gt;*.so.1.2.3&lt;/code&gt;类型，但是在我们的程序中往往使用&lt;code&gt;*.so&lt;/code&gt;，这时候就需要用脚本来帮助创建链接文件&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>在QT中将qDebug()等输出到文件</title>
    <link href="https://yesir.github.io/2021/12/18/%E5%9C%A8QT%E4%B8%AD%E5%B0%86qDebug-%E7%AD%89%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/"/>
    <id>https://yesir.github.io/2021/12/18/%E5%9C%A8QT%E4%B8%AD%E5%B0%86qDebug-%E7%AD%89%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/</id>
    <published>2021-12-18T07:34:28.000Z</published>
    <updated>2021-12-18T07:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>qInstallMessageHandler</code> 安装之前已定义的消息处理程序，返回一个指向前一个消息处理程序,</p><p>调用<code>qInstallMessageHandler(0)</code>可以恢复消息处理程序</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 将程序中的qDebug()等 输出至指定文件 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">customMessageHandler</span><span class="params">(QtMsgType type, <span class="type">const</span> QMessageLogContext &amp;, <span class="type">const</span> QString &amp;msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString curtime = QDateTime::<span class="built_in">currentDateTime</span>().<span class="built_in">toString</span>(<span class="string">&quot;[hh:mm:ss,zzz]&quot;</span>);</span><br><span class="line">    QString txt;</span><br><span class="line">    <span class="keyword">switch</span>(type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> QtDebugMsg:</span><br><span class="line">        &#123;</span><br><span class="line">            txt = msg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> QtWarningMsg:</span><br><span class="line">        &#123;</span><br><span class="line">            txt = <span class="string">&quot;QtWarningMsg:&quot;</span>;</span><br><span class="line">            txt += msg;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> QtCriticalMsg:</span><br><span class="line">        &#123;</span><br><span class="line">            txt = <span class="string">&quot;QtCriticalMsg:&quot;</span>;</span><br><span class="line">            txt += msg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">case</span> QtFatalMsg:</span><br><span class="line">        &#123;</span><br><span class="line">            txt = <span class="string">&quot;QtFatalMsg:&quot;</span>;</span><br><span class="line">            txt += msg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> QtInfoMsg:</span><br><span class="line">        &#123;</span><br><span class="line">            txt = <span class="string">&quot;QtInfoMsg:&quot;</span>;</span><br><span class="line">            txt += msg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    QString strlogfile = YxApplication::<span class="built_in">getAppSettingDir</span>() + <span class="built_in">QString</span>(<span class="string">&quot;/log&quot;</span>);</span><br><span class="line">    QDir *logdir = <span class="keyword">new</span> QDir;</span><br><span class="line">    <span class="keyword">if</span> (!logdir-&gt;<span class="built_in">exists</span>(strlogfile))</span><br><span class="line">        logdir-&gt;<span class="built_in">mkdir</span>(strlogfile);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        QDir <span class="built_in">dir</span>(strlogfile);</span><br><span class="line">        <span class="comment">// 设置类型过滤器，只为文件格式</span></span><br><span class="line">        dir.<span class="built_in">setFilter</span>(QDir::Files | QDir::NoSymLinks);</span><br><span class="line">        QStringList filters;</span><br><span class="line">        filters&lt;&lt;<span class="built_in">QString</span>(<span class="string">&quot;*.log&quot;</span>);</span><br><span class="line">        dir.<span class="built_in">setNameFilters</span>(filters);</span><br><span class="line">        QStringList string_list;</span><br><span class="line"> <span class="keyword">for</span> (uint i=<span class="number">0</span>; i&lt;dir.<span class="built_in">count</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            QString file_path = strlogfile;</span><br><span class="line">            file_path += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">            <span class="comment">// 文件全路径</span></span><br><span class="line">            file_path += dir[i];</span><br><span class="line">            <span class="keyword">if</span> (file_path.<span class="built_in">indexOf</span>(<span class="string">&quot;logger_&quot;</span>) != <span class="number">-1</span>)</span><br><span class="line">                string_list.<span class="built_in">append</span>(file_path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;string_list.<span class="built_in">size</span>()<span class="number">-5</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            QFile::<span class="built_in">remove</span>(string_list[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> logdir;</span><br><span class="line">    logdir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (s_logfilename.<span class="built_in">isEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        QString strtime = QDateTime::<span class="built_in">currentDateTime</span>().<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd-hh-mm-ss&quot;</span>);</span><br><span class="line">        strtime += <span class="string">&quot;.log&quot;</span>;</span><br><span class="line">        strlogfile += <span class="string">&quot;/logger_&quot;</span>;</span><br><span class="line">        strlogfile += strtime;</span><br><span class="line">        s_logfilename = strlogfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s_sChromecextensionlogpath.<span class="built_in">length</span>()&gt;<span class="number">1</span>)</span><br><span class="line">        s_logfilename = s_sChromecextensionlogpath;</span><br><span class="line">    <span class="function">QFile <span class="title">outFile</span><span class="params">(s_logfilename)</span></span>;</span><br><span class="line">    outFile.<span class="built_in">open</span>(QIODevice::WriteOnly | QIODevice::Append);</span><br><span class="line">    <span class="function">QTextStream <span class="title">ts</span><span class="params">(&amp;outFile)</span></span>;</span><br><span class="line">    ts &lt;&lt; curtime &lt;&lt; txt  &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;qInstallMessageHandler&lt;/code&gt; 安装之前已定义的消息处理程序，返回一个指向前一个消息处理程序,&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;qInstallMessageHandler(0)&lt;/code&gt;可以恢复消息处理程序&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>在同一个进程中使用不同版本的opencv</title>
    <link href="https://yesir.github.io/2021/12/15/%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84opencv/"/>
    <id>https://yesir.github.io/2021/12/15/%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84opencv/</id>
    <published>2021-12-15T11:04:35.000Z</published>
    <updated>2021-12-16T10:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>封装好了2个动态库文件，都使用了<code>opencv</code>，但是<code>opencv</code>使用的版本确不相同</p><span id="more"></span><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1、确定好每个动态库的依赖的<code>opencv</code>, 将其中一套<code>opencv</code>链接成其它的名字加以区分</p><p>2、将低版本的<code>opencv</code>, 链接在高版本之前</p><h1 id="linux-dmidecode查看服务器硬件信息"><a href="#linux-dmidecode查看服务器硬件信息" class="headerlink" title="linux dmidecode查看服务器硬件信息"></a><code>linux dmidecode</code>查看服务器硬件信息</h1><p><code>linux</code>中<code>dmidecode</code>的作用是将<code>DMI</code>数据库中的信息解码，以可读的文本方式显示，该命令可以查询BIOS、系统、主板、处理器、内存、缓存等非常重要信息。由于<code>DMI</code>信息可以人为修改，因此里面的信息不一定是系统准确的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">参数</span><br><span class="line">-t   只显示指定条目的信息</span><br><span class="line"></span><br><span class="line">-s   只显示指定DMI字符串关键字的信息</span><br><span class="line"></span><br><span class="line">-d   从设备文件读信息，输出内容与不加参数标准输出相同</span><br><span class="line"></span><br><span class="line">-h   显示帮助信息</span><br><span class="line"></span><br><span class="line">-q   显示更少的简化信息</span><br><span class="line"></span><br><span class="line">-u   显示未解码的原始条目内容</span><br><span class="line"></span><br><span class="line">-V   显示版本信息</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"><span class="comment"># dmidecode | grep &#x27;Product Name&#x27;                    // 查看服务器型号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmidecode | grep &#x27;Serial Number&#x27;                   // 查看主板的序列号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmidecode -s system-serial-number                  // 查看系统序列号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmidecode -t memory                                // 查看内存信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmidecode -t 11                                    // 查看OEM信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmidecode | grep -A16 &quot;Memory Device&quot; | grep &quot;Size&quot; |sed &#x27;s/^[ \t]*//&#x27;  // 现有内存数量和内存大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dmidecode | grep &quot;Maximum Capacity&quot; |sed  &quot;s/^[ \t]*//&quot;                       // 最大支持内存容量：</span></span><br></pre></td></tr></table></figure><h2 id="查看摄像头信息"><a href="#查看摄像头信息" class="headerlink" title="查看摄像头信息"></a>查看摄像头信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsusb -v |grep -Ei <span class="string">&#x27;(idVendor|CAM)&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;封装好了2个动态库文件，都使用了&lt;code&gt;opencv&lt;/code&gt;，但是&lt;code&gt;opencv&lt;/code&gt;使用的版本确不相同&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://yesir.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
