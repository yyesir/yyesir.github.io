<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随笔</title>
  
  
  <link href="https://yesir.github.io/atom.xml" rel="self"/>
  
  <link href="https://yesir.github.io/"/>
  <updated>2023-04-03T01:27:38.579Z</updated>
  <id>https://yesir.github.io/</id>
  
  <author>
    <name>yesir</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在ubuntu上搭建arm64交叉编译环境</title>
    <link href="https://yesir.github.io/2023/04/03/%E5%9C%A8ubuntu%E4%B8%8A%E6%90%AD%E5%BB%BAarm64%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://yesir.github.io/2023/04/03/%E5%9C%A8ubuntu%E4%B8%8A%E6%90%AD%E5%BB%BAarm64%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</id>
    <published>2023-04-03T01:08:25.000Z</published>
    <updated>2023-04-03T01:27:38.579Z</updated>
    
    <content type="html"><![CDATA[<p>使用环境<code>Ubuntu 20.04.3 LTS</code>,并在系统先安装好<code>Qt</code>,<code>QT Creator</code>开发工具、以及<code>qemu</code>用来加载<code>arm64</code>镜像</p><span id="more"></span><ul><li>安装前准备<ol><li>智能终端OS的rootfs镜像，如：UOS-Smart-20-arm64-src.img</li><li>智能终端OS的qt开发环境及依赖包：qt_deb.tar.gz</li></ol></li></ul><ul><li><p>安装</p><ol><li><p>首先在<code>ubuntu</code>上新建一个空的img文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=UOS-Smart-20-arm64-new.img bs=1M count=7000</span><br><span class="line">sudo mkfs.ext4 UOS-Smart-20-arm64-new.img</span><br></pre></td></tr></table></figure></li><li><p>在<code>ubuntu</code>上新建2个空目录,分别将<code>UOS-Smart-20-arm64-src.img</code>和<code>UOS-Smart-20-arm64-new.img</code>挂载，并把前者的内容拷贝到后者里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -m 777 src new</span><br><span class="line">sudo mount UOS-Smart-20-arm64-src.img src</span><br><span class="line">sudo mount UOS-Smart-20-arm64-new.img new</span><br><span class="line">sudo <span class="built_in">cp</span> -rfp src/* new/</span><br><span class="line">sudo umount src</span><br></pre></td></tr></table></figure></li><li><p>如果已安装<code>qemu</code>工具，则直接拷贝文件，否则先安装，然后再拷贝所需文件到目标根文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-user-static    <span class="comment">#安装qemu</span></span><br><span class="line">sudo <span class="built_in">cp</span> /usr/bin/qemu-aarch64-static ./new/usr/bin/</span><br><span class="line">sudo <span class="built_in">cp</span> /usr/bin/qemu-arm-static ./new/usr/bin/</span><br><span class="line">sudo <span class="built_in">cp</span> ./new/etc/resolv.conf ./new/etc/resolv.conf.bak</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/resolv.conf ./new/etc/resolv.conf</span><br><span class="line">sudo <span class="built_in">cp</span> qt_deb.tar.gz ./new/home/</span><br></pre></td></tr></table></figure></li><li><p>重新挂载<code>/proc,/dev,/sys</code>节点，然后通过<code>chroot</code>到目标根文件系统中，就进入到了交叉编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t proc /proc ./new/proc</span><br><span class="line">sudo mount -t sysfs /sys ./new/sys</span><br><span class="line">sudo mount -o <span class="built_in">bind</span> /dev ./new/dev</span><br><span class="line">sudo <span class="built_in">chroot</span> ./new/</span><br></pre></td></tr></table></figure></li><li><p>在交叉编译环境中安装<code>qt_deb.tar.gz</code>中的所有<code>deb</code>包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar xzf /home/qt_deb.tar.gz</span><br><span class="line">sudo dpkg -i /home/qt_deb/*/deb</span><br></pre></td></tr></table></figure></li></ol></li><li><p>上述步骤安装完成之后，交叉编译环境就搭建完成了。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用环境&lt;code&gt;Ubuntu 20.04.3 LTS&lt;/code&gt;,并在系统先安装好&lt;code&gt;Qt&lt;/code&gt;,&lt;code&gt;QT Creator&lt;/code&gt;开发工具、以及&lt;code&gt;qemu&lt;/code&gt;用来加载&lt;code&gt;arm64&lt;/code&gt;镜像&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://yesir.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>C++命令模式</title>
    <link href="https://yesir.github.io/2023/03/31/C-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yesir.github.io/2023/03/31/C-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-03-31T01:32:36.000Z</published>
    <updated>2023-03-31T01:37:16.806Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式的核心在于引入了命令类，通过命令类来降低请求发送者和接收者的耦合度，请求发送者只需要指定一个命令对象，再通过命令对象来调用请求接收者的处理方法</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line">// 命令接口</span><br><span class="line">class Command </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void execute() = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 具体命令类1</span><br><span class="line">class ConcreteCommand1 : public Command </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="function"><span class="title">ConcreteCommand1</span></span>() &#123;&#125;</span><br><span class="line">    void execute() override </span><br><span class="line">&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;执行具体命令1&quot;</span> &lt;&lt; <span class="string">std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 具体命令类2</span></span><br><span class="line"><span class="string">class ConcreteCommand2 : public Command </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public:</span></span><br><span class="line"><span class="string">    ConcreteCommand2() &#123;&#125;</span></span><br><span class="line"><span class="string">    void execute() override </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        std</span>::cout &lt;&lt; <span class="string">&quot;执行具体命令2&quot;</span> &lt;&lt; <span class="string">std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 命令调用者</span></span><br><span class="line"><span class="string">class Invoker </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">private:</span></span><br><span class="line"><span class="string">    std</span>::vector&lt;Command*&gt; commands_;</span><br><span class="line">public:</span><br><span class="line">    void addCommand(Command* <span class="built_in">command</span>) </span><br><span class="line">&#123;</span><br><span class="line">        commands_.push_back(<span class="built_in">command</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    void <span class="function"><span class="title">executeCommands</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span> (auto <span class="built_in">command</span> : commands_) </span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">command</span>-&gt;execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 命令接收者</span><br><span class="line">class Receiver </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void <span class="function"><span class="title">action</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;执行命令接收者操作&quot;</span> &lt;&lt; <span class="string">std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 具体命令类3</span></span><br><span class="line"><span class="string">class ConcreteCommand3 : public Command </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">private:</span></span><br><span class="line"><span class="string">    Receiver* receiver_;</span></span><br><span class="line"><span class="string">public:</span></span><br><span class="line"><span class="string">    ConcreteCommand3(Receiver* receiver):receiver_(receiver)&#123;&#125;</span></span><br><span class="line"><span class="string">    void execute() override </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        receiver_-&gt;action();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int main(int argc, char* argv[]) </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Invoker invoker;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 添加具体命令1和2</span></span><br><span class="line"><span class="string">    Command* cmd1 = new ConcreteCommand1();</span></span><br><span class="line"><span class="string">    Command* cmd2 = new ConcreteCommand2();</span></span><br><span class="line"><span class="string">    invoker.addCommand(cmd1);</span></span><br><span class="line"><span class="string">    invoker.addCommand(cmd2);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 添加具体命令3</span></span><br><span class="line"><span class="string">    Receiver* receiver = new Receiver();</span></span><br><span class="line"><span class="string">    Command* cmd3 = new ConcreteCommand3(receiver);</span></span><br><span class="line"><span class="string">    invoker.addCommand(cmd3);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 执行所有命令</span></span><br><span class="line"><span class="string">    invoker.executeCommands();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 释放内存</span></span><br><span class="line"><span class="string">    delete cmd1;</span></span><br><span class="line"><span class="string">    delete cmd2;</span></span><br><span class="line"><span class="string">    delete cmd3;</span></span><br><span class="line"><span class="string">    delete receiver;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Command是命令接口，具有execute方法；</span><br><span class="line">ConcreteCommand1和ConcreteCommand2是具体命令类，实现了execute方法，分别对应不同的具体操作；</span><br><span class="line">Invoker是命令调用者，可以添加多个命令，并按顺序执行；</span><br><span class="line">Receiver是命令接收者，具有实际的操作方法；</span><br><span class="line">ConcreteCommand3是具体命令类，将命令接收者作为参数传递进去，在execute方法中调用接收者的操作方法。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行该程序会输出以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行具体命令1</span><br><span class="line">执行具体命令2</span><br><span class="line">执行命令接收者操作</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;命令模式的核心在于引入了命令类，通过命令类来降低请求发送者和接收者的耦合度，请求发送者只需要指定一个命令对象，再通过命令对象来调用请求接收者的处理方法&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>opencv学习（四）</title>
    <link href="https://yesir.github.io/2023/03/27/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://yesir.github.io/2023/03/27/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2023-03-27T02:47:13.000Z</published>
    <updated>2023-03-27T02:51:12.866Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV库打开摄像头并保存视频,只能保存为<code>avi</code>格式，最大保存文件大小为2Gb</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include &lt;opencv2/opencv.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace cv;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    VideoCapture <span class="built_in">cap</span>(0); // 打开默认的摄像头设备</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cap.isOpened()) // 检查是否成功打开</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无法打开摄像头&quot;</span> &lt;&lt; <span class="string">endl;</span></span><br><span class="line"><span class="string">        return -1;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    int frame_width = cap.get(CAP_PROP_FRAME_WIDTH);</span></span><br><span class="line"><span class="string">    int frame_height = cap.get(CAP_PROP_FRAME_HEIGHT);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Size frame_size(frame_width, frame_height);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    VideoWriter video(&quot;output.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 10, frame_size); //保存视频文件为output.avi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (!video.isOpened())</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; &quot;无法创建视频文件&quot; &lt;&lt; endl</span>;</span><br><span class="line">        <span class="built_in">return</span> -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat frame;</span><br><span class="line"></span><br><span class="line">        bool success = cap.read(frame); // 读取一帧图像</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!success) // 如果读取失败则退出循环</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        video.write(frame); // 写入视频文件</span><br><span class="line"></span><br><span class="line">        imshow(<span class="string">&quot;Camera&quot;</span>, frame); // 显示当前帧图像</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (waitKey(25) == 27) // 等待按键，如果按下ESC键则退出循环</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cap.release(); // 释放摄像头</span><br><span class="line">    video.release(); // 关闭视频文件</span><br><span class="line"></span><br><span class="line">    destroyAllWindows(); // 关闭所有窗口</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV库打开摄像头并保存视频,只能保存为&lt;code&gt;avi&lt;/code&gt;格式，最大保存文件大小为2Gb&lt;/p&gt;</summary>
    
    
    
    
    <category term="Opencv" scheme="https://yesir.github.io/tags/Opencv/"/>
    
  </entry>
  
  <entry>
    <title>用C++实现事件监听器</title>
    <link href="https://yesir.github.io/2023/03/16/%E7%94%A8C-%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>https://yesir.github.io/2023/03/16/%E7%94%A8C-%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2023-03-16T06:18:50.000Z</published>
    <updated>2023-03-16T06:26:35.337Z</updated>
    
    <content type="html"><![CDATA[<p>事件监听器是一种常见的设计模式，用于在对象之间建立一种松耦合的关系，当某个对象发生特定事件时，可以通知所有注册了该事件的监听器对象。</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;functional&gt;</span></span><br><span class="line"><span class="comment">#include &lt;mutex&gt;</span></span><br><span class="line"><span class="comment">#include &lt;thread&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">class EventListener &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ~<span class="function"><span class="title">EventListener</span></span>() &#123;&#125;</span><br><span class="line">    virtual void HandleEvent(int eventId) = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class EventSource &#123;</span><br><span class="line">public:</span><br><span class="line">    void RegisterListener(EventListener* listener) &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m_mutex);</span><br><span class="line">        m_listeners.push_back(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void UnregisterListener(EventListener* listener) &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m_mutex);</span><br><span class="line">        <span class="keyword">for</span> (auto it = m_listeners.begin(); it != m_listeners.end(); ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it == listener) &#123;</span><br><span class="line">                m_listeners.erase(it);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void NotifyListeners(int eventId) &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m_mutex);</span><br><span class="line">        <span class="keyword">for</span> (auto listener : m_listeners) &#123;</span><br><span class="line">            std::thread t(std::<span class="built_in">bind</span>(&amp;EventListener::HandleEvent, listener, eventId));</span><br><span class="line">            t.detach();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    std::vector&lt;EventListener*&gt; m_listeners;</span><br><span class="line">    std::mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MyListener : public EventListener &#123;</span><br><span class="line">public:</span><br><span class="line">    void HandleEvent(int eventId) override &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;MyListener: received event &quot;</span> &lt;&lt; <span class="string">eventId &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* argv[]) </span><br><span class="line">&#123;</span><br><span class="line">    EventSource <span class="built_in">source</span>;</span><br><span class="line">    MyListener listener1;</span><br><span class="line">    MyListener listener2;</span><br><span class="line"></span><br><span class="line">    source.RegisterListener(&amp;listener1);</span><br><span class="line">    source.RegisterListener(&amp;listener2);</span><br><span class="line"></span><br><span class="line">    source.NotifyListeners(1);</span><br><span class="line"></span><br><span class="line">    source.UnregisterListener(&amp;listener2);</span><br><span class="line"></span><br><span class="line">    source.NotifyListeners(2);</span><br><span class="line">    </span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventListener表示事件监听器抽象类，其中包含一个HandleEvent方法用于处理事件。<br>EventSource表示事件源，其中包含一个RegisterListener方法用于注册监听器、一个UnregisterListener方法用于注销监听器，<br>以及一个NotifyListeners方法用于通知所有注册的监听器。<br>在NotifyListeners方法中，我们使用std::thread创建了一个新线程，并在其中调用HandleEvent方法处理事件。</p><p>在main函数中，我们创建了一个EventSource对象和两个MyListener对象，并通过RegisterListener方法将它们注册到事件源中。<br>然后,我们通过NotifyListeners方法发送了一个事件1，并观察到两个监听器都收到了事件。<br>接着，我们通过UnregisterListener方法将一个监听器注销掉，再次发送了一个事件2，并观察到只有一个监听器收到了事件。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事件监听器是一种常见的设计模式，用于在对象之间建立一种松耦合的关系，当某个对象发生特定事件时，可以通知所有注册了该事件的监听器对象。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>在linux下实现类似WaitForSingleObjectEx功能</title>
    <link href="https://yesir.github.io/2023/03/16/%E5%9C%A8linux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BCWaitForSingleObjectEx%E5%8A%9F%E8%83%BD/"/>
    <id>https://yesir.github.io/2023/03/16/%E5%9C%A8linux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BCWaitForSingleObjectEx%E5%8A%9F%E8%83%BD/</id>
    <published>2023-03-16T06:12:06.000Z</published>
    <updated>2023-04-06T07:19:59.600Z</updated>
    
    <content type="html"><![CDATA[<p>利用pthread_cond_t在实现等待线程完成或超时，来达到类似WaitForSingleObjectEx的功能。</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/time.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;errno.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define WAIT_TIMEOUT ETIMEDOUT</span></span><br><span class="line"><span class="comment">#define WAIT_OBJECT_0 0</span></span><br><span class="line"></span><br><span class="line">void* ThreadFunc(void* args)</span><br><span class="line">&#123;</span><br><span class="line">    // 等待 3 秒钟模拟子线程工作</span><br><span class="line">    <span class="built_in">sleep</span>(3);</span><br><span class="line"></span><br><span class="line">    // 发送条件变量信号通知主线程完成</span><br><span class="line">    pthread_cond_t* cond = (pthread_cond_t*)args;</span><br><span class="line">    pthread_cond_signal(cond);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用条件变量模拟 WaitForSingleObjectEx</span><br><span class="line">int WaitForSingleObjectEx(pthread_mutex_t* mutex, pthread_cond_t* cond, int timeout_ms) </span><br><span class="line">&#123;</span><br><span class="line">    struct timespec ts;</span><br><span class="line">    clock_gettime(CLOCK_REALTIME, &amp;ts);</span><br><span class="line">    ts.tv_sec += timeout_ms / 1000;</span><br><span class="line">    ts.tv_nsec += (timeout_ms % 1000) * 1000000;</span><br><span class="line"></span><br><span class="line">    // 加锁并等待条件变量</span><br><span class="line">    pthread_mutex_lock(mutex);</span><br><span class="line">    int ret = pthread_cond_timedwait(cond, mutex, &amp;ts);</span><br><span class="line">    pthread_mutex_unlock(mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == ETIMEDOUT) &#123;</span><br><span class="line">        <span class="built_in">return</span> WAIT_TIMEOUT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> WAIT_OBJECT_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在主线程中使用条件变量等待子线程完成</span><br><span class="line">int main(int argc, char* argv[]) </span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">    pthread_cond_t cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line">    // 创建子线程</span><br><span class="line">    pthread_t tid;</span><br><span class="line">    pthread_create(&amp;tid, NULL, ThreadFunc, &amp;cond);</span><br><span class="line"></span><br><span class="line">    // 等待子线程完成或超时</span><br><span class="line">    int ret = WaitForSingleObjectEx(&amp;mutex, &amp;cond, 5000);</span><br><span class="line">    <span class="keyword">if</span> (ret == WAIT_OBJECT_0) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread completed successfully.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Timeout waiting for thread.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 销毁条件变量和互斥锁</span><br><span class="line">    pthread_cond_destroy(&amp;cond);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="另外一种实现方式"><a href="#另外一种实现方式" class="headerlink" title="另外一种实现方式"></a>另外一种实现方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用C++11中提供的std::condition_variable来实现等待和通知，使用std::mutex来保证线程安全，使用std::chrono来保证可以设置超时时间。</span><br><span class="line">主要的思路是定义了一个Event类，通过该类中的Set、Reset和Wait函数来设置信号量、重置信号量和等待信号量。</span><br><span class="line">CreateEvent函数返回的是Event类的实例指针，即同等于Windows中的事件句柄，</span><br><span class="line">CloseHandle函数用于清除该指针所代表的资源，在本代码中即清除Event类的实例。</span><br><span class="line">WaitForSingleObjectEx函数则是调用该事件实例所定义的Wait函数，实现等待信号量和设置超时时间的功能。</span><br></pre></td></tr></table></figure><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span>* HANDLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">WAIT_RETURN</span> &#123;</span><br><span class="line">    WAIT_OBJECT_0 = <span class="number">0x00000000</span>L,</span><br><span class="line">    WAIT_ABANDONED = <span class="number">0x00000080</span>L,</span><br><span class="line">    WAIT_TIMEOUT = <span class="number">0x00000102</span>L,</span><br><span class="line">    WAIT_IO_COMPLETION = <span class="number">0x000000C0</span>L,</span><br><span class="line">    WAIT_FAILED = <span class="number">0xFFFFFFFF</span>L</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Event</span>() : <span class="built_in">signaled_</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        signaled_ = <span class="literal">true</span>;</span><br><span class="line">        cv_.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        signaled_ = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">DWORD <span class="title">Wait</span><span class="params">(DWORD timeout = INFINITE)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (timeout == INFINITE) &#123;</span><br><span class="line">            cv_.<span class="built_in">wait</span>(lock, [&amp;] &#123; <span class="keyword">return</span> signaled_; &#125;);</span><br><span class="line">            <span class="keyword">return</span> WAIT_OBJECT_0;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> result = cv_.<span class="built_in">wait_for</span>(lock, std::chrono::<span class="built_in">milliseconds</span>(timeout), [&amp;] &#123; <span class="keyword">return</span> signaled_; &#125;);</span><br><span class="line">            <span class="keyword">if</span> (result == std::cv_status::timeout) &#123;</span><br><span class="line">                <span class="keyword">return</span> WAIT_TIMEOUT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> WAIT_OBJECT_0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    std::mutex mutex_;</span><br><span class="line">    std::condition_variable cv_;</span><br><span class="line">    <span class="type">bool</span> signaled_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE <span class="title">CreateEvent</span><span class="params">(<span class="type">void</span>* lpEventAttributes, <span class="type">bool</span> bManualReset, <span class="type">bool</span> bInitialState,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">char</span>* lpName)</span> </span>&#123;</span><br><span class="line">    Event* event = <span class="keyword">new</span> <span class="built_in">Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (bInitialState) &#123;</span><br><span class="line">        event-&gt;<span class="built_in">Set</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HANDLE&gt;(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CloseHandle</span><span class="params">(HANDLE hObject)</span> </span>&#123;</span><br><span class="line">    Event* event = <span class="built_in">static_cast</span>&lt;Event*&gt;(hObject);</span><br><span class="line">    <span class="keyword">delete</span> event;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObjectEx</span><span class="params">(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable)</span> </span>&#123;</span><br><span class="line">    Event* event = <span class="built_in">static_cast</span>&lt;Event*&gt;(hHandle);</span><br><span class="line">    <span class="keyword">return</span> event-&gt;<span class="built_in">Wait</span>(dwMilliseconds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用pthread_cond_t在实现等待线程完成或超时，来达到类似WaitForSingleObjectEx的功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>使用C++11创建简易环形队列</title>
    <link href="https://yesir.github.io/2023/03/14/%E4%BD%BF%E7%94%A8C-11%E5%88%9B%E5%BB%BA%E7%AE%80%E6%98%93%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    <id>https://yesir.github.io/2023/03/14/%E4%BD%BF%E7%94%A8C-11%E5%88%9B%E5%BB%BA%E7%AE%80%E6%98%93%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/</id>
    <published>2023-03-14T06:23:49.000Z</published>
    <updated>2023-03-14T06:29:47.344Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>std::vector</code>来实现环形队列</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">#include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">class RingBuffer &#123;</span><br><span class="line">public:</span><br><span class="line">    RingBuffer(size_t capacity) : buffer(capacity), begin(0), end(0), size(0) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void push_back(const T &amp;value) &#123;</span><br><span class="line">        buffer[end] = value;</span><br><span class="line">        end = (end + 1) % buffer.size();</span><br><span class="line">        <span class="keyword">if</span> (size == buffer.size()) &#123;</span><br><span class="line">            begin = (begin + 1) % buffer.size();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const T&amp; operator[](size_t index) const &#123;</span><br><span class="line">        <span class="built_in">return</span> buffer[(begin + index) % buffer.size()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size_t getSize() const &#123;</span><br><span class="line">        <span class="built_in">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    std::vector&lt;T&gt; buffer;</span><br><span class="line">    size_t begin, end, size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由<code>std::vector</code>存储元素，三个成员变量begin、end和size分别表示队列的起始位置、结束位置和元素数量.<br><code>push_back</code>方法可以将新元素添加到队列尾部，并根据队列是否已满更新起止位置和元素数量.<br>可以通过下标访问队列中的元素.<br><code>getSize</code>方法可以返回队列中元素的数量.</p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RingBuffer&lt;int&gt; ringBuffer(10);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">    ringBuffer.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (size_t i = 0; i &lt; ringBuffer.getSize(); i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">ringBuffer[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 输出：10 11 12 13 14 15 16 17 18 19</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>创建一个容量为10的整型环形队列，向其中添加了20个元素。由于队列容量有限，只能保留最后10个元素。<br>最后通过下标访问队列中的元素，并输出结果</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;std::vector&lt;/code&gt;来实现环形队列&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++单例模式模板类</title>
    <link href="https://yesir.github.io/2023/03/09/C-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF%E7%B1%BB/"/>
    <id>https://yesir.github.io/2023/03/09/C-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF%E7%B1%BB/</id>
    <published>2023-03-09T00:41:59.000Z</published>
    <updated>2023-03-09T00:54:29.381Z</updated>
    
    <content type="html"><![CDATA[<p>记录C++单例模式，模板方法类</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef SINGLETON_HPP</span></span><br><span class="line"><span class="comment">#define SINGLETON_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;stdexcept&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define NON_COPYABLE(T) \</span></span><br><span class="line">  T(const T &amp;); \</span><br><span class="line">  T &amp;operator=(const T &amp;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#define NON_MOVEABLE(T) \</span></span><br><span class="line">  T(T &amp;&amp;); \</span><br><span class="line">  T &amp;operator=(T &amp;&amp;)</span><br><span class="line"></span><br><span class="line">template&lt; typename T &gt;</span><br><span class="line">class Singleton</span><br><span class="line">&#123;</span><br><span class="line">  static T *_ptr;</span><br><span class="line">  </span><br><span class="line">  NON_COPYABLE(Singleton);</span><br><span class="line">  NON_MOVEABLE(Singleton);</span><br><span class="line">  </span><br><span class="line">public:</span><br><span class="line">  template&lt; typename... Args &gt;</span><br><span class="line">  static void createInstance(Args&amp;&amp;... args)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (_ptr)</span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    _ptr = new T(std::forward&lt; Args &gt;(args)...);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  static void <span class="function"><span class="title">deleteInstance</span></span>()</span><br><span class="line">  &#123;</span><br><span class="line">    delete _ptr;</span><br><span class="line">    _ptr = nullptr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static bool <span class="function"><span class="title">hasInstance</span></span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">return</span> _ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  static T &amp;<span class="function"><span class="title">instance</span></span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_ptr)</span><br><span class="line">      throw std::runtime_error(<span class="string">&quot;Singleton&lt; T &gt;::createInstance missing&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">return</span> *_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Singleton &amp;operator==(const Singleton &amp;) = delete;</span><br><span class="line">  Singleton &amp;operator==(Singleton &amp;&amp;) = delete;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt; typename T &gt; T *Singleton&lt; T &gt;::_ptr = nullptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define CREATE_INSTANCE(T, ...) Singleton&lt; T &gt;::createInstance(__VA_ARGS__)</span></span><br><span class="line"><span class="comment">#define DELETE_INSTANCE(T, ...) Singleton&lt; T &gt;::deleteInstance()</span></span><br><span class="line"><span class="comment">#define INSTANCE(T) Singleton&lt; T &gt;::instance()</span></span><br><span class="line"><span class="comment">#define HAS_INSTANCE(T) Singleton&lt; T &gt;::hasInstance()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">explicit A();</span><br><span class="line">public:</span><br><span class="line">void get();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">CREATE_INSTANCE(A);</span><br><span class="line">INSTANCE(A).get();</span><br><span class="line">    DELETE_INSTANCE(A);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录C++单例模式，模板方法类&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>QtConcurrent引发的崩溃</title>
    <link href="https://yesir.github.io/2023/02/21/QtConcurrent%E5%BC%95%E5%8F%91%E7%9A%84%E5%B4%A9%E6%BA%83/"/>
    <id>https://yesir.github.io/2023/02/21/QtConcurrent%E5%BC%95%E5%8F%91%E7%9A%84%E5%B4%A9%E6%BA%83/</id>
    <published>2023-02-21T09:17:12.000Z</published>
    <updated>2023-02-21T09:34:23.773Z</updated>
    
    <content type="html"><![CDATA[<p>使用QtConcurrent创建线程的一些问题总结</p><span id="more"></span><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在.h文件中定义了：</span><br><span class="line">QFuture&lt;int&gt; m_iFuture;</span><br><span class="line">int funcionProc();</span><br><span class="line"></span><br><span class="line">在源文件中：</span><br><span class="line">m_iFuture = QtConcurrent::run(this, &amp;ClassName::functionProc);</span><br><span class="line"></span><br><span class="line">int ClassName::<span class="function"><span class="title">functionProc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(!isExit())</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>* 注：由于使用`QtConcurrent::run`创建的线程不能使用`m_iFuture`暂停和取消，只能查询运行状态及完成返回值，因此上面的代码，如果在外面设置`isExit()==true`时，在不同的Qt版本会崩溃* 原因是线程执行函数一直得不到返回值, 需要在`functionProc`中添加`return`语句。* 附打开摄像头代码</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef CAMERA_H</span></span><br><span class="line"><span class="comment">#define CAMERA_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;QDialog&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QMutex&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QFuture&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QPixmap&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QSize&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QThread&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &quot;opencv2/opencv.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/core.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/highgui.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/videoio.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/imgproc.hpp&quot;</span></span><br><span class="line"></span><br><span class="line">class Camera : public QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    explicit Camera(QObject *parent = 0);</span><br><span class="line">    ~Camera();</span><br><span class="line"></span><br><span class="line">    bool open();</span><br><span class="line">    void close();</span><br><span class="line">    bool isAvailable();</span><br><span class="line">    bool isOpened();</span><br><span class="line"></span><br><span class="line">    cv::Mat getCurrentFrame();</span><br><span class="line">private:</span><br><span class="line">     bool needStopFrameProc();</span><br><span class="line">     void setStopFrameProc(bool stopFlag);</span><br><span class="line">     int frameProc();</span><br><span class="line">     void setCurrentFrame(const cv::Mat&amp; frame);</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    void frameCaptured(QPixmap pixmap);</span><br><span class="line">    void cameraStateChanged(QString);</span><br><span class="line">private:</span><br><span class="line">    cv::VideoCapture* m_videoCapture;</span><br><span class="line"></span><br><span class="line">    bool m_stopFrameProc;</span><br><span class="line">    QMutex m_frameProcMutex;</span><br><span class="line">    QFuture&lt;int&gt; m_frameProcFuture;</span><br><span class="line"></span><br><span class="line">    QMutex m_currentFrameMutex;</span><br><span class="line">    cv::Mat m_currentFrame;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif // CAMERA_H</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;Camera.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;dirent.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;libudev.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fstream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;time.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;inttypes.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ioctl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/mman.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;linux/videodev2.h&gt;//v4l2相关结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &quot;opencv2/opencv.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/core.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/highgui.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/videoio.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/imgproc.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &lt;QtMultimedia/QCameraInfo&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QMessageBox&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QMutexLocker&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QtConcurrent&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QImage&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include &lt;map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QDebug&gt;</span></span><br><span class="line"></span><br><span class="line">using std::string;</span><br><span class="line"></span><br><span class="line">static const int CAMERA_WIDTH = 640;</span><br><span class="line">static const int CAMERA_HEIGHT = 480;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define udev_list_entry_foreach(entry, first) \</span></span><br><span class="line">    <span class="keyword">for</span> (entry = first; \</span><br><span class="line">         entry != NULL; \</span><br><span class="line">         entry = udev_list_entry_get_next(entry))</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    string vid;</span><br><span class="line">    string pid;</span><br><span class="line">&#125; VPID;</span><br><span class="line"></span><br><span class="line">std::map&lt;string, string&gt; g_pidandpath;</span><br><span class="line"></span><br><span class="line">int v4l2_is_v4l_dev(const char *name)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> !strncmp(name, <span class="string">&quot;video&quot;</span>, 5) || !strncmp(name, <span class="string">&quot;radio&quot;</span>, 5) || !strncmp(name, <span class="string">&quot;vbi&quot;</span>, 3) || !strncmp(name, <span class="string">&quot;v4l-subdev&quot;</span>, 10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool read_vpid(string dev_path, VPID&amp; vpid)</span><br><span class="line">&#123;</span><br><span class="line">    bool success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    auto udev = udev_new();</span><br><span class="line">    <span class="keyword">if</span> (!udev) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct <span class="built_in">stat</span> statbuf;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stat</span>(dev_path.c_str(), &amp;statbuf) &lt; 0) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto <span class="built_in">type</span> =  S_ISBLK(statbuf.st_mode) ? <span class="string">&#x27;b&#x27;</span> : S_ISCHR(statbuf.st_mode) ? <span class="string">&#x27;c&#x27;</span> : 0;</span><br><span class="line"></span><br><span class="line">    auto opened_dev = udev_device_new_from_devnum(udev, <span class="built_in">type</span>, statbuf.st_rdev);</span><br><span class="line">    auto dev = opened_dev;</span><br><span class="line"></span><br><span class="line">    struct udev_list_entry *list_entry;</span><br><span class="line">    udev_list_entry_foreach(list_entry, udev_device_get_properties_list_entry(dev))</span><br><span class="line">    &#123;</span><br><span class="line">        success = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(strcmp(udev_list_entry_get_name(list_entry), <span class="string">&quot;ID_VENDOR_ID&quot;</span>) == 0)</span><br><span class="line">            vpid.vid = udev_device_get_property_value(dev, udev_list_entry_get_name(list_entry));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strcmp(udev_list_entry_get_name(list_entry), <span class="string">&quot;ID_MODEL_ID&quot;</span>) == 0)</span><br><span class="line">            vpid.pid = udev_device_get_property_value(dev, udev_list_entry_get_name(list_entry));</span><br><span class="line"></span><br><span class="line">        //printf(<span class="string">&quot;==== vid: %s\n pid: %s\n&quot;</span>, vpid.vid.c_str(), vpid.pid.c_str());</span><br><span class="line">        /*<span class="built_in">printf</span>(<span class="string">&quot;%s=%s\n&quot;</span>, udev_list_entry_get_name(list_entry), udev_list_entry_get_value(list_entry));*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*<span class="keyword">while</span> (dev != nullptr) &#123;</span><br><span class="line">        auto serial = udev_device_get_sysattr_value(dev, <span class="string">&quot;serial&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nullptr == serial) &#123;</span><br><span class="line">            dev = udev_device_get_parent(dev);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            success = <span class="literal">true</span>;</span><br><span class="line">            vpid.vid = udev_device_get_sysattr_value(dev, <span class="string">&quot;idVendor&quot;</span>);</span><br><span class="line">            vpid.pid = udev_device_get_sysattr_value(dev, <span class="string">&quot;idProduct&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;==== vid: %s\n pid: %s\n&quot;</span>, vpid.vid.c_str(), vpid.pid.c_str());</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line">    <span class="keyword">if</span> (opened_dev) &#123;</span><br><span class="line">        udev_device_unref(opened_dev);</span><br><span class="line">    &#125;</span><br><span class="line">    udev_unref(udev);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool get_camera_path(string &amp;camera_path)</span><br><span class="line">&#123;</span><br><span class="line">    bool success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    const char* dir_name = <span class="string">&quot;/dev&quot;</span>;</span><br><span class="line">    DIR* <span class="built_in">dir</span> = opendir(dir_name);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">dir</span>) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">&quot;Error: couldn&#x27;t open the directory: %s\n&quot;</span>, dir_name);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct dirent* entry = nullptr;</span><br><span class="line">    int fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((entry = readdir(<span class="built_in">dir</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v4l2_is_v4l_dev(entry-&gt;d_name))</span><br><span class="line">            <span class="built_in">continue</span>;</span><br><span class="line"></span><br><span class="line">        char device_name[256];</span><br><span class="line">        snprintf(device_name, sizeof(device_name), <span class="string">&quot;/dev/%s&quot;</span>, entry-&gt;d_name);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((fd = open(device_name, O_RDWR | O_NONBLOCK)) &lt; 0) &#123;</span><br><span class="line">            <span class="built_in">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        struct v4l2_capability <span class="built_in">cap</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, VIDIOC_QUERYCAP, &amp;<span class="built_in">cap</span>) &lt; 0) &#123;</span><br><span class="line">            fprintf(stderr, <span class="string">&quot;Error: cam_info: can&#x27;t open device: %s\n&quot;</span>, device_name);</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">if</span>(!(cap.capabilities &amp; V4L2_CAP_VIDEO_CAPTURE) || !(cap.capabilities &amp; V4L2_CAP_STREAMING)) &#123;                </span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="built_in">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //printf(<span class="string">&quot;Driver Name:%s\n Card Name:%s\n Bus info:%s\n version:%d\n capabilities:%x\n \n &quot;</span>, cap.driver, cap.card, cap.bus_info,cap.version,cap.capabilities);</span><br><span class="line">                camera_path = device_name;</span><br><span class="line">                VPID vid;</span><br><span class="line">                <span class="keyword">if</span>(read_vpid(device_name, vid))</span><br><span class="line">                &#123;</span><br><span class="line">                    g_pidandpath[vid.pid] = device_name;</span><br><span class="line">                &#125;</span><br><span class="line">                close(fd);</span><br><span class="line">                success = <span class="literal">true</span>;</span><br><span class="line">//                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closedir(<span class="built_in">dir</span>);</span><br><span class="line">    <span class="built_in">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Camera::Camera(QObject *parent)</span><br><span class="line">&#123;</span><br><span class="line">    m_stopFrameProc = <span class="literal">false</span>;</span><br><span class="line">    m_videoCapture = new cv::VideoCapture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Camera::~<span class="function"><span class="title">Camera</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    delete m_videoCapture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Camera::<span class="function"><span class="title">open</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_frameProcFuture.isRunning()) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setStopFrameProc(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string cameraPath;</span><br><span class="line">    <span class="keyword">if</span>(!::get_camera_path(cameraPath))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can not find vis path!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool cameraOpened;</span><br><span class="line">    <span class="keyword">for</span>(std::map&lt;string, string&gt;::iterator it = g_pidandpath.begin(); it != g_pidandpath.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(strncmp(it-&gt;first.c_str(), <span class="string">&quot;ae01&quot;</span>, 4) == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            cameraOpened = m_videoCapture-&gt;open(it-&gt;second);</span><br><span class="line">            //printf(<span class="string">&quot;====== %s, cameraOpened: %d\n&quot;</span>, it-&gt;second.c_str(), cameraOpened);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //bool cameraOpened = m_videoCapture-&gt;open(cameraPath);</span><br><span class="line">    //printf(<span class="string">&quot;====== %s, cameraOpened: %d\n&quot;</span>, cameraPath.c_str(), cameraOpened);</span><br><span class="line">    <span class="keyword">if</span>(cameraOpened) &#123;</span><br><span class="line">        m_videoCapture-&gt;<span class="built_in">set</span>(CV_CAP_PROP_FPS, 15);</span><br><span class="line">        m_videoCapture-&gt;<span class="built_in">set</span>(CV_CAP_PROP_FRAME_WIDTH, CAMERA_WIDTH);</span><br><span class="line">        m_videoCapture-&gt;<span class="built_in">set</span>(CV_CAP_PROP_FRAME_HEIGHT, CAMERA_HEIGHT);</span><br><span class="line">        m_videoCapture-&gt;<span class="built_in">set</span>(CV_CAP_PROP_FOURCC, CV_FOURCC(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;G&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        m_frameProcFuture = QtConcurrent::run(this, &amp;Camera::frameProc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> cameraOpened;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Camera::<span class="function"><span class="title">close</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_frameProcFuture.isRunning())</span><br><span class="line">    &#123;</span><br><span class="line">        setStopFrameProc(<span class="literal">true</span>);</span><br><span class="line">        m_frameProcFuture.waitForFinished();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    m_videoCapture-&gt;release();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Camera::<span class="function"><span class="title">isAvailable</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    string cameraPath;</span><br><span class="line">    <span class="keyword">if</span>(!::get_camera_path(cameraPath))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can not find vis path!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool cameraOpened = m_videoCapture-&gt;open(cameraPath);</span><br><span class="line">    <span class="keyword">if</span>(cameraOpened) &#123;</span><br><span class="line">        m_videoCapture-&gt;release();</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Camera::<span class="function"><span class="title">isOpened</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> m_videoCapture-&gt;isOpened();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Camera::<span class="function"><span class="title">needStopFrameProc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    QMutexLocker locker(&amp;m_frameProcMutex);</span><br><span class="line">    //qDebug() &lt;&lt; <span class="string">&quot;needStopFrameProc: &quot;</span> &lt;&lt; <span class="string">m_stopFrameProc;</span></span><br><span class="line"><span class="string">    return m_stopFrameProc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Camera::setStopFrameProc(bool stopFlag)</span><br><span class="line">&#123;</span><br><span class="line">    QMutexLocker locker(&amp;m_frameProcMutex);</span><br><span class="line">    //qDebug() &lt;&lt; <span class="string">&quot;setStopFrameProc: &quot;</span> &lt;&lt; <span class="string">stopFlag;</span></span><br><span class="line"><span class="string">    m_stopFrameProc = stopFlag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 通过调试发现，当摄像头断开后，每次<span class="built_in">read</span>()虽然返回的还是<span class="literal">true</span>，Mat也不是empty，但是Mat的数据都是上一次的数据，</span><br><span class="line">* 于是推测可以通过直接判断Mat的内容来判断摄像头是否正常。经过调试发现摄像头断开时Mat的数据的确是初始状态的。于是可以通过检测<span class="built_in">read</span>()后的Mat来判断摄像头是否正常：</span><br><span class="line">*/</span><br><span class="line">bool checkMat(cv::Mat&amp; mat)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; mat.rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">uchar* pRow = (unsigned char*)mat.ptr&lt;uchar&gt;(i);</span><br><span class="line"><span class="keyword">for</span> (int j = 0; j &lt; mat.cols * mat.channels(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pRow[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">* 在正常状态下，这个判断是很快的，所有这个判断可以在每一帧的后面使用。当然，这个要求Mat每次都得初始化。</span><br><span class="line">*</span><br><span class="line">* cv::Mat m;</span><br><span class="line">* <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">* &#123;</span><br><span class="line">*    m.release();</span><br><span class="line">*    m_v.read(m);</span><br><span class="line">*    <span class="keyword">if</span> (!checkMat(frame))</span><br><span class="line">*    &#123;</span><br><span class="line">*        LOG(<span class="string">&quot;摄像头断开\n&quot;</span>);</span><br><span class="line">*        m_v.release();</span><br><span class="line">*    &#125;</span><br><span class="line">*    ...</span><br><span class="line">* &#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int Camera::<span class="function"><span class="title">frameProc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval <span class="built_in">timeout</span>;</span><br><span class="line">    timeout.tv_sec = 0;</span><br><span class="line">    timeout.tv_usec = 1000*100;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!needStopFrameProc()) &#123;</span><br><span class="line">        usleep(50*1000);</span><br><span class="line"></span><br><span class="line">        cv::Mat rawFrame;</span><br><span class="line">        *m_videoCapture &gt;&gt; rawFrame;</span><br><span class="line">        <span class="keyword">if</span> (!checkMat(rawFrame))</span><br><span class="line">            emit cameraStateChanged(<span class="string">&quot;摄像头断开, 请重试&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rawFrame.empty()) &#123;</span><br><span class="line">            <span class="built_in">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setCurrentFrame(rawFrame);</span><br><span class="line"></span><br><span class="line">            cv::Mat frame;</span><br><span class="line">            //显示可见光摄像头</span><br><span class="line">            cv::cvtColor(rawFrame, frame, cv::COLOR_RGB2BGR);</span><br><span class="line"></span><br><span class="line">            const uchar* data = (const uchar*) frame.data;</span><br><span class="line">            QImage image(data, frame.cols, frame.rows, frame.step, QImage::Format_RGB888);</span><br><span class="line">            QPixmap pixmap = QPixmap::fromImage(image);</span><br><span class="line"></span><br><span class="line">            emit frameCaptured(pixmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cv::Mat Camera::<span class="function"><span class="title">getCurrentFrame</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    QMutexLocker locker(&amp;m_currentFrameMutex);</span><br><span class="line">    <span class="built_in">return</span> m_currentFrame.<span class="built_in">clone</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Camera::setCurrentFrame(const cv::Mat &amp;frame)</span><br><span class="line">&#123;</span><br><span class="line">    QMutexLocker locker(&amp;m_currentFrameMutex);</span><br><span class="line">    m_currentFrame = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用QtConcurrent创建线程的一些问题总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://yesir.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>在aarch64麒麟V10上编译qt-5.9.8</title>
    <link href="https://yesir.github.io/2023/02/15/%E5%9C%A8aarch64%E9%BA%92%E9%BA%9FV10%E4%B8%8A%E7%BC%96%E8%AF%91qt-5-9-8/"/>
    <id>https://yesir.github.io/2023/02/15/%E5%9C%A8aarch64%E9%BA%92%E9%BA%9FV10%E4%B8%8A%E7%BC%96%E8%AF%91qt-5-9-8/</id>
    <published>2023-02-15T07:55:00.000Z</published>
    <updated>2023-03-21T00:39:35.458Z</updated>
    
    <content type="html"><![CDATA[<p>记录在麒麟V10<code>aarch64/Phytium,FT-2000/4</code>上编译<code>Qt-5.9.8</code></p><span id="more"></span><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   Linux kylinsec-FT2004 5.4.18-52-generic <span class="comment">#41 SMP Wed Mar 2 15:24:07 CST 2022 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">架构：                           aarch64</span><br><span class="line">CPU 运行模式：                   32-bit, 64-bit</span><br><span class="line">字节序：                         Little Endian</span><br><span class="line">CPU:                             4</span><br><span class="line">在线 CPU 列表：                  0-3</span><br><span class="line">每个核的线程数：                 1</span><br><span class="line">每个座的核数：                   2</span><br><span class="line">座：                             2</span><br><span class="line">NUMA 节点：                      1</span><br><span class="line">厂商 ID：                        0x70</span><br><span class="line">型号：                           3</span><br><span class="line">型号名称：                       Phytium,FT-2000/4</span><br><span class="line">步进：                           0x1</span><br><span class="line">BogoMIPS：                       96.00</span><br><span class="line">NUMA 节点0 CPU：                 0-3</span><br><span class="line">Vulnerability Itlb multihit:     Not affected</span><br><span class="line">Vulnerability L1tf:              Not affected</span><br><span class="line">Vulnerability Mds:               Not affected</span><br><span class="line">Vulnerability Meltdown:          Vulnerable</span><br><span class="line">Vulnerability Spec store bypass: Not affected</span><br><span class="line">Vulnerability Spectre v1:        Mitigation; __user pointer sanitization</span><br><span class="line">Vulnerability Spectre v2:        Not affected</span><br><span class="line">Vulnerability Tsx async abort:   Not affected</span><br><span class="line">标记：                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br></pre></td></tr></table></figure><h2 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h2><h3 id="1、下载源码包"><a href="#1、下载源码包" class="headerlink" title="1、下载源码包"></a>1、下载源码包</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qt.io/archive/qt/5.9/5.9.8/single/qt-everywhere-opensource-src-5.9.8.tar.xz</span><br><span class="line"></span><br><span class="line">xz -d qt-everywhere-opensource-src-5.9.8.tar.xz</span><br><span class="line">tar -xvf qt-everywhere-opensource-src-5.9.8.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> qt-everywhere-opensource-src-5.9.8</span><br><span class="line">vim qtbase/mkspecs/linux-arm-gnueabi-g++/qmake.conf</span><br><span class="line">根据系统gcc版本替换</span><br><span class="line">   vim下执行</span><br><span class="line">:%s/arm-linux-gnueabihf/aarch64-linux-gnu/g</span><br><span class="line"></span><br><span class="line">注释</span><br><span class="line">vim qtimageformats/src/3rdparty/libwebp/src/dsp/dsp.h 第72行</span><br><span class="line"></span><br><span class="line">//<span class="comment">#define WEBP_USE_NEON  // Android targets that might support NEON</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="2、配置需要编译的包集合"><a href="#2、配置需要编译的包集合" class="headerlink" title="2、配置需要编译的包集合"></a>2、配置需要编译的包集合</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">./configure -prefix /usr/local/Qt-5.9 -release -xplatform linux-arm-gnueabi-g++ -opensource -nomake examples -nomake tests -confirm-license -shared -no-iconv -qt-xcb -no-opengl -skip qtlocation</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">如果make install出现以下错误:</span><br><span class="line">出现error: ‘SIOCGSTAMP’ undeclared (first use <span class="keyword">in</span> this <span class="keyword">function</span>); did you mean ‘SIOCGARP’</span><br><span class="line"></span><br><span class="line">在socketcanbackend.cpp文件中添加<span class="comment">#include &lt;linux/sockios.h&gt;</span></span><br><span class="line"></span><br><span class="line">即:</span><br><span class="line">vim qtserialbus/src/plugins/canbus/socketcan/socketcanbackend.cpp</span><br><span class="line"></span><br></pre></td></tr></table></figure>编译过程中还可能出现webp报错的情况，此时执行`./configure`配置时增加不编译`webp`选项,即：`-no-webp`</code></pre><h3 id="3、添加Qt环境"><a href="#3、添加Qt环境" class="headerlink" title="3、添加Qt环境"></a>3、添加Qt环境</h3><pre><code>如果系统已经存在qt版本，则如下配置:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qtchooser -install Qt-5.9 /usr/local/Qt-5.9/bin/qmake</span><br><span class="line"></span><br><span class="line">设置系统默认qt版本</span><br><span class="line"><span class="built_in">export</span> QT_SELECT=Qt-5.9</span><br></pre></td></tr></table></figure>如果系统未安装过qt，则配置如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> QTDIR=/usr/local/Qt-5.9</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$QTDIR</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$QTDIR</span>/man:<span class="variable">$MANPATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$QTDIR</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在麒麟V10&lt;code&gt;aarch64/Phytium,FT-2000/4&lt;/code&gt;上编译&lt;code&gt;Qt-5.9.8&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>shell获取桌面等路径</title>
    <link href="https://yesir.github.io/2022/12/21/shell%E8%8E%B7%E5%8F%96%E6%A1%8C%E9%9D%A2%E7%AD%89%E8%B7%AF%E5%BE%84/"/>
    <id>https://yesir.github.io/2022/12/21/shell%E8%8E%B7%E5%8F%96%E6%A1%8C%E9%9D%A2%E7%AD%89%E8%B7%AF%E5%BE%84/</id>
    <published>2022-12-21T03:29:51.000Z</published>
    <updated>2022-12-21T03:33:13.488Z</updated>
    
    <content type="html"><![CDATA[<p>在不知道当前用户的情况下，需要将文件拷贝到桌面这一级目录时，可以利用<code>~/.config/user-dirs.dirs</code>配置文件来获取</p><span id="more"></span><blockquote><p>脚本如下:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">desk=`<span class="built_in">cat</span> <span class="variable">$HOME</span>/.config/user-dirs.dirs | grep DESKTOP | <span class="built_in">tail</span>  -1  |<span class="built_in">cut</span> -d <span class="string">&#x27;=&#x27;</span> -f 2  | sed <span class="string">&#x27;s/\&quot;//g&#x27;</span>`</span><br><span class="line">var=`<span class="built_in">eval</span> <span class="built_in">echo</span> <span class="variable">$desk</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在不知道当前用户的情况下，需要将文件拷贝到桌面这一级目录时，可以利用&lt;code&gt;~/.config/user-dirs.dirs&lt;/code&gt;配置文件来获取&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>opencv学习（三）</title>
    <link href="https://yesir.github.io/2022/12/16/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://yesir.github.io/2022/12/16/opencv%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2022-12-16T06:25:52.000Z</published>
    <updated>2022-12-16T06:33:25.151Z</updated>
    
    <content type="html"><![CDATA[<p><code>cv::Mat</code>与<code>QImage</code>相互转化</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/****************************************************************************</span><br><span class="line">** file: convert.h</span><br><span class="line">** brief: cv::Mat 与 QImage 之间的转换函数。在 Qt 程序中使用 OpenCV 时有用。</span><br><span class="line">** Copyright (C) LiYuan</span><br><span class="line">** Author: LiYuan</span><br><span class="line">** E-Mail: 18069211<span class="comment">#qq(.)com</span></span><br><span class="line">** Version 2.0.1</span><br><span class="line">** Last modified: 2019.01.11</span><br><span class="line">** Modified By: LiYuan</span><br><span class="line">****************************************************************************/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#ifndef QT_OPENCV_CONVERT_H</span></span><br><span class="line"><span class="comment">#define QT_OPENCV_CONVERT_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;QtCore/QDebug&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QtGui/QImage&gt;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/core/core.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/imgproc/imgproc.hpp&quot;</span></span><br><span class="line"><span class="comment">#include &quot;opencv2/opencv.hpp&quot;</span></span><br><span class="line">/**</span><br><span class="line"> * @brief 将 OpenCV 的 cv::Mat 类型图像转换为 QImage 类型</span><br><span class="line"> * @param mat 待转换的图像，支持 CV_8UC1、CV_8UC3、CV_8UC4 三种OpenCV 的数据类型</span><br><span class="line"> * @param <span class="built_in">clone</span> <span class="literal">true</span> 表示与 Mat 不共享内存，更改生成的 mat 不会影响原始图像，<span class="literal">false</span> 则会与 mat 共享内存</span><br><span class="line"> * @param rb_swap 只针对 CV_8UC3 格式，如果 <span class="literal">true</span> 则会调换 R 与 B RGB-&gt;BGR，如果共享内存的话原始图像也会发生变化</span><br><span class="line"> * @<span class="built_in">return</span> 转换后的 QImage 图像</span><br><span class="line">*/</span><br><span class="line">QImage cvMat2QImage(const cv::Mat&amp; mat, bool <span class="built_in">clone</span> = <span class="literal">true</span>, bool rb_swap = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 将 QImage 的类型图像转换为 cv::Mat 类型</span><br><span class="line"> * @param image 待转换的图像，支持 Format_Indexed8/Format_Grayscale、24 位彩色、32 位彩色格式，</span><br><span class="line"> * @param <span class="built_in">clone</span> <span class="literal">true</span> 表示与 QImage 不共享内存，更改生成的 mat 不会影响原始图像，<span class="literal">false</span> 则会与 QImage 共享内存</span><br><span class="line"> * @param rg_swap 只针对 RGB888 格式，如果 <span class="literal">true</span> 则会调换 R 与 B RGB-&gt;BGR，如果共享内存的话原始图像也会发生变化</span><br><span class="line"> * @<span class="built_in">return</span> 转换后的 cv::Mat 图像</span><br><span class="line">*/</span><br><span class="line">cv::Mat QImage2cvMat(QImage &amp;image, bool <span class="built_in">clone</span> = <span class="literal">false</span>, bool rb_swap = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">/****************************************************************************</span><br><span class="line">** file: convert.cpp</span><br><span class="line">** brief: cv::Mat 与 QImage 之间的转换函数。在 Qt 程序中使用 OpenCV 时有用。</span><br><span class="line">** Copyright (C) LiYuan</span><br><span class="line">** Author: LiYuan</span><br><span class="line">** E-Mail: 18069211<span class="comment">#qq(.)com</span></span><br><span class="line">** Version 2.0.1</span><br><span class="line">** Last modified: 2019.01.11</span><br><span class="line">** Modified By: LiYuan</span><br><span class="line">****************************************************************************/</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &quot;convert.h&quot;</span></span><br><span class="line"></span><br><span class="line">QImage cvMat2QImage(const cv::Mat&amp; mat, bool <span class="built_in">clone</span>, bool rb_swap)</span><br><span class="line">&#123;</span><br><span class="line">    const uchar *pSrc = (const uchar*)mat.data;</span><br><span class="line">    // 8-bits unsigned, NO. OF CHANNELS = 1</span><br><span class="line">    <span class="keyword">if</span>(mat.type() == CV_8UC1)</span><br><span class="line">    &#123;</span><br><span class="line">        //QImage image(mat.cols, mat.rows, QImage::Format_Grayscale8);</span><br><span class="line">        QImage image(pSrc, mat.cols, mat.rows, mat.step, QImage::Format_Grayscale8);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">clone</span>) <span class="built_in">return</span> image.copy();</span><br><span class="line">        <span class="built_in">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    // 8-bits unsigned, NO. OF CHANNELS = 3</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mat.type() == CV_8UC3)</span><br><span class="line">    &#123;</span><br><span class="line">        // Create QImage with same dimensions as input Mat</span><br><span class="line">        QImage image(pSrc, mat.cols, mat.rows, mat.step, QImage::Format_RGB888);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">clone</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(rb_swap) <span class="built_in">return</span> image.rgbSwapped();</span><br><span class="line">            <span class="built_in">return</span> image.copy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(rb_swap)</span><br><span class="line">            &#123;</span><br><span class="line">                cv::cvtColor(mat, mat, CV_BGR2RGB);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mat.type() == CV_8UC4)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;CV_8UC4&quot;</span>;</span><br><span class="line">        QImage image(pSrc, mat.cols, mat.rows, mat.step, QImage::Format_ARGB32);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">clone</span>) <span class="built_in">return</span> image.copy();</span><br><span class="line">        <span class="built_in">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;ERROR: Mat could not be converted to QImage.&quot;</span>;</span><br><span class="line">        <span class="built_in">return</span> QImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cv::Mat QImage2cvMat(QImage &amp;image, bool <span class="built_in">clone</span>, bool rb_swap)</span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat mat;</span><br><span class="line">    //qDebug() &lt;&lt; <span class="string">image.format();</span></span><br><span class="line"><span class="string">    switch(image</span>.format())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_ARGB32:</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_RGB32:</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_ARGB32_Premultiplied:</span><br><span class="line">        mat = cv::Mat(image.height(), image.width(), CV_8UC4, (void *)image.constBits(), image.bytesPerLine());</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">clone</span>)  mat = mat.clone();</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_RGB888:</span><br><span class="line">        mat = cv::Mat(image.height(), image.width(), CV_8UC3, (void *)image.constBits(), image.bytesPerLine());</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">clone</span>)  mat = mat.clone();</span><br><span class="line">        <span class="keyword">if</span>(rb_swap) cv::cvtColor(mat, mat, CV_BGR2RGB);</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_Indexed8:</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_Grayscale8:</span><br><span class="line">        mat = cv::Mat(image.height(), image.width(), CV_8UC1, (void *)image.bits(), image.bytesPerLine());</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">clone</span>)  mat = mat.clone();</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> mat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">void <span class="function"><span class="title">test1</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat mat = cv::imread(<span class="string">&quot;Q:\\Koala.jpg&quot;</span>, cv::IMREAD_UNCHANGED);</span><br><span class="line">    cv::cvtColor(mat, mat, CV_BGR2BGRA);</span><br><span class="line">    QImage image = cvMat2QImage(mat);</span><br><span class="line">    qDebug() &lt;&lt; (mat.type() == CV_8UC4);</span><br><span class="line">    cvNamedWindow(<span class="string">&quot;cvMat2QImage RGB32&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">    imshow(<span class="string">&quot;cvMat2QImage RGB32&quot;</span>, mat);</span><br><span class="line">    QLabel label;</span><br><span class="line">    label.setPixmap(QPixmap::fromImage(image));</span><br><span class="line">    label.show();</span><br><span class="line">    cv::waitKey(10000);</span><br><span class="line">&#125;</span><br><span class="line">void <span class="function"><span class="title">test2</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat mat = cv::imread(<span class="string">&quot;Q:\\Koala.jpg&quot;</span>, cv::IMREAD_UNCHANGED);</span><br><span class="line">    cv::cvtColor(mat, mat, CV_BGR2GRAY);</span><br><span class="line">    QImage image = cvMat2QImage(mat);</span><br><span class="line">    cvNamedWindow(<span class="string">&quot;cvMat2QImage gray&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">    imshow(<span class="string">&quot;cvMat2QImage gray&quot;</span>, mat);</span><br><span class="line">    QLabel label;</span><br><span class="line">    label.setPixmap(QPixmap::fromImage(image));</span><br><span class="line">    label.show();</span><br><span class="line">    cv::waitKey(10000);</span><br><span class="line">&#125;</span><br><span class="line">void <span class="function"><span class="title">test3</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    QImage image(<span class="string">&quot;Q:\\Koala.jpg&quot;</span>);</span><br><span class="line">    image = image.convertToFormat(QImage::Format_RGB32);</span><br><span class="line">    cv::Mat mat = QImage2cvMat(image);</span><br><span class="line">    //cv::cvtColor(mat, mat, CV_BGR2RGB);</span><br><span class="line">    imshow(<span class="string">&quot;QImage2cvMat RGB32&quot;</span>, mat);</span><br><span class="line">    cv::waitKey(10000);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void <span class="function"><span class="title">test4</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    QImage image(<span class="string">&quot;Q:\\Koala.jpg&quot;</span>);</span><br><span class="line">    image = image.convertToFormat(QImage::Format_RGB888);</span><br><span class="line">    cv::Mat mat = QImage2cvMat(image);</span><br><span class="line">    imshow(<span class="string">&quot;QImage2cvMat RGB24&quot;</span>, mat);</span><br><span class="line">    cv::waitKey(10000);</span><br><span class="line">&#125;</span><br><span class="line">void <span class="function"><span class="title">test5</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    QImage image(<span class="string">&quot;Q:\\Koala.jpg&quot;</span>);</span><br><span class="line">    image = image.convertToFormat(QImage::Format_Indexed8);</span><br><span class="line">    cv::Mat mat = QImage2cvMat(image);</span><br><span class="line">    imshow(<span class="string">&quot;QImage2cvMat Indexed8&quot;</span>, mat);</span><br><span class="line">    cv::waitKey(10000);</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QApplication a(argc, argv);</span><br><span class="line">    //test1();</span><br><span class="line">    //test2();</span><br><span class="line">    //test3();</span><br><span class="line">    //test4();</span><br><span class="line">    //test5();</span><br><span class="line">    test1();</span><br><span class="line">    <span class="built_in">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>转载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/liyuanbhu/article/details/86307283</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;cv::Mat&lt;/code&gt;与&lt;code&gt;QImage&lt;/code&gt;相互转化&lt;/p&gt;</summary>
    
    
    
    
    <category term="Opencv" scheme="https://yesir.github.io/tags/Opencv/"/>
    
  </entry>
  
  <entry>
    <title>std::async获取异步执行结果和状态</title>
    <link href="https://yesir.github.io/2022/12/09/std-async%E8%8E%B7%E5%8F%96%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%92%8C%E7%8A%B6%E6%80%81/"/>
    <id>https://yesir.github.io/2022/12/09/std-async%E8%8E%B7%E5%8F%96%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%92%8C%E7%8A%B6%E6%80%81/</id>
    <published>2022-12-09T00:44:24.000Z</published>
    <updated>2022-12-09T01:07:19.039Z</updated>
    
    <content type="html"><![CDATA[<p>简单来讲<code>std::async</code>是对<code>std::future、std::promise和std::packaged_task</code>的一个包装，将异步操作用<code>std::packaged_task</code>包装起来，然后将异步操作的结果放到<code>std::promise</code>中,在外层通过std::future.get/wait来获取结果。</p><span id="more"></span><blockquote><p>函数原型<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  std::async(std::launch::async | std::launch::deferred, f, args...)</span><br><span class="line">  第一个参数是线程的创建策略;</span><br><span class="line">std::launch::async：在调用async就开始创建线程</span><br><span class="line">std::launch::deferred：延迟加载方式创建线程。调用async时不创建线程，直到调用了future的get或者<span class="built_in">wait</span>时才创建线程。</span><br><span class="line">  第二个参数是线程函数;</span><br><span class="line">  第三个参数是线程函数的参数;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;thread&gt;</span></span><br><span class="line"><span class="comment">#include &lt;future&gt;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    std::future&lt;int&gt; f1 = std::async(std::launch::async, []()&#123;</span><br><span class="line">        <span class="built_in">return</span> 1; </span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">f1.get() &lt;&lt; std::endl; //output: 1</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    std::future&lt;int&gt; f2 = std::async(std::launch::async, []()&#123;</span></span><br><span class="line"><span class="string">        std::cout &lt;&lt; 2 &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">        return 0;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    f2.wait(); //output: 2</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    std::future&lt;int&gt; future = std::async(std::launch::async, []()&#123;</span></span><br><span class="line"><span class="string">        std::this_thread::sleep_for(std::chrono::seconds(3));</span></span><br><span class="line"><span class="string">        return 3; </span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    std::cout &lt;&lt; &quot;waiting...\n&quot;;</span></span><br><span class="line"><span class="string">    std::future_status status;</span></span><br><span class="line"><span class="string">    do &#123;</span></span><br><span class="line"><span class="string">        status = future.wait_for(std::chrono::seconds(1));</span></span><br><span class="line"><span class="string">        if (status == std::future_status::deferred) &#123;</span></span><br><span class="line"><span class="string">            std::cout &lt;&lt; &quot;deferred\n&quot;;</span></span><br><span class="line"><span class="string">        &#125; else if (status == std::future_status::timeout) &#123;</span></span><br><span class="line"><span class="string">            std::cout &lt;&lt; &quot;timeout\n&quot;;</span></span><br><span class="line"><span class="string">        &#125; else if (status == std::future_status::ready) &#123;</span></span><br><span class="line"><span class="string">            std::cout &lt;&lt; &quot;ready!\n&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; while (status != std::future_status::ready);</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    std::cout &lt;&lt; &quot;result is &quot; &lt;&lt; future.get() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">waiting...</span><br><span class="line"><span class="built_in">timeout</span></span><br><span class="line"><span class="built_in">timeout</span></span><br><span class="line">ready!</span><br><span class="line">result is 3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单来讲&lt;code&gt;std::async&lt;/code&gt;是对&lt;code&gt;std::future、std::promise和std::packaged_task&lt;/code&gt;的一个包装，将异步操作用&lt;code&gt;std::packaged_task&lt;/code&gt;包装起来，然后将异步操作的结果放到&lt;code&gt;std::promise&lt;/code&gt;中,在外层通过std::future.get/wait来获取结果。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>使用C++11实现WaitForSingleObject类似的功能</title>
    <link href="https://yesir.github.io/2022/12/06/%E4%BD%BF%E7%94%A8C-11%E5%AE%9E%E7%8E%B0WaitForSingleObject%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>https://yesir.github.io/2022/12/06/%E4%BD%BF%E7%94%A8C-11%E5%AE%9E%E7%8E%B0WaitForSingleObject%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD/</id>
    <published>2022-12-06T06:50:16.000Z</published>
    <updated>2022-12-06T06:53:51.124Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>mutex</code>和<code>condition_variable</code>来实现<code>WaitForSingleObject</code>的功能</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;thread&gt;</span></span><br><span class="line"><span class="comment">#include &lt;mutex&gt;</span></span><br><span class="line"><span class="comment">#include &lt;condition_variable&gt;</span></span><br><span class="line"><span class="comment">#include &lt;chrono&gt;</span></span><br><span class="line"></span><br><span class="line">std::mutex mx;</span><br><span class="line"></span><br><span class="line">std::mutex g_mx;</span><br><span class="line">std::condition_variable g_cv;</span><br><span class="line">uint32_t g_thread_num = 0;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">function_1</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; 100; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; loc(mx);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;from function 1:&quot;</span> &lt;&lt; <span class="string">i &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">    --g_thread_num;</span></span><br><span class="line"><span class="string">    g_cv.notify_one();</span></span><br><span class="line"><span class="string">    guard.unlock();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::cout &lt;&lt; &quot;function 1 end&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">void function_2()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    for (int i</span> = 0; i &lt; 100; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; loc(mx);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;from function 2:&quot;</span> &lt;&lt; <span class="string">i &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">    --g_thread_num;</span></span><br><span class="line"><span class="string">    g_cv.notify_one();</span></span><br><span class="line"><span class="string">    guard.unlock();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::cout &lt;&lt; &quot;function 2 end&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">void function_3()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    for (int i</span> = 0; i &lt; 100; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; loc(mx);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;from function 3:&quot;</span> &lt;&lt; <span class="string">i &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    std::this_thread::sleep_for(std::chrono::seconds(3));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">    --g_thread_num;</span></span><br><span class="line"><span class="string">    g_cv.notify_one();</span></span><br><span class="line"><span class="string">    guard.unlock();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::cout &lt;&lt; &quot;function 3 end&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    std::thread t1(function_1);</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">        ++g_thread_num;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    t1.detach();</span></span><br><span class="line"><span class="string">    std::thread t2(function_2);</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">        ++g_thread_num;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    t2.detach();</span></span><br><span class="line"><span class="string">    std::thread t3(function_3);</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">        ++g_thread_num;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    t3.detach();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for (int i</span> = 0; i &lt; 100; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; loc(mx);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;from function main:&quot;</span> &lt;&lt; <span class="string">i &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        std::unique_lock&lt;std::mutex&gt; guard(g_mx);</span></span><br><span class="line"><span class="string">        g_cv.wait(guard, []() &#123; return g_thread_num == 0; &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    std::cout &lt;&lt; &quot;main end&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;mutex&lt;/code&gt;和&lt;code&gt;condition_variable&lt;/code&gt;来实现&lt;code&gt;WaitForSingleObject&lt;/code&gt;的功能&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Win32无窗口使用定时器</title>
    <link href="https://yesir.github.io/2022/12/02/Win32%E6%97%A0%E7%AA%97%E5%8F%A3%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://yesir.github.io/2022/12/02/Win32%E6%97%A0%E7%AA%97%E5%8F%A3%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8/</id>
    <published>2022-12-02T07:58:29.000Z</published>
    <updated>2022-12-02T08:07:10.709Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>timeSetEvent</code>系列函数</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数原型</span><br><span class="line"></span><br><span class="line">MMRESULT timeSetEvent（ UINT uDelay,</span><br><span class="line">                                 UINT uResolution,</span><br><span class="line">                                 LPTIMECALLBACK lpTimeProc,</span><br><span class="line">                                 WORD dwUser,</span><br><span class="line">                                 UINT fuEvent ）</span><br><span class="line"></span><br><span class="line">         uDelay：以毫秒指定事件的周期。</span><br><span class="line">         Uresolution：以毫秒指定延时的精度，数值越小定时器事件分辨率越高。缺省值为1ms。</span><br><span class="line">         LpTimeProc：指向一个回调函数。</span><br><span class="line">         DwUser：存放用户提供的回调数据。</span><br><span class="line">         FuEvent：指定定时器事件类型：</span><br><span class="line">         TIME_ONESHOT：uDelay毫秒后只产生一次事件</span><br><span class="line">         TIME_PERIODIC ：每隔uDelay毫秒周期性地产生事件。</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Mmsystem.h&gt;</span></span><br><span class="line"><span class="comment">#pragma comment(lib, &quot;Winmm.lib&quot;)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">void WINAPI OnTimeFunc(UINT wTimerID, UINT msg,DWORD dwUser,DWORD dwl,DWORD dw2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OnTimeFunc\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">int main(int argc, char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">MMRESULT timer_id;</span><br><span class="line">timer_id = timeSetEvent(1000, 1, (LPTIMECALLBACK)OnTimeFunc, DWORD(1), TIME_PERIODIC);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(NULL == timer_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;timeSetEvent error!--code:0x%x\n&quot;</span>,GetLastError());</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input any key KillTimer!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">timeKillEvent(timer_id); //释放定时器</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input any key Exit!\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;timeSetEvent&lt;/code&gt;系列函数&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Win32读写串口</title>
    <link href="https://yesir.github.io/2022/11/30/Win32%E8%AF%BB%E5%86%99%E4%B8%B2%E5%8F%A3/"/>
    <id>https://yesir.github.io/2022/11/30/Win32%E8%AF%BB%E5%86%99%E4%B8%B2%E5%8F%A3/</id>
    <published>2022-11-30T07:46:52.000Z</published>
    <updated>2022-11-30T07:56:07.954Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>CreateFile</code>系列函数读写串口</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;Windows.h&gt;</span></span><br><span class="line"></span><br><span class="line">class SerialPort </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">SerialPort();</span><br><span class="line">~SerialPort();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    bool open(unsigned int port, unsigned int baudrate, char parity = <span class="string">&#x27;N&#x27;</span>, unsigned int databits = 8, unsigned int stopsbits = 1);</span><br><span class="line">    void close();</span><br><span class="line">    int write(char *data, int size );</span><br><span class="line">    int <span class="built_in">read</span>(char *data, int size );</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    HANDLE m_com;  </span><br><span class="line">    COMMTIMEOUTS m_timeouts;</span><br><span class="line">    DCB m_dcb;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &quot;SerialPort.h&quot;</span></span><br><span class="line"></span><br><span class="line">SerialPort::SerialPort() : m_com(NULL)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SerialPort::~<span class="function"><span class="title">SerialPort</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SerialPort::<span class="function"><span class="title">close</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_com != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        CloseHandle(m_com);</span><br><span class="line">        m_com = INVALID_HANDLE_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//打开串口</span><br><span class="line">//@param port 串口号 如1...5</span><br><span class="line">//@param baudrate 波特率 9600 115200...</span><br><span class="line">//@param parity 校验位 默认<span class="string">&#x27;N&#x27;</span></span><br><span class="line">//@param databits 数据位 默认8</span><br><span class="line">//@param stopsbits 停止位 默认1</span><br><span class="line">bool SerialPort::open(unsigned int port, unsigned int baudrate, char parity, unsigned int databits, unsigned int stopsbits )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_com != NULL) &#123;</span><br><span class="line">        CloseHandle(m_com);</span><br><span class="line">        m_com = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char portName[50] = &#123;0&#125;;</span><br><span class="line">    sprintf(portName, <span class="string">&quot;COM%d&quot;</span>, port);</span><br><span class="line">    m_com = CreateFileA(portName,                        // communication port string (COMX)</span><br><span class="line">                        GENERIC_READ | GENERIC_WRITE, // <span class="built_in">read</span>/write types</span><br><span class="line">                        NULL,                         // <span class="built_in">comm</span> devices must be opened with exclusive access</span><br><span class="line">                        NULL,                         // no security attributes</span><br><span class="line">                        OPEN_EXISTING,                // <span class="built_in">comm</span> devices must use OPEN_EXISTING</span><br><span class="line">                        FILE_ATTRIBUTE_NORMAL,        // Async I/O</span><br><span class="line">                        NULL);                        // template must be 0 <span class="keyword">for</span> <span class="built_in">comm</span> devices</span><br><span class="line">    <span class="keyword">if</span> (m_com == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        // port not found</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memset(&amp;m_dcb, 0, sizeof(m_dcb));</span><br><span class="line"></span><br><span class="line">    memset(&amp;m_timeouts, 0, sizeof(m_timeouts));</span><br><span class="line">    m_timeouts.ReadIntervalTimeout = 1000;</span><br><span class="line">    m_timeouts.ReadTotalTimeoutMultiplier = 1000;</span><br><span class="line">    m_timeouts.ReadTotalTimeoutConstant = 1000;</span><br><span class="line">    m_timeouts.WriteTotalTimeoutMultiplier = 1000;</span><br><span class="line">    m_timeouts.WriteTotalTimeoutConstant = 1000;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!SetCommTimeouts(m_com, &amp;m_timeouts)) &#123;   </span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!GetCommState(m_com, &amp;m_dcb)) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char conf[50] = &#123;0&#125;;</span><br><span class="line">    sprintf(conf, <span class="string">&quot;baud=%d parity=%c data=%d stop=%d&quot;</span>, baudrate, parity, databits, stopsbits);</span><br><span class="line">    <span class="keyword">if</span> (!BuildCommDCBA(conf, &amp;m_dcb)) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!SetCommState(m_com, &amp;m_dcb)) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // flush the port</span><br><span class="line">    PurgeComm(m_com, PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT);</span><br><span class="line">    <span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SerialPort::write(  char *data, int size )</span><br><span class="line">&#123;</span><br><span class="line">    // Clear buffer</span><br><span class="line">    PurgeComm(m_com, PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT);</span><br><span class="line"></span><br><span class="line">    DWORD bytesWritten = 0;</span><br><span class="line">    BOOL ret = WriteFile(m_com, data, size, &amp;bytesWritten, NULL);</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">        DWORD error = GetLastError();</span><br><span class="line">        switch (error) &#123;</span><br><span class="line">            <span class="keyword">case</span> ERROR_IO_PENDING:</span><br><span class="line">            &#123;</span><br><span class="line">                // <span class="built_in">continue</span> to GetOverlappedResults()</span><br><span class="line">                bytesWritten = 0;</span><br><span class="line">                <span class="built_in">return</span> -1;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            default:</span><br><span class="line">            &#123;</span><br><span class="line">                // all other error codes</span><br><span class="line">                //port-&gt;ProcessErrorMessage(<span class="string">&quot;WriteFile()&quot;</span>);</span><br><span class="line">                //return -1;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    //Verify that the data size send equals what we tried to send</span><br><span class="line">    <span class="keyword">if</span> (bytesWritten != (DWORD)size) &#123;</span><br><span class="line">        <span class="built_in">return</span> -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> bytesWritten;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SerialPort::<span class="built_in">read</span>( char *data, int size )</span><br><span class="line">&#123;</span><br><span class="line">    DWORD bytesRead = 0;</span><br><span class="line">    BOOL ret = ReadFile(m_com, data, size, &amp;bytesRead, NULL);</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123; </span><br><span class="line">        DWORD error = GetLastError();</span><br><span class="line">        switch (error) &#123; </span><br><span class="line">            <span class="keyword">case</span> ERROR_IO_PENDING:</span><br><span class="line">            &#123; </span><br><span class="line">                // asynchronous i/o is still <span class="keyword">in</span> progress </span><br><span class="line">                // Proceed on to GetOverlappedResults();</span><br><span class="line">                <span class="built_in">return</span> -1;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            default:</span><br><span class="line">            &#123;</span><br><span class="line">                // Another error has occured.  Process this error.</span><br><span class="line">                //port-&gt;ProcessErrorMessage(<span class="string">&quot;ReadFile()&quot;</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> bytesRead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;CreateFile&lt;/code&gt;系列函数读写串口&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Qt在动态库中创建窗口</title>
    <link href="https://yesir.github.io/2022/11/25/Qt%E5%9C%A8%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%AA%97%E5%8F%A3/"/>
    <id>https://yesir.github.io/2022/11/25/Qt%E5%9C%A8%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%AA%97%E5%8F%A3/</id>
    <published>2022-11-25T01:42:12.000Z</published>
    <updated>2022-11-28T02:10:19.822Z</updated>
    
    <content type="html"><![CDATA[<p>Qt在动态库中创建窗口,<a href="https://github.com/yyesir/ParentLib.git">代码</a></p><span id="more"></span><blockquote><p>首先创建dll项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef EXPORTWIDGET_H</span></span><br><span class="line"><span class="comment">#define EXPORTWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;QtCore/qglobal.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if defined(EXPORTWIDGET_LIBRARY)</span></span><br><span class="line"><span class="comment">#  define EXPORTWIDGETSHARED_EXPORT Q_DECL_EXPORT</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#  define EXPORTWIDGETSHARED_EXPORT Q_DECL_IMPORT</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">namespace ExportWidget</span><br><span class="line">&#123;</span><br><span class="line">    extern <span class="string">&quot;C&quot;</span></span><br><span class="line">    &#123;</span><br><span class="line">        EXPORTWIDGETSHARED_EXPORT void Init();</span><br><span class="line"></span><br><span class="line">        EXPORTWIDGETSHARED_EXPORT void ShowWidget();</span><br><span class="line"></span><br><span class="line">        EXPORTWIDGETSHARED_EXPORT void unInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif // EXPORTWIDGET_H</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;exportwidget.h&quot;</span></span><br><span class="line"><span class="comment">#include &quot;form.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;QApplication&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QDebug&gt;</span></span><br><span class="line"></span><br><span class="line">static QApplication* _Application;</span><br><span class="line"></span><br><span class="line">EXPORTWIDGETSHARED_EXPORT void ExportWidget::<span class="function"><span class="title">Init</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    _Application = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXPORTWIDGETSHARED_EXPORT void ExportWidget::<span class="function"><span class="title">ShowWidget</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_Application == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        int argc = 0;</span><br><span class="line">        _Application = new QApplication(argc, NULL);</span><br><span class="line">        // Form为普通widget窗口</span><br><span class="line">Form* _fm = new Form();</span><br><span class="line">        _fm-&gt;show();</span><br><span class="line">        _Application-&gt;<span class="built_in">exec</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXPORTWIDGETSHARED_EXPORT void ExportWidget::<span class="function"><span class="title">unInit</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_Application != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        _Application-&gt;quit();</span><br><span class="line">        _Application = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>.pro</code>文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Project created by QtCreator 2022-11-24T14:36:38</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#-------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">QT       += widgets core gui</span><br><span class="line"></span><br><span class="line">TARGET = ExportWidget</span><br><span class="line">TEMPLATE = lib</span><br><span class="line"></span><br><span class="line">CONFIG += plugin c++11</span><br><span class="line"></span><br><span class="line">DESTDIR = $<span class="variable">$PWD</span>/../Debug</span><br><span class="line"></span><br><span class="line">DEFINES += EXPORTWIDGET_LIBRARY</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also make your code fail to compile if you use deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment"># You can also select to disable deprecated APIs only up to a certain version of Qt.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">        exportwidget.cpp \</span><br><span class="line">    form.cpp</span><br><span class="line"></span><br><span class="line">HEADERS += \</span><br><span class="line">        exportwidget.h \</span><br><span class="line">    form.h</span><br><span class="line"></span><br><span class="line">unix &#123;</span><br><span class="line">    target.path = /usr/lib</span><br><span class="line">    INSTALLS += target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FORMS += \</span><br><span class="line">    form.ui</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;exportwidget.h&quot;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = 0; i &lt; 5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ExportWidget::Init();</span><br><span class="line">        ExportWidget::ShowWidget();</span><br><span class="line">        ExportWidget::unInit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 如果为qt项目.pro文件</span><br><span class="line"></span><br><span class="line">QT -= gui</span><br><span class="line">QT += widgets</span><br><span class="line"></span><br><span class="line">CONFIG += c++11 console</span><br><span class="line">CONFIG -= app_bundle</span><br><span class="line">DESTDIR = $<span class="variable">$PWD</span>/../Debug</span><br><span class="line"></span><br><span class="line">TARGET = TestWidget</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following define makes your compiler emit warnings if you use</span></span><br><span class="line"><span class="comment"># any feature of Qt which as been marked deprecated (the exact warnings</span></span><br><span class="line"><span class="comment"># depend on your compiler). Please consult the documentation of the</span></span><br><span class="line"><span class="comment"># deprecated API in order to know how to port your code away from it.</span></span><br><span class="line">DEFINES += QT_DEPRECATED_WARNINGS</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also make your code fail to compile if you use deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment"># You can also select to disable deprecated APIs only up to a certain version of Qt.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line">SOURCES += main.cpp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LIBS += -L$<span class="variable">$PWD</span>/../Debug/ -lExportWidget</span><br><span class="line"></span><br><span class="line">QMAKE_LFLAGS += -Wl,-rpath=.</span><br><span class="line"></span><br><span class="line">HEADERS += \</span><br><span class="line">    exportwidget.h</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Qt在动态库中创建窗口,&lt;a href=&quot;https://github.com/yyesir/ParentLib.git&quot;&gt;代码&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>AES-CBC加解密</title>
    <link href="https://yesir.github.io/2022/11/22/AES-CBC%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>https://yesir.github.io/2022/11/22/AES-CBC%E5%8A%A0%E8%A7%A3%E5%AF%86/</id>
    <published>2022-11-22T06:05:37.000Z</published>
    <updated>2023-04-10T02:49:48.236Z</updated>
    
    <content type="html"><![CDATA[<p>将字符串使用AES加密（CBC的方式，IV填充’0000000000000000’）</p><span id="more"></span><blockquote><p>使用openssl</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#aes.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/aes.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/rsa.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/pem.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/err.h&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">static const std::string base64_chars =</span><br><span class="line"><span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"><span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"><span class="string">&quot;0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line">// 密钥</span><br><span class="line">static const string s_aeskey = <span class="string">&quot;YBC<span class="variable">$08XTncsP6B1</span>!&quot;</span>;</span><br><span class="line"></span><br><span class="line">class AES</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">static AES* <span class="function"><span class="title">getInstance</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">static AES _aaes;</span><br><span class="line"><span class="built_in">return</span> &amp;_aaes;</span><br><span class="line">&#125;</span><br><span class="line">virtual ~AES();</span><br><span class="line"></span><br><span class="line">std::string aes_256_cbc_encode(const std::string&amp; data);</span><br><span class="line">std::string aes_256_cbc_decode(const std::string&amp; strData);</span><br><span class="line">private:</span><br><span class="line">static inline bool is_base64(unsigned char c) &#123;</span><br><span class="line"><span class="built_in">return</span> (isalnum(c) || (c == <span class="string">&#x27;+&#x27;</span>) || (c == <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string base64_encode(char const* bytes_to_encode, int in_len);</span><br><span class="line">std::string base64_decode(std::string&amp; encoded_string);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">AES();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#aes.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &quot;AES.h&quot;</span></span><br><span class="line"></span><br><span class="line">AES::<span class="function"><span class="title">AES</span></span>() </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AES::~<span class="function"><span class="title">AES</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 转<span class="built_in">base64</span>，返回结果</span><br><span class="line">std::string AES::base64_encode(char const* bytes_to_encode, int in_len) </span><br><span class="line">&#123;</span><br><span class="line">std::string ret;</span><br><span class="line">int i = 0;</span><br><span class="line">int j = 0;</span><br><span class="line">unsigned char char_array_3[3];</span><br><span class="line">unsigned char char_array_4[4];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (in_len--) &#123;</span><br><span class="line">char_array_3[i++] = *(bytes_to_encode++);</span><br><span class="line"><span class="keyword">if</span> (i == 3) &#123;</span><br><span class="line">char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;</span><br><span class="line">char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; <span class="string">4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4</span>);</span><br><span class="line">char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; <span class="string">2) + ((char_array_3[2</span>] &amp; 0xc0) &gt;&gt; 6);</span><br><span class="line">char_array_4[3] = char_array_3[2] &amp; 0x3f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = 0; (i &lt; 4); i++)</span><br><span class="line">ret += base64_chars[char_array_4[i]];</span><br><span class="line">i = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &lt; 3; j++)</span><br><span class="line">char_array_3[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;</span><br><span class="line">char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; <span class="string">4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4</span>);</span><br><span class="line">char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; <span class="string">2) + ((char_array_3[2</span>] &amp; 0xc0) &gt;&gt; 6);</span><br><span class="line">char_array_4[3] = char_array_3[2] &amp; 0x3f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = 0; (j &lt; i + 1); j++)</span><br><span class="line">ret += base64_chars[char_array_4[j]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((i++ &lt; 3))</span><br><span class="line">ret += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="built_in">base64</span>解码，返回结果</span><br><span class="line">std::string AES::base64_decode(std::string&amp; encoded_string) </span><br><span class="line">&#123;</span><br><span class="line">int in_len = encoded_string.size();</span><br><span class="line">int i = 0;</span><br><span class="line">int j = 0;</span><br><span class="line">int in_ = 0;</span><br><span class="line">unsigned char char_array_4[4], char_array_3[3];</span><br><span class="line">std::string ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (in_len-- &amp;&amp; (encoded_string[in_] != <span class="string">&#x27;=&#x27;</span>) &amp;&amp; is_base64(encoded_string[in_])) &#123;</span><br><span class="line">char_array_4[i++] = encoded_string[in_]; in_++;</span><br><span class="line"><span class="keyword">if</span> (i == 4) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = 0; i &lt; 4; i++)</span><br><span class="line">char_array_4[i] = base64_chars.find(char_array_4[i]);</span><br><span class="line"></span><br><span class="line">char_array_3[0] = (char_array_4[0] &lt;&lt; <span class="string">2) + ((char_array_4[1] &amp; 0x30) &gt;&gt; 4);</span></span><br><span class="line"><span class="string">char_array_3[1] = ((char_array_4[1] &amp; 0xf) &lt;&lt; 4) + ((char_array_4[2</span>] &amp; 0x3c) &gt;&gt; 2);</span><br><span class="line">char_array_3[2] = ((char_array_4[2] &amp; 0x3) &lt;&lt; <span class="string">6) + char_array_4[3];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for (i = 0; (i &lt; 3); i++)</span></span><br><span class="line"><span class="string">ret += char_array_3[i];</span></span><br><span class="line"><span class="string">i = 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if (i) &#123;</span></span><br><span class="line"><span class="string">for (j = i; j &lt; 4; j++)</span></span><br><span class="line"><span class="string">char_array_4[j] = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for (j = 0; j &lt; 4; j++)</span></span><br><span class="line"><span class="string">char_array_4[j] = base64_chars.find(char_array_4[j]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">char_array_3[0] = (char_array_4[0] &lt;&lt; 2) + ((char_array_4[1] &amp; 0x30) &gt;&gt; 4);</span></span><br><span class="line"><span class="string">char_array_3[1] = ((char_array_4[1] &amp; 0xf) &lt;&lt; 4) + ((char_array_4[2] &amp; 0x3c) &gt;&gt; 2);</span></span><br><span class="line"><span class="string">char_array_3[2] = ((char_array_4[2] &amp; 0x3) &lt;&lt; 6</span>) + char_array_4[3];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = 0; (j &lt; i - 1); j++) ret += char_array_3[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// aes加密</span><br><span class="line">std::string AES::aes_256_cbc_encode(const std::string&amp; data) </span><br><span class="line">&#123;</span><br><span class="line">unsigned char s_aesiv[AES_BLOCK_SIZE] = &#123; <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span> &#125;;</span><br><span class="line">AES_KEY aes_key;</span><br><span class="line"><span class="keyword">if</span> (AES_set_encrypt_key((const unsigned char*)s_aeskey.c_str(), s_aeskey.length() * 8, &amp;aes_key) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::string strRet;</span><br><span class="line">std::string data_bak = data;</span><br><span class="line">unsigned int data_length = data_bak.length();</span><br><span class="line"></span><br><span class="line">// ZeroPadding</span><br><span class="line">// 根据长度补充相应的字符</span><br><span class="line">int padding = 0;</span><br><span class="line"><span class="keyword">if</span> (data_bak.length() % (AES_BLOCK_SIZE) &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">padding = AES_BLOCK_SIZE - data_bak.length() % (AES_BLOCK_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data_length += padding;</span><br><span class="line"><span class="keyword">if</span> (padding &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">data_bak.append(size_t(padding), char(padding));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (unsigned int i = 0; i &lt; data_length / (AES_BLOCK_SIZE); i++)</span><br><span class="line">&#123;</span><br><span class="line">std::string str16 = data_bak.substr(i * AES_BLOCK_SIZE, AES_BLOCK_SIZE);</span><br><span class="line">unsigned char out[AES_BLOCK_SIZE];</span><br><span class="line">::memset(out, 0, AES_BLOCK_SIZE);</span><br><span class="line">AES_cbc_encrypt((const unsigned char*)str16.c_str(), out, AES_BLOCK_SIZE, &amp;aes_key, s_aesiv, AES_ENCRYPT);</span><br><span class="line">strRet += std::string((const char*)out, AES_BLOCK_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加密后转<span class="built_in">base64</span></span><br><span class="line"><span class="built_in">return</span> base64_encode(strRet.c_str(), strRet.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// aes解密</span><br><span class="line">std::string AES::aes_256_cbc_decode(const std::string&amp; strData) </span><br><span class="line">&#123;</span><br><span class="line">unsigned char s_aesiv[AES_BLOCK_SIZE] = &#123; <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span> &#125;;</span><br><span class="line">// 先<span class="built_in">base64</span>解码</span><br><span class="line">std::string decode_base64 = strData;</span><br><span class="line">string str_decode_base64 = base64_decode(decode_base64);</span><br><span class="line">AES_KEY aes_key;</span><br><span class="line"><span class="keyword">if</span> (AES_set_decrypt_key((const unsigned char*)s_aeskey.c_str(), s_aeskey.length() * 8, &amp;aes_key) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::string strRet;</span><br><span class="line"><span class="keyword">for</span> (unsigned int i = 0; i &lt; str_decode_base64.length() / AES_BLOCK_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line">std::string str16 = str_decode_base64.substr(i * AES_BLOCK_SIZE, AES_BLOCK_SIZE);</span><br><span class="line">unsigned char out[AES_BLOCK_SIZE];</span><br><span class="line">::memset(out, 0, AES_BLOCK_SIZE);</span><br><span class="line">AES_cbc_encrypt((const unsigned char*)str16.c_str(), out, AES_BLOCK_SIZE, &amp;aes_key, s_aesiv, AES_DECRYPT);</span><br><span class="line">strRet += std::string((const char*)out, AES_BLOCK_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据最后一个填充字符 并删除所有填充字符</span><br><span class="line">char paddingSize = strRet.at(strRet.size() - 1);</span><br><span class="line">int nPos = strRet.find(paddingSize);</span><br><span class="line">strRet = strRet.substr(0, nPos);</span><br><span class="line"><span class="built_in">return</span> strRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>另一种写法,推荐使用此方法</p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;openssl/aes.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/rsa.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/pem.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;openssl/err.h&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">#if _DEBUG</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;libcrypto64MDd.lib&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;libssl64MDd.lib&quot;)</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;libcrypto_static.lib&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;libssl_static.lib&quot;)</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">static const std::string base64_chars =</span><br><span class="line"><span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"><span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"><span class="string">&quot;0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line">static bool is_base64(unsigned char c) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> (isalnum(c) || (c == <span class="string">&#x27;+&#x27;</span>) || (c == <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string base64_encode(char const* bytes_to_encode, int in_len) </span><br><span class="line">&#123;</span><br><span class="line">    std::string ret;</span><br><span class="line">    int i = 0;</span><br><span class="line">    int j = 0;</span><br><span class="line">    unsigned char char_array_3[3];</span><br><span class="line">    unsigned char char_array_4[4];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (in_len--) </span><br><span class="line">    &#123;</span><br><span class="line">        char_array_3[i++] = *(bytes_to_encode++);</span><br><span class="line">        <span class="keyword">if</span> (i == 3) </span><br><span class="line">        &#123;</span><br><span class="line">            char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;</span><br><span class="line">            char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; <span class="string">4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4</span>);</span><br><span class="line">            char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; <span class="string">2) + ((char_array_3[2</span>] &amp; 0xc0) &gt;&gt; 6);</span><br><span class="line">            char_array_4[3] = char_array_3[2] &amp; 0x3f;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = 0; (i &lt; 4); i++)</span><br><span class="line">                ret += base64_chars[char_array_4[i]];</span><br><span class="line">            i = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt; 3; j++)</span><br><span class="line">            char_array_3[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;</span><br><span class="line">        char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; <span class="string">4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4</span>);</span><br><span class="line">        char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; <span class="string">2) + ((char_array_3[2</span>] &amp; 0xc0) &gt;&gt; 6);</span><br><span class="line">        char_array_4[3] = char_array_3[2] &amp; 0x3f;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = 0; (j &lt; i + 1); j++)</span><br><span class="line">            ret += base64_chars[char_array_4[j]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((i++ &lt; 3))</span><br><span class="line">            ret += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string base64_decode(std::string&amp; encoded_string) </span><br><span class="line">&#123;</span><br><span class="line">    int in_len = encoded_string.size();</span><br><span class="line">    int i = 0;</span><br><span class="line">    int j = 0;</span><br><span class="line">    int in_ = 0;</span><br><span class="line">    unsigned char char_array_4[4], char_array_3[3];</span><br><span class="line">    std::string ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (in_len-- &amp;&amp; (encoded_string[in_] != <span class="string">&#x27;=&#x27;</span>) &amp;&amp; is_base64(encoded_string[in_])) </span><br><span class="line">    &#123;</span><br><span class="line">        char_array_4[i++] = encoded_string[in_]; in_++;</span><br><span class="line">        <span class="keyword">if</span> (i == 4) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = 0; i &lt; 4; i++)</span><br><span class="line">                char_array_4[i] = base64_chars.find(char_array_4[i]);</span><br><span class="line"></span><br><span class="line">            char_array_3[0] = (char_array_4[0] &lt;&lt; <span class="string">2) + ((char_array_4[1] &amp; 0x30) &gt;&gt; 4);</span></span><br><span class="line"><span class="string">            char_array_3[1] = ((char_array_4[1] &amp; 0xf) &lt;&lt; 4) + ((char_array_4[2</span>] &amp; 0x3c) &gt;&gt; 2);</span><br><span class="line">            char_array_3[2] = ((char_array_4[2] &amp; 0x3) &lt;&lt; <span class="string">6) + char_array_4[3];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            for (i = 0; (i &lt; 3); i++)</span></span><br><span class="line"><span class="string">                ret += char_array_3[i];</span></span><br><span class="line"><span class="string">            i = 0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (i) </span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        for (j = i; j &lt; 4; j++)</span></span><br><span class="line"><span class="string">            char_array_4[j] = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for (j = 0; j &lt; 4; j++)</span></span><br><span class="line"><span class="string">            char_array_4[j] = base64_chars.find(char_array_4[j]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        char_array_3[0] = (char_array_4[0] &lt;&lt; 2) + ((char_array_4[1] &amp; 0x30) &gt;&gt; 4);</span></span><br><span class="line"><span class="string">        char_array_3[1] = ((char_array_4[1] &amp; 0xf) &lt;&lt; 4) + ((char_array_4[2] &amp; 0x3c) &gt;&gt; 2);</span></span><br><span class="line"><span class="string">        char_array_3[2] = ((char_array_4[2] &amp; 0x3) &lt;&lt; 6</span>) + char_array_4[3];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = 0; (j &lt; i - 1); j++) ret += char_array_3[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string encrypt(string plaintext) </span><br><span class="line">&#123;</span><br><span class="line">    // Set up encryption context</span><br><span class="line">    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();</span><br><span class="line">    //默认使用PKCS7填充</span><br><span class="line">    EVP_EncryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, (const unsigned char*)<span class="string">&quot;YBC<span class="variable">$08XTncsP6B1</span>!&quot;</span>, (const unsigned char*)<span class="string">&quot;0000000000000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#if 0 //如果需要使用ZERO填充,先禁用自动填充,再将&#x27;\0&#x27;追加到加密字符串后补充为16的倍数</span></span><br><span class="line">    // Disable automatic padding</span><br><span class="line">    EVP_CIPHER_CTX_set_padding(ctx, 0);</span><br><span class="line"></span><br><span class="line">    // Manually pad plaintext with zeros</span><br><span class="line">    int block_size = EVP_CIPHER_CTX_block_size(ctx);</span><br><span class="line">    int padding_len = block_size - (plaintext.length() % block_size);</span><br><span class="line">    plaintext.append(padding_len, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line">    // Encrypt plaintext</span><br><span class="line">    int outlen1, outlen2;</span><br><span class="line">    unsigned char outbuf[1024];</span><br><span class="line">    string ciphertext;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; plaintext.length(); i += 1024) </span><br><span class="line">    &#123;</span><br><span class="line">        int len = min(1024, (int)plaintext.length() - i);</span><br><span class="line">        EVP_EncryptUpdate(ctx, outbuf, &amp;outlen1, (const unsigned char*)plaintext.c_str() + i, len);</span><br><span class="line">        ciphertext.append((const char*)outbuf, outlen1);</span><br><span class="line">    &#125;</span><br><span class="line">    EVP_EncryptFinal_ex(ctx, outbuf, &amp;outlen2);</span><br><span class="line">    ciphertext.append((const char*)outbuf, outlen2);</span><br><span class="line"></span><br><span class="line">    // Clean up</span><br><span class="line">    EVP_CIPHER_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">    // Return encrypted text</span><br><span class="line">    <span class="built_in">return</span> ciphertext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string decrypt(string ciphertext) </span><br><span class="line">&#123;</span><br><span class="line">    // Set up decryption context</span><br><span class="line">    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();</span><br><span class="line">    EVP_DecryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, (const unsigned char*)<span class="string">&quot;YBC<span class="variable">$08XTncsP6B1</span>!&quot;</span>, (const unsigned char*)<span class="string">&quot;0000000000000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#if 0 //如果需要使用ZERO填充,先禁用自动填充</span></span><br><span class="line">    // Disable automatic padding</span><br><span class="line">    EVP_CIPHER_CTX_set_padding(ctx, 0);</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">    // Decrypt ciphertext</span><br><span class="line">    int outlen1, outlen2;</span><br><span class="line">    unsigned char outbuf[1024];</span><br><span class="line">    string plaintext;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; ciphertext.length(); i += 1024) </span><br><span class="line">    &#123;</span><br><span class="line">        int len = min(1024, (int)ciphertext.length() - i);</span><br><span class="line">        EVP_DecryptUpdate(ctx, outbuf, &amp;outlen1, (const unsigned char*)ciphertext.c_str() + i, len);</span><br><span class="line">        plaintext.append((const char*)outbuf, outlen1);</span><br><span class="line">    &#125;</span><br><span class="line">    EVP_DecryptFinal_ex(ctx, outbuf, &amp;outlen2);</span><br><span class="line">    plaintext.append((const char*)outbuf, outlen2);</span><br><span class="line"></span><br><span class="line">    // Clean up</span><br><span class="line">    EVP_CIPHER_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#if 0 //如果使用ZERO填充,使用一个循环来手动删除解密后文本末尾的零字符</span></span><br><span class="line">    // Manually remove padding zeros</span><br><span class="line">    int plaintext_len = plaintext.length();</span><br><span class="line">    <span class="keyword">while</span> (plaintext_len &gt; 0 &amp;&amp; plaintext[plaintext_len - 1] == <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        plaintext_len--;</span><br><span class="line">    &#125;</span><br><span class="line">    plaintext.resize(plaintext_len);</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">    // Return decrypted text</span><br><span class="line">    <span class="built_in">return</span> plaintext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) </span><br><span class="line">&#123;</span><br><span class="line">    // 原始文本</span><br><span class="line">    string plaintext = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    // 加密</span><br><span class="line">    string ciphertext = encrypt(plaintext);</span><br><span class="line">    //加密结果转<span class="built_in">base64</span></span><br><span class="line">    string cipherbase64 = base64_encode(ciphertext.c_str(), ciphertext.length());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Encrypted: &quot;</span> &lt;&lt; <span class="string">cipherbase64 &lt;&lt; endl;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 解密</span></span><br><span class="line"><span class="string">    // 先将base64解码</span></span><br><span class="line"><span class="string">    string decrypted = base64_decode(cipherbase64</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Decrypted: &quot;</span> &lt;&lt; <span class="string">decrypt(ciphertext) &lt;&lt; endl;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    getchar();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;将字符串使用AES加密（CBC的方式，IV填充’0000000000000000’）&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置smb共享服务</title>
    <link href="https://yesir.github.io/2022/11/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEsmb%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/"/>
    <id>https://yesir.github.io/2022/11/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEsmb%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-11-17T08:04:49.000Z</published>
    <updated>2022-11-17T08:17:02.382Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派3B+配置smb共享服务，方便在windows上访问树莓派硬盘文件.</p><span id="more"></span><blockquote><p>首先、配置树莓派源为阿里源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><blockquote><p>2、更新源仓库信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">如果有需要</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><blockquote><p>3、安装smb服务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba-common-bin</span><br><span class="line"></span><br><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure><blockquote><p>4、修改配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/etc/samba/smb.conf</span><br><span class="line"></span><br><span class="line">如果需要创建用户，可以单独设置用户访问配置，如创建smbpi用户</span><br><span class="line"></span><br><span class="line">[smbpi]</span><br><span class="line">path = /home/smbpi/</span><br><span class="line">valid <span class="built_in">users</span> = smbpi</span><br><span class="line">browseable = Yes    <span class="comment"># 是否启用网络发现</span></span><br><span class="line">writeable = Yes</span><br><span class="line">writelist = smbpi</span><br><span class="line">create mask = 0777</span><br><span class="line">directory mask = 0777</span><br><span class="line"></span><br><span class="line">保存配置后为smbpi用户设置密码</span><br><span class="line">smbpasswd -a smbpi</span><br><span class="line"></span><br><span class="line">如果不需要用户，可在配置文件中添加public段</span><br><span class="line"></span><br><span class="line">[public]</span><br><span class="line">comment = public folder</span><br><span class="line">path = /data    <span class="comment"># public访问路径</span></span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line">public = <span class="built_in">yes</span></span><br><span class="line">browseable = <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">保存配置然后重启smb服务</span><br><span class="line">sudo systemctl restart smbd</span><br><span class="line"></span><br><span class="line">添加开机启动</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> smbd</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;树莓派3B+配置smb共享服务，方便在windows上访问树莓派硬盘文件.&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Linux qt 打包</title>
    <link href="https://yesir.github.io/2022/11/16/Linux-qt-%E6%89%93%E5%8C%85/"/>
    <id>https://yesir.github.io/2022/11/16/Linux-qt-%E6%89%93%E5%8C%85/</id>
    <published>2022-11-16T03:32:00.000Z</published>
    <updated>2022-11-28T02:12:52.361Z</updated>
    
    <content type="html"><![CDATA[<p>在windows系统中，通用使用<code>windeployqt.exe</code>打包qt程序，同样在linux 系统中可以使用<code>linuxdeployqt</code>打包qt程序。</p><blockquote><p>注：<code>linuxdeployqt</code>不支持glibc高版本的操作系统</p></blockquote><span id="more"></span><p><code>qt</code>开发环境版本为：<code>5.9.5</code></p><blockquote><p>首先、下载linuxdeployqt源码包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-b 6 表示 版本号</span><br><span class="line">git <span class="built_in">clone</span> -b 6 https://gitee.com/yangfanimb/linuxdeployqt.git</span><br></pre></td></tr></table></figure><blockquote><p>2、编译<code>linuxdeployqt</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=$(<span class="built_in">readlink</span> -f /usr/lib/aarch64-linux-gnu/qt5/bin/):<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">cd</span> linuxdeployqt</span><br><span class="line">qmake</span><br><span class="line">make</span><br></pre></td></tr></table></figure><pre><code>执行完将bin/linuxdeployqt 拷贝到/usr/local/bin`cp bin/linuxdeployqt /usr/local/bin`</code></pre><blockquote><p>3、设置<code>qt</code>环境变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/lib/qt5/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LIB_PATH=/usr/lib/aarch64-linux-gnu/:<span class="variable">$LIB_PATH</span></span><br><span class="line"><span class="built_in">export</span> PLUGIN_PATH=/usr/lib/aarch64-linux-gnu/qt5/plugins:<span class="variable">$PLUGIN_PATH</span></span><br><span class="line"><span class="built_in">export</span> QML2_PATH=/usr/lib/aarch64-linux-gnu/qt5/qml:<span class="variable">$QML2_PATH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改文件:</span><br><span class="line">vim /usr/lib/x86_64-linux-gnu/qt-default/qtchooser/default.conf</span><br><span class="line"></span><br><span class="line">将文件中的qt4内容删除，写入qt5的内容如下：</span><br><span class="line"></span><br><span class="line">/usr/lib/aarch64-linux-gnu/qt5/bin</span><br><span class="line">/usr/lib/aarch64-linux-gnu</span><br></pre></td></tr></table></figure><blockquote><p>4、错误解决</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not start patchelf.</span><br><span class="line">ERROR: Make sure it is installed on your <span class="variable">$PATH</span>.</span><br><span class="line"></span><br><span class="line">安装patchelf.</span><br><span class="line"></span><br><span class="line">sudo apt-get install patchelf</span><br><span class="line">如果执行失败可以手动安装</span><br><span class="line">wget http://ports.ubuntu.com/pool/universe/p/patchelf/patchelf_0.9-1_arm64.deb</span><br><span class="line">sudo dpkg -i patchelf_0.9-1_arm64.deb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ERROR: appimagetool: not found</span><br><span class="line"></span><br><span class="line">appimagetool 是为了将软件打成一个整体包,即AppImage包，此处可忽略</span><br></pre></td></tr></table></figure><blockquote><p>5、打包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linuxdeployqt Test -appimage</span><br></pre></td></tr></table></figure><blockquote><p>6、制作deb包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#make_pkg.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">Usage: $0 [-v PACKAGE_VERSION] </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Detect the version of app.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">  -v    version</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;-h&quot;</span> -o <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;-H&quot;</span> -o <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;--help&quot;</span> -o <span class="variable">$#</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">  usage</span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ 0 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;-v&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    VersionID=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">shift</span> 2</span><br><span class="line">  <span class="keyword">elif</span> [ <span class="variable">$#</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;/^Version/c\Version: &#x27;</span><span class="variable">$VersionID</span> Name-Kylin-Desktop/DEBIAN/control</span><br><span class="line"></span><br><span class="line">deploy_dir=Name-Kylin-Desktop</span><br><span class="line">package_dir=./package</span><br><span class="line"></span><br><span class="line">makepkgname=Name-<span class="variable">$VersionID</span>-Kylin-Desktop-aarch64.deb</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$makepkgname</span></span><br><span class="line"></span><br><span class="line">dpkg -b <span class="variable">$deploy_dir</span> <span class="variable">$makepkgname</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;done.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在windows系统中，通用使用&lt;code&gt;windeployqt.exe&lt;/code&gt;打包qt程序，同样在linux 系统中可以使用&lt;code&gt;linuxdeployqt&lt;/code&gt;打包qt程序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;linuxdeployqt&lt;/code&gt;不支持glibc高版本的操作系统&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://yesir.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>使用docker搭建gitlab</title>
    <link href="https://yesir.github.io/2022/11/09/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAgitlab/"/>
    <id>https://yesir.github.io/2022/11/09/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAgitlab/</id>
    <published>2022-11-09T09:35:39.000Z</published>
    <updated>2022-11-09T09:57:26.898Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 搭建 Gitlab 服务器</p><span id="more"></span><blockquote><p>首先获取中文镜像<br><code>docker pull gitlab/gitlab-ce:latest</code></p></blockquote><blockquote><p>启动容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run \</span><br><span class="line"> -itd  \</span><br><span class="line"> -p 8080:80 \</span><br><span class="line"> -p 8022:22 \</span><br><span class="line"> -v /home/gitlab/etc:/etc/gitlab  \</span><br><span class="line"> -v /home/gitlab/log:/var/log/gitlab \</span><br><span class="line"> -v /home/gitlab/opt:/var/opt/gitlab \</span><br><span class="line"> --restart always \</span><br><span class="line"> --privileged=<span class="literal">true</span> \</span><br><span class="line"> --name gitlab \</span><br><span class="line"> gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><blockquote><p>修改配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改gitlab.rb</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"> </span><br><span class="line"><span class="comment">#加入如下</span></span><br><span class="line"><span class="comment">#gitlab访问地址，可以写域名。如果端口不写的话默认为80端口</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.31.139&#x27;</span></span><br><span class="line"><span class="comment">#ssh主机ip</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;192.168.31.139&#x27;</span></span><br><span class="line"><span class="comment">#ssh连接端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 8022</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 让配置生效</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改http和ssh配置</span></span><br><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br><span class="line"> </span><br><span class="line">  gitlab:</span><br><span class="line">    host: 192.168.31.139</span><br><span class="line">    port: 8080 <span class="comment"># 这里改为8080</span></span><br><span class="line">    https: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启gitlab </span></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"><span class="comment">#退出容器 </span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>使用浏览器访问</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.124.194:8080/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次访问，会让修改root密码</span></span><br></pre></td></tr></table></figure><blockquote><p>修改root密码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 进入控制台</span></span><br><span class="line">gitlab-rails console -e production</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询id为1的用户，id为1的用户是超级管理员</span></span><br><span class="line">user = User.<span class="built_in">where</span>(<span class="built_in">id</span>:1).first</span><br><span class="line"><span class="comment"># 修改密码为lhx123456</span></span><br><span class="line">user.password=<span class="string">&#x27;lhx123456&#x27;</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">user.save!</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 搭建 Gitlab 服务器&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://yesir.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
